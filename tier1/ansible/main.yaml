---

- name: Check all required variables are defined
  hosts: localhost

  vars_files:
    - vars/ansible_vars.yaml

  tasks:
    - name: Check all required variables are defined
      ansible.builtin.assert:
        that: item is defined
        success_msg: "Required variable {{ item }} is defined"
        fail_msg: "Required variable {{ item }} is not defined!"
      loop:
        - guac_db_password
        - guac_admin_password


- name: Basic hardening for all hosts
  hosts: all

  tags: hardening

  collections:
    - devsec.hardening

  vars_files:
    - vars/terraform_vars.yaml

  roles:
    - role: wait_for_cloud_init

    - role: apt_cache
      become: yes

    - role: devsec.hardening.ssh_hardening
      become: yes

    - role: oefenweb.fail2ban
      become: yes


- name: Configure Guacamole VM
  hosts: guacamole

  tags: guacamole

  vars:
    API_root: http://localhost:8080/guacamole/api
    data_source: postgresql
    guacadmin_file_path: "{{ ansible_user_dir }}/guacadmin"

  vars_files:
    - vars/ansible_vars.yaml
    - vars/terraform_vars.yaml

  roles:
    - role: wait_for_cloud_init

    - role: apt_cache
      become: yes

    - role: geerlingguy.docker
      become: yes

    - role: geerlingguy.pip
      become: yes

  tasks:
    # Ensure ansible_user has docker-group privileges
    - name: Reset connection so that group changes take effect
      meta: reset_connection

    - name: Check if database initialisation script exists
      ansible.builtin.stat:
        path: "{{ ansible_user_dir }}/initdb.sql"
      register: init_file

    - name: Create database initialisation script
      block:
        - name: Get database initialisation script contents
          community.docker.docker_container:
            name: guacamole
            image: "guacamole/guacamole:{{ guac_version }}"
            command: /opt/guacamole/bin/initdb.sh --postgres
            cleanup: yes
            detach: no
            container_default_behavior: compatibility
          register: init_script

        - name: Write database initialisation script
          ansible.builtin.copy:
            dest: "{{ init_db_file }}"
            content: "{{ init_script.container.Output }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
      when: not init_file.stat.exists

    - name: Docker services
      block:
        - name: Template docker-compose file
          ansible.builtin.template:
            src: guacamole/docker-compose.yaml.j2
            dest: "{{ ansible_user_dir }}/docker-compose.yaml"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644

        - name: Run docker services
          community.docker.docker_compose:
            project_src: "{{ ansible_user_dir }}"
            project_name: guacamole
            pull: yes
          register: compose_output

        - name: Ensure that containers are running
          ansible.builtin.assert:
            that:
              - compose_output.services.database.postgres.state.running
              - compose_output.services.guacamole.guacamole.state.running
              - compose_output.services.guacd.guacd.state.running
              - compose_output.services.reverse_proxy.traefik.state.running

    - name: (Temporarily) disable TOTP to allowd Guacamole configuration through the API
      import_role:
        name: disable_guacamole_totp

    - name: Check if password has been changed from default
      ansible.builtin.stat:
        path: "{{ guacadmin_file_path }}"
      register: guacadmin_file

    - name: Set Guacamole admin password
      # See https://github.com/ridvanaltun/guacamole-rest-api-documentation
      # and https://github.com/apache/guacamole-manual/pull/123/files
      block:
        - name: Get API token
          ansible.builtin.uri:
            url: "{{ API_root }}/tokens"
            method: POST
            user: "{{ guac_admin_user }}"
            password: guacadmin
            force_basic_auth: yes
            body_format: form-urlencoded
          register: token

        - name: Change guacadmin password
          ansible.builtin.uri:
            url: "{{ API_root }}/session/data/{{ data_source }}/users/{{ guac_admin_user }}/password?token={{ token.json.authToken }}"
            method: PUT
            body:
              oldPassword: guacadmin
              newPassword: "{{ guac_admin_password }}"
            body_format: json
            status_code: 204

        - name: Create guacadmin file
          ansible.builtin.file:
            path: "{{ guacadmin_file_path }}"
            state: touch
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
            modification_time: preserve
            access_time: preserve
      always:
        - name: Delete API token
          ansible.builtin.uri:
            url: "{{ API_root }}/tokens/{{ token.json.authToken }}?token={{ token.json.authToken }}"
            method: DELETE
            status_code: 204
      when: not guacadmin_file.stat.exists

    - name: Configure guacamole using API
      # See https://github.com/ridvanaltun/guacamole-rest-api-documentation
      # and https://github.com/apache/guacamole-manual/pull/123/files
      block:
        - name: Get API token
          ansible.builtin.uri:
            url: "{{ API_root }}/tokens"
            method: POST
            user: "{{ guac_admin_user }}"
            password: "{{ guac_admin_password }}"
            force_basic_auth: yes
            body_format: form-urlencoded
          register: token

        - name: Check if connections for DSVM exist
          ansible.builtin.uri:
            url: "{{ API_root }}/session/data/{{ data_source }}/connections/{{ item.identifier }}?token={{ token.json.authToken }}"
            method: GET
            status_code: [200, 404]
          loop: "{{ guac_connections }}"
          register: dsvm_connections

        - name: Create connections for DSVM
          ansible.builtin.uri:
            url: "{{ API_root }}/session/data/{{ data_source }}/connections?token={{ token.json.authToken }}"
            method: POST
            body: "{{ item.item.params }}"
            body_format: json
          when: item.status == 404
          loop: "{{ dsvm_connections.results }}"

        - name: Update RDP connection for DSVM
          ansible.builtin.uri:
            url: "{{ API_root }}/session/data/{{ data_source }}/connections/{{ item.item.identifier }}?token={{ token.json.authToken }}"
            method: PUT
            body: "{{ item.item.params }}"
            body_format: json
            status_code: 204
          when: item.status == 200
          loop: "{{ dsvm_connections.results }}"
      always:
        - name: Delete API token
          ansible.builtin.uri:
            url: "{{ API_root }}/tokens/{{ token.json.authToken }}?token={{ token.json.authToken }}"
            method: DELETE
            status_code: 204

    - name: Install and enable Guacamole TOTP extension
      import_role:
        name: enable_guacamole_totp


- name: Configure DSVM
  hosts: dsvm

  tags: dsvm

  collections:
    - community.general

  vars_files:
    - vars/ansible_vars.yaml
    - vars/terraform_vars.yaml

  roles:
    - role: wait_for_cloud_init

    - role: apt_cache
      become: yes

  tasks:
    - name: Create group for shared data
      become: yes
      ansible.builtin.group:
        name: shared
        system: yes
        state: present

    - name: Configure shared data disk and directory
      block:
        - name: Partition disk
          become: yes
          community.general.parted:
            device: /dev/disk/azure/scsi1/lun0
            label: gpt
            number: 1
            state: present
          register: data_disk

        - name: Create ext4 file system
          become: yes
          community.general.filesystem:
            device: "{{ data_disk.disk.dev }}1"
            fstype: ext4

        - name: Mount shared data partition
          become: yes
          ansible.posix.mount:
            path: /shared
            state: mounted
            src: /dev/disk/azure/scsi1/lun0-part1
            fstype: ext4
            opts: defaults,nofail
            passno: "2"

        - name: Set shared directory permissions
          become: yes
          ansible.builtin.file:
            path: /shared
            state: directory
            owner: root
            group: shared
            mode: u=rwx,g=rwx,o=,g+s

        - name: Install ACL tools
          become: yes
          ansible.builtin.apt:
            name: acl
            state: present

        # Note that execute permissions are needed so that users in the shared
        # group may enter directories, create new files, and delete files
        - name: Set group permissions for new files and directories
          become: yes
          ansible.posix.acl:
            path: /shared
            etype: group
            default: yes
            permissions: rwx
            state: present
      when: shared_data_disk

    - name: Configure ingress and egress shares
      block:
        - name: Write share credentials to (unreadable) file
          become: yes
          ansible.builtin.copy:
            dest: /root/share_credentials.txt
            content: |
              username={{ share_username }}
              password={{ share_password }}
            owner: root
            group: root
            mode: 0400

        - name: Mount shares
          become: yes
          ansible.posix.mount:
            state: mounted
            path: "{{ item.path }}"
            src: "{{ item.url }}"
            fstype: cifs
            opts: "_netdev,credentials=/root/share_credentials.txt,vers=3.0,file_mode={{ item.file_mode }},dir_mode={{ item.dir_mode }},serverino"
          loop:
            - path: /data
              url: "{{ ingress_unc }}"
              file_mode: "0744"
              dir_mode: "0755"
            - path: /output
              url: "{{ egress_unc }}"
              file_mode: "0777"
              dir_mode: "0777"

    - name: Install and configure RDP
      block:
        - name: Install xrdp
          become: yes
          ansible.builtin.apt:
            name: xrdp
            state: present

        - name: Set xrdp encryption level to high
          become: yes
          ansible.builtin.lineinfile:
            path: /etc/xrdp/xrdp.ini
            state: present
            regexp: '^(.*)encrypt_level=.*$'
            line: '\1encrypt_level=high'
            backrefs: yes
            backup: yes
          notify: Restart xrdp

        - name: Write startwm.sh script
          become: yes
          ansible.builtin.copy:
            dest: /etc/xrdp/startwm.sh
            owner: root
            group: root
            mode: 0755
            content: |
              #!/bin/sh
              if [ -r /etc/profile ]; then
                  . /etc/profile
              fi

              if [ -r /etc/default/locale ]; then
                  . /etc/default/locale
                  export LANG LANGUAGE
              fi
              # Start xfce4
              startxfce4
            backup: yes
          notify: Restart xrdp

        - name: Ensure xrdp user is in the ssl-cert group
          # This is required to let xrdp access
          # `/etc/ssl/private/ssl-cert-snakeoil.key` which is symlinked to
          # `/etc/xrdp/key.pem`
          become: yes
          ansible.builtin.user:
            name: xrdp
            groups: ssl-cert
            append: yes
          notify: Restart xrdp

        - name: Start and enable xrdp service
          become: yes
          ansible.builtin.systemd:
            name: xrdp
            state: started
            enabled: yes


    - name: Install and configure desktop
      block:
        - name: Install xfce desktop
          become: yes
          ansible.builtin.apt:
            name:
              - xubuntu-desktop
              - xubuntu-core
            state: present
          async: 600
          poll: 5

        - name: Configure default terminal globally
          become: yes
          ansible.builtin.lineinfile:
            path: /etc/xdg/xfce4/helpers.rc
            regex: '^TerminalEmulator='
            line: 'TerminalEmulator=xfce4-terminal'

        - name: Disable light-locker
          # light-locker starts with an error when lightdm has not run. As we
          # connect with xrdp this is the case.
          become: yes
          ansible.builtin.lineinfile:
            path: /etc/xdg/autostart/light-locker.desktop
            line: 'Hidden=true'

        - name: Allow all users to manage colour in polkit
          # By default remote sessions are disallowed (by polkit) to manage
          # colour devices. This causes an error message when logging in.
          become: yes
          ansible.builtin.copy:
            src: 99-allow-colord.pkla
            dest: /etc/polkit-1/localauthority/50-local.d/99-allow-colord.pkla

    - name: Install apt packages
      become: yes
      ansible.builtin.apt:
        name: "{{ apt_packages }}"
        state: present
      async: 1800
      poll: 5

    - name: Install R Studio
      become: yes
      ansible.builtin.import_role:
        name: oefenweb.rstudio

    - name: Install singularity
      become: yes
      ansible.builtin.import_role:
        name: singularity

    - name: Install snaps
      become: yes
      community.general.snap:
        name: "{{ item.name }}"
        classic: "{{ item.classic | default(omit) }}"
        state: present
      loop: "{{ snap_packages }}"
      async: 1800
      poll: 1

    - name: Set default Julia depot directory
      become: yes
      ansible.builtin.lineinfile:
        path: /etc/bash.bashrc
        regexp: '^export JULIA_DEPOT_PATH='
        line: 'export JULIA_DEPOT_PATH="/shared/julia_depot:$JULIA_DEPOT_PATH"'
      when: shared_data_disk

    - name: Create desktop directory in /etc/skel
      become: yes
      ansible.builtin.file:
        path: /etc/skel/Desktop
        state: directory
        mode: 0755

    - name: Create default symbolic links to data directories in users' homes and desktops
      become: yes
      ansible.builtin.file:
        path: "/etc/skel/{{ item.path }}"
        src: "{{ item.src }}"
        state: link
      loop:
        - path: shared
          src: /shared
        - path: Desktop/shared
          src: /shared
        - path: data
          src: /data
        - path: Desktop/data
          src: /data
        - path: output
          src: /output
        - path: Desktop/output
          src: /output

  handlers:
    - name: Restart xrdp
      become: yes
      ansible.builtin.systemd:
        name: xrdp
        state: restarted
