from typing import List, Optional
from .base_command import BaseCommand as BaseCommand
from _typeshed import Incomplete
from cleo.io import ConsoleIO as ConsoleIO
from cleo.parser import Parser as Parser
from clikit.api.args import Args
from clikit.api.command import Command as CliKitCommand
from clikit.api.io import IO as IO


class Command(BaseCommand):
    signature: Incomplete
    validation: Incomplete
    TABLE_STYLES: Incomplete
    def __init__(self) -> None: ...
    @property
    def io(self) -> ConsoleIO: ...
    def wrap_handle(
        self, args: Args, io: IO, command: CliKitCommand
    ) -> Optional[int]: ...
    def handle(self) -> Optional[int]: ...
    def call(self, name: str, args: Optional[str] = ...) -> int: ...
    def call_silent(self, name: str, args: Optional[str] = ...) -> int: ...
    def argument(self, key: Incomplete | None = ...) -> bool | str | List[str] | None: ...
    def option(self, key: Incomplete | None = ...) -> bool | str | List[str] | None: ...
    def confirm(self, question, default: bool = ..., true_answer_regex: str = ...): ...
    def ask(self, question, default: Incomplete | None = ...): ...
    def secret(self, question): ...
    def choice(
        self,
        question,
        choices,
        default: Incomplete | None = ...,
        attempts: Incomplete | None = ...,
        multiple: bool = ...,
    ): ...
    def create_question(self, question, type: Incomplete | None = ..., **kwargs): ...
    def table(
        self,
        header: Incomplete | None = ...,
        rows: Incomplete | None = ...,
        style: Incomplete | None = ...,
    ): ...
    def render_table(self, headers, rows, style: Incomplete | None = ...) -> None: ...
    def write(self, text, style: Incomplete | None = ...) -> None: ...
    def line(
        self, text, style: Incomplete | None = ..., verbosity: Incomplete | None = ...
    ) -> None: ...
    def line_error(
        self, text, style: Incomplete | None = ..., verbosity: Incomplete | None = ...
    ) -> None: ...
    def info(self, text) -> None: ...
    def comment(self, text) -> None: ...
    def question(self, text) -> None: ...
    def progress_bar(self, max: int = ...): ...
    def progress_indicator(
        self,
        fmt: Incomplete | None = ...,
        interval: int = ...,
        values: Incomplete | None = ...,
    ): ...
    def spin(
        self,
        start_message,
        end_message,
        fmt: Incomplete | None = ...,
        interval: int = ...,
        values: Incomplete | None = ...,
    ): ...
    def add_style(
        self,
        name,
        fg: Incomplete | None = ...,
        bg: Incomplete | None = ...,
        options: Incomplete | None = ...,
    ) -> None: ...
    def overwrite(self, text, size: Incomplete | None = ...) -> None: ...
