---
os: linux
dist: focal

git:
  depth: false

language: shell

jobs:
  include:
    - name: Lint Ansible
      addons:
        apt:
          packages:
            ansible-lint
      script: ansible-lint

    - name: Lint JSON
      language: node_js
      node_js: node
      before_script: npm install -g jsonlint mustache
      script: |
        echo "{}" > mustache_config.json
        find . -name "*.json" | xargs -n 1 mustache mustache_config.json | jsonlint --quiet --compact

    - name: Lint Markdown
      language: ruby
      rvm: ruby-head
      install: gem install mdl
      script: mdl --style .mdlstyle.rb *.md docs/

    - name: Lint PowerShell
      before_script:
        - sudo snap install powershell --classic
        - pwsh -c "Install-Module -Name PSScriptAnalyzer -Force"
      script: pwsh -c "Import-Module PSScriptAnalyzer; Invoke-ScriptAnalyzer -Path . -Settings .PSScriptAnalyzerSettings.psd1 -Recurse -EnableExit -ReportSummary"

    - name: Lint Python
      language: python
      python: 3.9
      before_script: pip install flake8
      script: flake8 . --statistics --count

    - name: Lint shell
      before_script: sudo apt-get install -y shellcheck
      script: find . -name "*.sh" | xargs shellcheck --format gcc --severity error

    - name: Lint YAML
      language: python
      python: 3.9
      before_script: pip install yamllint
      script: yamllint .

    - name: Test Powershell
      before_script:
        - sudo snap install powershell --classic
        - pwsh -c "Install-Module -Name Pester -Force; Install-Module -Name PSScriptAnalyzer -Force; Install-Module Az -Force"
      script: pwsh -c './tests/Run_Pester_Tests.ps1'

    - name: Check for dead links in Markdown
      language: node_js
      node_js: node
      before_script: npm install -g markdown-link-check
      script: find . -name "*.md" | xargs -n 1 markdown-link-check -p -c .markdownlinkcheck.json
      env: ALLOWED_FAILURE=true

    - name: Build documentation
      language: node_js
      node_js: node
      before_script:
        - BACKUPDIR=$(mktemp -d)
        - OUTPUTDIR=$(mktemp -d)
        # Node dependencies
        - npm install -g pretty-markdown-pdf
        # Python and dependencies
        - sudo apt-get update
        - sudo apt-get -y install git python3 python3-pip
        - pip install -r docs/requirements.txt
      script:
        - ./docs/build_config_backup.sh -b -d ${BACKUPDIR} # save config to BACKUPDIR
        - ./docs/build_docs_instance.sh -d ${OUTPUTDIR} -n latest # build 'latest'
        - |
          for tag in $(git tag); do
            echo -e "\033[1mGenerating documention for ${tag} \033[0m"
            git checkout $tag
            cp ${BACKUPDIR}/build_config_backup.sh docs/
            cp ${BACKUPDIR}/build_docs_instance.sh docs/
            if [ ! -e "docs/conf.py" ]; then
              echo -e "\033[1mPreparing pre-Sphinx tag: ${tag}...\033[0m"
              # Remove the software request form which contains invalid markdown in old releases
              rm docs/how_to_guides/general/software-package-request-form.md 2>/dev/null;
              rm docs/software-package-request-form.md 2>/dev/null;
            fi
            ./docs/build_config_backup.sh -l -d ${BACKUPDIR} # always reload config to get a consistent Sphinx style
            ./docs/build_docs_instance.sh -d ${OUTPUTDIR} -n ${tag} # build tag
          done
        - cp ${BACKUPDIR}/meta/index.html ${OUTPUTDIR}/index.html
        - touch ${OUTPUTDIR}/.nojekyll
        - mv $OUTPUTDIR ${TRAVIS_BUILD_DIR}/output
        - ls -alh ${TRAVIS_BUILD_DIR}/output
        - ls -alh ${TRAVIS_BUILD_DIR}/output/latest

      # To change the deployment key you will need to do the following:
      # - generate a new RSA key pair
      # - add the PUBLIC key as a deployment key on the GitHub repo with read/write permissions
      # - encrypt the PRIVATE key as follows:
      #   - travis login --pro                        # login to Travis on the command line: you may have to install the Travis gem
      #   - travis encrypt-file <path to private key> # this will create <private key>.enc in your working directory. Note the names of the encryption keys
      #   - cat <private key>.enc | base64            # this will generate a base64 version of the encrypted private key
      # - add the base64, encrypted private key as a Travis environment variable called GITHUB_DEPLOY_KEY_ENCRYPTED_BASE64
      # - edit the openssl line below to use the new `encrypted_<name>_key` and `encrypted_<name>_iv` environment variables generated above
      # - remove the previous `encrypted_<name>_key` and `encrypted_<name>_iv` environment variables from Travis

      before_deploy:
        - echo $GITHUB_DEPLOY_KEY_ENCRYPTED_BASE64 | base64 --decode > safehaven_rw_rsa4096.enc
        - openssl aes-256-cbc -K $encrypted_d794587a8a8a_key -iv $encrypted_d794587a8a8a_iv -in safehaven_rw_rsa4096.enc -out safehaven_rw_rsa4096 -d
        - pwd
        - ls -alh
      deploy:
        cleanup: false
        edge: true # opt in to dpl v2
        local_dir: ${TRAVIS_BUILD_DIR}/output
        keep_history: false
        provider: pages:git
        deploy_key: safehaven_rw_rsa4096
        strategy: git
        target_branch: autodocs
        token: $GITHUB_TOKEN
        on:
          branch: 1004-automated-documentation

  allow_failures:
    - env: ALLOWED_FAILURE=true
