---
os: linux
dist: focal

git:
  depth: false

language: shell

jobs:
  include:
    - name: Lint Ansible
      addons:
        apt:
          packages:
            ansible-lint
      script: ansible-lint

    - name: Lint JSON
      language: node_js
      node_js: node
      before_script: npm install -g jsonlint mustache
      script: |
        echo "{}" > mustache_config.json
        find . -name "*.json" | xargs -n 1 mustache mustache_config.json | jsonlint --quiet --compact

    - name: Lint Markdown
      language: ruby
      rvm: ruby-head
      install: gem install mdl
      script: mdl --style .mdlstyle.rb *.md docs/

    - name: Lint PowerShell
      before_script:
        - sudo snap install powershell --classic
        - pwsh -c "Install-Module -Name PSScriptAnalyzer -Force"
      script: pwsh -c "Import-Module PSScriptAnalyzer; Invoke-ScriptAnalyzer -Path . -Settings .PSScriptAnalyzerSettings.psd1 -Recurse -EnableExit -ReportSummary"

    - name: Lint Python
      language: python
      python: 3.9
      before_script: pip install flake8
      script: flake8 . --statistics --count

    - name: Lint shell
      before_script: sudo apt-get install -y shellcheck
      script: find . -name "*.sh" | xargs shellcheck --format gcc --severity error

    - name: Lint YAML
      language: python
      python: 3.9
      before_script: pip install yamllint
      script: yamllint .

    - name: Test Powershell
      before_script:
        - sudo snap install powershell --classic
        - pwsh -c "Install-Module -Name Pester -Force; Install-Module -Name PSScriptAnalyzer -Force; Install-Module Az -Force"
      script: pwsh -c './tests/Run_Pester_Tests.ps1'

    - name: Check for dead links in Markdown
      language: node_js
      node_js: node
      before_script: npm install -g markdown-link-check
      script: find . -name "*.md" | xargs -n 1 markdown-link-check -p -c .markdownlinkcheck.json
      env: ALLOWED_FAILURE=true

    - name: Build documentation
      language: node_js
      node_js: node
      before_script:
        - BACKUPDIR=$(mktemp -d)
        - OUTPUTDIR=$(mktemp -d)
        # Node dependencies
        - npm install -g pretty-markdown-pdf
        # Python and dependencies
        - sudo apt-get update
        - sudo apt-get -y install git python3 python3-pip
        - pip install -r docs/requirements.txt
      script:
        - ./docs/config_backup.sh -b -d ${BACKUPDIR} # save config to BACKUPDIR
        - make -C docs clean
        - make -C docs emojify
        - make -C docs html pdf
        - mv docs/_build/html ${OUTPUTDIR}/latest
        - git reset --hard HEAD
        - git clean -fd
        - |
          for tag in $(git tag); do
            echo -e "\033[1mGenerating documention for ${tag} \033[0m"
            git checkout $tag
            cp ${BACKUPDIR}/config_backup.sh docs/
            if [ ! -e "docs/conf.py" ]; then
              echo -e "\033[1mAttempting to generate documentation from tag ${tag} that is unware of Sphinx \033[0m"
              # Remove the software request form which contains invalid markdown in old releases
              rm docs/how_to_guides/general/software-package-request-form.md 2>/dev/null;
              rm docs/software-package-request-form.md 2>/dev/null;
            fi
            ./docs/config_backup.sh -l -d ${BACKUPDIR} # always reload config to get a consistent Sphinx style
            # Build the HTML docs
            make -C docs clean
            make -C docs emojify
            make -C docs html pdf
            # Store in the output directory and reset
            mv docs/_build/html ${OUTPUTDIR}/${tag}
            git reset --hard HEAD
            git clean -fd
          done
        - cp ${BACKUPDIR}/meta/index.html ${OUTPUTDIR}/index.html
        - touch ${OUTPUTDIR}/.nojekyll
        - mv $OUTPUTDIR ${TRAVIS_BUILD_DIR}/output
        - ls -alh ${TRAVIS_BUILD_DIR}/output
        - ls -alh ${TRAVIS_BUILD_DIR}/output/latest
      deploy:
        keep_history: false
        local_dir: ${TRAVIS_BUILD_DIR}/output
        provider: pages
        skip_cleanup: true
        strategy: git
        target_branch: autodocs
        token: $GITHUB_TOKEN
        on:
          branch: develop

  allow_failures:
    - env: ALLOWED_FAILURE=true
