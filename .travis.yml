---
os: linux
dist: focal

language: shell

# Remove clone depth limit to ensure we have access to all tags from repo
git:
  depth: false

# timeout uploading cache after 6 minutes (360 seconds)
cache:
  timeout: 360
  directories:
    # Linux Powershell module installation location
    - $HOME/.local/share/powershell/Modules/

jobs:
  include:
    - name: Test Powershell
      before_script:
        - sudo snap install powershell --classic
        - pwsh -c "Set-PSRepository -Name PSGallery -InstallationPolicy Trusted"
        - pwsh deployment/CheckRequirements.ps1 -InstallMissing -IncludeDev
      script: pwsh -c "./tests/Run_Pester_Tests.ps1"

    - name: Lint HTML documentation
      language: ruby
      rvm: 3.0.3
      before_script: |
        gem install html-proofer -v 3.19.0
        pip install -r docs/build/requirements.txt
      script: |
        DOCS_DIR=$(mktemp -d)
        # Make docs for all supported versions
        python ./docs/build/build_all_supported_versions.py --output-dir ${DOCS_DIR}
        export LC_CTYPE="C.UTF-8"
        htmlproofer ${DOCS_DIR}/develop \
          --allow-hash-href \
          --check-favicon \
          --check-html \
          --check-img-http \
          --enforce-https \
          --file-ignore "/_static/" \
          --http-status-ignore "403,429" \
          --url-swap "^\/data-safe-haven:/.." \
          --url-ignore "/github.com\/alan-turing-institute\/data-safe-haven/,/github.com\/alan-turing-institute\/data-classification-app/,/turing.ac.uk\//"

    - name: Lint JSON files
      language: node_js
      node_js: node
      before_script: npm install -g jsonlint mustache
      script: |
        echo "{}" > mustache_config.json
        find . -name "*.json" | xargs -n 1 mustache mustache_config.json | jsonlint --quiet --compact

    - name: Lint Markdown files
      language: ruby
      rvm: ruby-head
      install: gem install mdl
      script: mdl --style .mdlstyle.rb .

    - name: Lint YAML files
      language: node_js
      python: node
      before_script: |
        npm install -g mustache
        pip install yamllint
      script: |
        echo '{"array": ["dummy"], "variable": "dummy"}' > .mustache_config.json
        for yamlfile in $(find . -name "*.yml" -o -name "*.yaml"); do
          sed "s|{{\([/#]\)[^}]*}}|{{\1array}}|g" $yamlfile > expanded.yaml  # replace mustache arrays
          sed -i "s|{{[^#/].\{1,\}}}|{{variable}}|g" expanded.yaml           # replace mustache variables
          mustache .mustache_config.json expanded.yaml | yamllint -s -       # perform mustache expansion and lint from stdin
          test $? -eq 0 && echo "✅ YAML linting succeeded for $yamlfile" || echo "❌ YAML linting failed for $yamlfile"
        done
        rm .mustache_config.json expanded.yaml

    - name: Lint Ansible scripts
      addons:
        apt:
          packages:
            ansible-lint
      script: ansible-lint

    - name: Lint PowerShell scripts
      before_script:
        - sudo snap install powershell --classic
        - pwsh -c "Install-Module -Force -Verbose -Name PSScriptAnalyzer"
      script: pwsh -c "Import-Module PSScriptAnalyzer; Invoke-ScriptAnalyzer -Path . -Settings .PSScriptAnalyzerSettings.psd1 -Recurse -EnableExit -ReportSummary"

    - name: Lint Python scripts
      language: python
      python: 3.9
      install: pip install flake8
      script: flake8 . --statistics --count

    - name: Lint shell scripts
      addons:
        apt:
          packages:
            shellcheck
      script: find . -name "*.sh" | xargs shellcheck --format gcc --severity error

    - name: Check Markdown for dead links
      language: node_js
      node_js: node
      before_script: npm install -g markdown-link-check
      script: find . -name "*.md" | xargs -n 1 markdown-link-check -p -c .markdownlinkcheck.json
      env: ALLOWED_FAILURE=true

  allow_failures:
    - env: ALLOWED_FAILURE=true
