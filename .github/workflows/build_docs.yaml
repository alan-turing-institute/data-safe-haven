---
name: Build documentation

# Run workflow on pushes to matching branches
on:  # yamllint disable-line rule:truthy
  push:
    branches: [develop]

# checkout needs 'contents:read'
# deploy needs 'contents:write'
permissions:
  contents: write

jobs:
  build_docs:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y git
          pip install -r docs/build/requirements.txt
          ./docs/build/patches/patch_rinohtype.sh
      - name: Create common directories
        shell: bash
        run: |
          echo "BACKUPDIR=$(mktemp -d)" >> $GITHUB_ENV
          echo "OUTPUTDIR=$(mktemp -d)" >> $GITHUB_ENV
      - name: Save Sphinx config to BACKUPDIR
        shell: bash
        run: |
          ./docs/build/build_config_backup.sh -b -d ${{env.BACKUPDIR}}
      - name: Find latest stable release
        shell: bash
        run: |
          LATEST_STABLE=$(git tag | grep -v beta | sort | tail -n 1)
          echo "Setting default documentation version to $LATEST_STABLE"
          sed "s|{{latest_stable}}|$LATEST_STABLE|g" docs/build/meta/index.html > ${{env.OUTPUTDIR}}/index.html
          touch ${{env.OUTPUTDIR}}/.nojekyll
          echo "LATEST_STABLE=$LATEST_STABLE" >> $GITHUB_ENV
      - name: Build documentation from development branch
        shell: bash
        run: |
          ./docs/build/build_docs_instance.sh -p -d ${{env.OUTPUTDIR}} -n develop
      - name: Build documentation from tagged releases
        shell: bash
        run: |
          git config --global advice.detachedHead false
          for tag in $(git tag); do
            echo -e "\n\n✨ Generating documention for ${tag} ✨"
            git checkout $tag
            # Reload Sphinx config from BACKUPDIR to get a consistent HTML style
            ${{env.BACKUPDIR}}/build/build_config_backup.sh -l -d ${{env.BACKUPDIR}}
            # Build HTML output
            ./docs/build/build_docs_instance.sh -d ${{env.OUTPUTDIR}} -n ${tag}
            echo "✨ Finished working on ${tag} ✨"
          done
      - name: Check that all tags have built
        shell: bash
        run: |
          FAILED=0
          for tag in $(git tag); do
            if [ -e "${{env.OUTPUTDIR}}/${tag}/index.html" ]; then
              echo "✅ $tag documentation built successfully"
            else
              echo "❌ $tag documentation failed to build!"
              FAILED=1
            fi
          done
          ls -alh ${{env.OUTPUTDIR}}/*
          if [ "$FAILED" = "1" ]; then exit 1; fi
      - name: Deploy documentation to GitHub Pages
        if: ${{ !env.ACT }}
        uses: JamesIves/github-pages-deploy-action@60b5e92fe9331f02fa1cdad4d19ddf875be0361c  # This commit corresponds to tag (4.1.6)
        with:
          branch: autodocs                     # The branch the action should deploy to.
          folder: ${{env.OUTPUTDIR}}           # The folder the action should deploy.
          git-config-name: Deployment Bot      # Name of the committer
          git-config-email: deploy@github.com  # Email of the committer
          single-commit: true                  # Only keep one commit on the branch
