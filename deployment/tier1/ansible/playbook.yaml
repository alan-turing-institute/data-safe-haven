---
- hosts: tier1

  vars_files:
    - users.yaml

  tasks:
    - name: Wait for cloud init to finish
      wait_for:
        path: /var/lib/cloud/instance/boot-finished

    - name: Enable public key authentication
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'
      notify: Restart sshd

    - name: Disable password login
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
      notify: Restart sshd

    - name: Disable root login
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'
      notify: Restart sshd

    - name: Create users
      become: yes
      user:
        name: "{{ item.username }}"
        comment: "{{ item.name }}"
        state: present
      loop: "{{ users }}"

    - name: Add users public keys
      become: yes
      authorized_key:
        user: "{{ item.username }}"
        key: "{{ lookup('file', item.keyfile) }}"
        state: present
      loop: "{{ users }}"

    - name: Add admin users to the admin group
      become: yes
      user:
        name: "{{ item.username }}"
        append: true
        groups: admin
      loop: "{{ users }}"
      when: item.admin

    - name: Allow users in the admin group to sudo without a password
      become: yes
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%ADMIN ALL='
        line: '%ADMIN ALL=(ALL) NOPASSWD: ALL'
        validate: /usr/sbin/visudo -cf %s

    - name: Update package cache
      become: yes
      apt:
        update_cache: yes

    - name: Install PAM OATH packages for TOTP
      become: yes
      apt:
        name:
          - libpam-oath
          - oathtool
        state: present

    - name: Enable PAM in sshd configuration
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?UsePAM'
        line: 'UsePAM yes'
      notify: Restart sshd

    - name: Enable challenge response authentication
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?ChallengeResponseAuthentication'
        line: 'ChallengeResponseAuthentication yes'
      notify: Restart sshd

    - name: Look for existing TOTP seeds
      become: yes
      shell: "grep {{ item.username }} /etc/users.oath"
      loop: "{{ users }}"
      register: totp_users
      ignore_errors: yes
      changed_when: no

    # - debug:
    #     var: totp_users.results

    - name: Create TOTP seeds for each user without one
      become: yes
      lineinfile:
        path: /etc/users.oath
        line: "HOTP/T30/6 {{ item.item.username }} - {{ lookup ('password', '/dev/null chars=hexdigits length=30') }}"
        create: yes
        owner: root
        mode: 0600
      loop: "{{ totp_users.results }}"
      when: item.failed

    - name: Enable OATH for ssh login in PAM
      become: yes
      lineinfile:
        path: /etc/pam.d/sshd
        state: present
        # line: 'auth    sufficient pam_oath.so usersfile=/etc/users.oath window=30 digits=6'
        line: 'auth [success=done new_authtok_reqd=done default=die] pam_oath.so usersfile=/etc/users.oath window=30 digits=6'
        insertbefore: BOF

    - name: Require OATH even when a valid key is provided
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?AuthenticationMethods"
        line: 'AuthenticationMethods publickey,keyboard-interactive:pam'
      notify: Restart sshd

    - name: Allow admin account to login without TOTP
      become: yes
      blockinfile:
        path: /etc/ssh/sshd_config
        block: |
          Match User tier1_admin
              AuthenticationMethods publickey

    - name: Install docker
      become: yes
      apt:
        name: docker.io
        state: present

    - name: Install docker-compose
      become: yes
      apt:
        name: docker-compose
        state: present

    - name: Start and enable docker service
      become: yes
      systemd:
        name: docker.service
        enabled: yes
        state: started

    - name: Add admin user to docker group
      become: yes
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - meta: reset_connection

    - name: Pull CoCalc docker image
      docker_image:
        name: sagemathinc/cocalc
        source: pull

    - name: Run CoCalc with docker-compose
      docker_compose:
        project_name: cocalc
        definition:
          version: '2'
          services:
            app:
              image: sagemathinc/cocalc
              ports:
                - 127.0.0.1:443:443
              volumes:
                - /datadrive:/projects
              restart: always
      register: output

    - debug:
        var: output

    - name: Assert that the CoCalc container is running
      assert:
        that:
          - "app.cocalc_app_1.state.running"

    - name: Fetch TOTP hashes
      become: yes
      shell: sed -E "s/HOTP\/T30\/6\s+([a-z]+)\s+-\s+([0-9a-zA-Z]{30}).*/\1 \2/g" /etc/users.oath
      args:
        warn: false
      register: totp_hashes
      changed_when: no

    - debug:
        var: totp_hashes.stdout_lines

  handlers:
    - name: Restart sshd
      become: yes
      systemd:
        name: sshd.service
        state: restarted
