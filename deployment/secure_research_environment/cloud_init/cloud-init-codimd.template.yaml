#cloud-config

# Create files
write_files:
  - path: "/opt/codimd/docker-compose.yml"
    permissions: "0400"
    content: |
      version: '3'
      services:
        codimd:
          depends_on:
            - database
          image: nabo.codimd.dev/hackmdio/hackmd:<docker-codimd-version>
          environment:
            - CMD_ALLOW_ANONYMOUS=false
            - CMD_ALLOW_FREEURL=true
            - CMD_DB_URL=postgres://codimd:<codimd-postgres-password>@database:5432/codimd
            - CMD_DOMAIN=<codimd-fqdn>
            - CMD_EMAIL=false
            - CMD_IMAGE_UPLOAD_TYPE=filesystem
            - CMD_LDAP_BINDCREDENTIALS=<codimd-bind-creds>
            - CMD_LDAP_BINDDN=<codimd-bind-dn>
            - CMD_LDAP_PROVIDERNAME=<codimd-ldap-netbios>
            - CMD_LDAP_SEARCHBASE=<codimd-ldap-base>
            - CMD_LDAP_SEARCHFILTER=<codimd-user-filter>
            - CMD_LDAP_URL=<codimd-ldap-url>
            - CMD_LDAP_USERIDFIELD=sAMAccountName
            - CMD_USECDN=false
          ports:
            # Map port 80 (external) to port 3000 (internal)
            - 80:3000
          networks:
            dockernet:
          restart: always
          volumes:
            - /data/codimd:/codimd/public/uploads
        database:
          image: postgres:<docker-postgres-version>
          environment:
            - POSTGRES_USER=codimd
            - POSTGRES_PASSWORD=<codimd-postgres-password>
            - POSTGRES_DB=codimd
          networks:
            dockernet:
          restart: always
          volumes:
            - /data/postgresql:/var/lib/postgresql/data
      networks:
        dockernet:

# Set locale
locale: en_GB.UTF-8

# Configure apt repositories
apt:
  preserve_sources_list: true
  sources:
    gitlab.list:
      source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88 # Docker Release (CE deb) <docker@docker.com>

# Install necessary apt packages
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - docker-ce
  - docker-compose
  - ldap-utils
  - software-properties-common
package_update: true
package_upgrade: true

# We know that exactly one data disk will be attached to this VM and it will be attached as lun1
disk_setup:
  /dev/disk/azure/scsi1/lun1:
    table_type: gpt
    layout: True
    overwrite: True
fs_setup:
  - device: /dev/disk/azure/scsi1/lun1
    partition: 1
    filesystem: ext4
mounts:
  - [/dev/disk/azure/scsi1/lun1-part1, /data, ext4, "defaults,nofail"]

# Set hostname
fqdn: <codimd-fqdn>
hostname: <codimd-fqdn>

# Add the SRE admin (default) and codimddaemon users
users:
  - default
  - name: codimddaemon
    lock_passwd: True # Lock the password to disable password login
    sudo: False       # This user will not have sudo privileges

# Set the NTP server and timezone
# By default we use Google's NTP servers which are incompatible with other servers due to leap-second smearing
ntp:
  pools:
    - <ntp-server>
timezone: <timezone>

# Run other commands
runcmd:
  # Check server settings
  - echo ">=== Hostname ===<"
  - hostnamectl
  - echo ">=== Date/time ===<"
  - timedatectl
  # Configuring attached disks
  - echo ">=== Configuring attached disks... ===<"
  - mkdir -p /data/postgresql
  - mkdir -p /data/codimd
  - chown -R 1500:1500 /data/codimd # allow the 'codimd' user inside the docker container to access this volume
  - ls -alh /data/
  # Ensure that Docker is running
  - echo "Current Docker status..."
  - systemctl start docker
  - systemctl enable docker
  - systemctl status docker
  # Set up the codimddaemon user
  - echo "Configuring codimddaemon user..."
  - groupadd docker
  - usermod -aG docker codimddaemon
  - newgrp docker
  - chown -R codimddaemon:codimddaemon /opt/codimd
  - ls -alh /opt/codimd
  # Deploy CodiMD using Docker
  - echo "Deploying CodiMD with Docker..."
  - su codimddaemon -c "docker-compose -f /opt/codimd/docker-compose.yml up -d"
  # Wait for deployment to finish
  - |
    while true; do
      CODIMD_STATUS=$(docker-compose -f /opt/codimd/docker-compose.yml logs codimd | grep "HTTP Server listening at 0.0.0.0:3000")
      POSTGRES_STATUS=$(docker-compose -f /opt/codimd/docker-compose.yml logs database | grep "ready to accept connections")
      if [ "$CODIMD_STATUS" != "" ] && [ "$POSTGRES_STATUS" != "" ]; then
        break
      fi
      sleep 5
    done
  - docker-compose -f /opt/codimd/docker-compose.yml logs
  # Print a final message
  - echo "Deploying CodiMD with Docker is complete:"
  - docker-compose -f /opt/codimd/docker-compose.yml ps

# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: True
