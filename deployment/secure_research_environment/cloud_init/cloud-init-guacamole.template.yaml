#cloud-config

# Update package database on first boot (ie. run apt-get update)
package_update: true

# Upgrade installed packages on first boot (ie. run apt-get upgrade)
package_upgrade: true


apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Add repositories
  sources:
    docker.list:
      source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
      keyid: 8D81803C0EBFCD88

write_files:
  - path: "/src/guacamole/pg-ldap-sync.yaml"
    owner: root:root
    permissions: "0700"
    content: |
      # With this sample config the distinction between LDAP-synchronized
      # groups/users from is done by the membership to ldap_user and
      # ldap_group. These two roles has to be defined manally before
      # pg_ldap_sync can run.
      # Connection parameters to LDAP server
      # see also: http://net-ldap.rubyforge.org/Net/LDAP.html#method-c-new
      # TODO: get SSL working on port 636
      ldap_connection:
        host: <shm-dc-ip-address>
        #port: 636
        port: 389
        auth:
          method: :simple
          username: <ldap-search-bind-dn>
          password: <ldap-search-bind-password>
        #encryption:
        #  method: :simple_tls
      # Search parameters for LDAP users which should be synchronized
      ldap_users:
        base: <ldap-users-base-dn>
        # LDAP filter defining which LDAP users should be synchronized
        filter: <ldap-user-filter>
        # this attribute is used as PG role name
        name_attribute: sAMAccountName
        # lowercase name for use as PG role name
        lowercase_name: false
      # Search parameters for LDAP groups which should be synchronized
      ldap_groups:
        base: <ldap-groups-base-dn>
        # LDAP filter defining which LDAP groups should be synchronized
        filter: <ldap-group-filter>
        # this attribute is used as PG role name
        name_attribute: cn
        # lowercase name for use as PG role name
        lowercase_name: false
        # this attribute must reference to all member DN's of the given group
        member_attribute: member
      # Connection parameters to PostgreSQL server
      # see also: http://rubydoc.info/gems/pg/PG/Connection#initialize-instance_method
      pg_connection:
        host: localhost
        dbname: guacamole
        user: guacamole
        password: <postgres-password>
      pg_users:
        # Filter for identifying LDAP generated users in the database.
        # It's the WHERE-condition to "SELECT rolname, oid FROM pg_roles"
        filter: oid IN (SELECT pam.member FROM pg_auth_members pam JOIN pg_roles pr ON pr.oid=pam.roleid WHERE pr.rolname='ldap_users')
        # Options for CREATE RULE statements
        create_options: LOGIN IN ROLE ldap_users
      pg_groups:
        # Filter for identifying LDAP generated groups in the database.
        # It's the WHERE-condition to "SELECT rolname, oid FROM pg_roles"
        filter: oid IN (SELECT pam.member FROM pg_auth_members pam JOIN pg_roles pr ON pr.oid=pam.roleid WHERE pr.rolname='ldap_groups')
        # Options for CREATE RULE statements
        create_options: NOLOGIN IN ROLE ldap_groups
        grant_options:

  # taken from boschkundendienst/guacamole-docker-compose
  - path: "/src/guacamole/docker-compose.yml"
    content: |
      version: '3.4'
      networks:
        guacnetwork_compose:
          driver: bridge
      services:
        postgres:
          container_name: postgres_guacamole_compose
          image: postgres:12.2
          networks:
            guacnetwork_compose:
          environment:
            PGDATA: /var/lib/postgresql/data/guacamole
            POSTGRES_DB: guacamole
            POSTGRES_USER: guacamole
            POSTGRES_PASSWORD: <postgres-password>
          ports:
          - 5432:5432
          restart: always
          volumes:
          - /src/guacamole/:/docker-entrypoint-initdb.d:ro
          - /data:/var/lib/postgresql/data:rw

        guacd:
          container_name: guacd_compose
          image: guacamole/guacd:1.1.0
          networks:
            guacnetwork_compose:
          restart: always
          environment:
            GUACD_LOG_LEVEL: debug

        guacamole:
          container_name: guacamole_compose
          image: guacamole/guacamole:1.1.0
          networks:
            guacnetwork_compose:
          depends_on:
          - guacd
          - postgres
          environment:
            GUACD_HOSTNAME: guacd
            LOGBACK_LEVEL: debug
            LDAP_HOSTNAME: <ldap-hostname>
            LDAP_PORT: <ldap-port>
            LDAP_USER_BASE_DN: <ldap-user-base-dn>
            LDAP_USERNAME_ATTRIBUTE: sAMAccountName
            LDAP_GROUP_BASE_DN: <ldap-group-base-dn>
            LDAP_SEARCH_BIND_DN: <ldap-search-bind-dn>
            LDAP_SEARCH_BIND_PASSWORD: <ldap-search-bind-password>
            POSTGRES_HOSTNAME: postgres
            POSTGRES_DATABASE: guacamole
            POSTGRES_USER: guacamole
            POSTGRES_PASSWORD: <postgres-password>
            DUO_API_HOSTNAME: <duo-api-hostname>
            DUO_INTEGRATION_KEY: <duo-integration-key>
            DUO_SECRET_KEY: <duo-secret-key>
            DUO_APPLICATION_KEY: <duo-application-key>
          ports:
          - 8080/tcp
          restart: always

        nginx:
          container_name: nginx_guacamole_compose
          image: nginx
          networks:
            guacnetwork_compose:
          volumes:
          - /nginx/ssl/self.cert:/etc/nginx/ssl/self.cert:ro
          - /nginx/ssl/self-ssl.key:/etc/nginx/ssl/self-ssl.key:ro
          - /nginx/nginx.conf:/etc/nginx/nginx.conf:ro
          - /nginx/guacamole.template:/etc/nginx/conf.d/default.conf:ro
          ports:
          - 8443:443
          links:
          - guacamole
          # run nginx
          command: /bin/bash -c "nginx -g 'daemon off;'"
          restart: always
  - path: "/nginx/nginx.conf"
    content: |
      ### AAA
      user  nginx;
      worker_processes  1;

      error_log  /var/log/nginx/error.log warn;
      pid        /var/run/nginx.pid;


      events {
          worker_connections  1024;
      }


      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;

          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';

          access_log  /var/log/nginx/access.log  main;

          sendfile        on;
          #tcp_nopush     on;

          keepalive_timeout  65;

          #gzip  on;

          include /etc/nginx/conf.d/*.conf;
      }
  - path: "/nginx/guacamole.template"
    content: |
      server {
        listen       443 ssl http2;
        server_name  localhost;
        ssl_certificate /etc/nginx/ssl/self.cert;
        ssl_certificate_key /etc/nginx/ssl/self-ssl.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling off;
        ssl_stapling_verify off;
        location / {
          proxy_pass http://guacamole:8080/guacamole/;
          proxy_buffering off;
          proxy_http_version 1.1;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $http_connection;
          proxy_cookie_path /guacamole/ /;
          access_log off;
          client_max_body_size 4096m;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
      }
  - path: "/src/guacamole/custom.sql"
    content: |
      INSERT INTO guacamole_entity (name, type) VALUES ('<ldap-group-researchers>', 'USER_GROUP');
      INSERT INTO guacamole_user_group (entity_id)
        SELECT entity_id FROM guacamole_entity WHERE name = '<ldap-group-researchers>' AND guacamole_entity.type = 'USER_GROUP';


# SELECT * FROM guacamole_entity WHERE guacamole_entity.type = 'USER_GROUP'
packages:
  - docker-ce
  - docker-compose
  - gcc
  - libpq-dev
  - make
  - ruby
  - ruby-dev

runcmd:
  # Suppress apt prompts and warning messages
  - DEBIAN_FRONTEND=noninteractive
  - export DEBIAN_FRONTEND

  # Create SSL certificates
  # echo "You can use your own certificates by placing the private key in nginx/ssl/self-ssl.key and the cert in nginx/ssl/self.cert"
  - echo "Creating SSL certificates"
  - mkdir -p /nginx/ssl
  - openssl req -nodes -newkey rsa:2048 -new -x509 -keyout /nginx/ssl/self-ssl.key -out /nginx/ssl/self.cert -subj '/C=DE/ST=BY/L=Hintertupfing/O=Dorfwirt/OU=Theke/CN=www.example.com/emailAddress=docker@example.com'

  # Clean up installation - getting to this point takes approximately 30 mins
  - echo ">=== Cleaning up apt-get packages... ===<"
  - apt-get -y autoremove
  - apt-get clean

  # Setup Guacamole
  - echo ">=== Starting Guacamole... ===<"
  # Generate a random application key for Duo. This must be >=40 characters so we generate 60 and strip any that are non-alphanumeric
  - sed -i "s|<duo-application-key>|$(openssl rand -base64 60 | tr -dc A-Za-z0-9)|" /src/guacamole/docker-compose.yml
  - docker-compose -f /src/guacamole/docker-compose.yml up -d
  # Generate the necessary SQL config for the local PostgreSQL database
  - docker-compose -f /src/guacamole/docker-compose.yml exec guacamole /opt/guacamole/bin/initdb.sh --postgres > /src/guacamole/db_init.sql
  # Copy the base SQL config to the postgres container and run it
  - docker cp /src/guacamole/db_init.sql $(docker ps --filter "name=postgres" | grep "postgres" | cut -d' ' -f1):/db_init.sql
  - docker-compose -f /src/guacamole/docker-compose.yml exec postgres psql -U guacamole -f /db_init.sql

  # Add LDAP users with pg-ldap-sync and schedule a cronjob
  - echo ">=== Adding LDAP users with pg-ldap-sync... ===<"
  - docker-compose -f /src/guacamole/docker-compose.yml exec postgres psql -U guacamole -c "CREATE ROLE ldap_users;"
  - docker-compose -f /src/guacamole/docker-compose.yml exec postgres psql -U guacamole -c "CREATE ROLE ldap_groups;"
  - gem install pg-ldap-sync
  - chown postgres:postgres /src/guacamole/main/pg-ldap-sync.yaml
  - pg_ldap_sync -c /src/guacamole/pg-ldap-sync.yaml -vv
  - echo ">=== Scheduling LDAP user sync every 10 minutes... ===<"
  - echo "*/10 * * * * postgres pg_ldap_sync -c /etc/postgresql/12/main/pg-ldap-sync.yaml -vv" >> /etc/crontab
  - tail -n 1 /etc/crontab

  # Copy the custom SQL config to the postgres container and run it
  - docker cp /src/guacamole/custom.sql $(docker ps --filter "name=postgres" | grep "postgres" | cut -d' ' -f1):/db_custom.sql
  - docker-compose -f /src/guacamole/docker-compose.yml exec postgres psql -U guacamole -f /db_custom.sql


# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: True
