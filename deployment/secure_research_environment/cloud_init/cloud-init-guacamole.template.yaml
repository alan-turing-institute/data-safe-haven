#cloud-config

# Update package database on first boot (ie. run apt-get update)
package_update: true

# Upgrade installed packages on first boot (ie. run apt-get upgrade)
package_upgrade: true


apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Add repositories
  sources:
    docker.list:
      source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
      keyid: 8D81803C0EBFCD88

write_files:
  - path: "/src/guacamole/pg-ldap-sync.yaml"
    owner: root:root
    permissions: "0700"
    content: |
      # With this sample config the distinction between LDAP-synchronized
      # groups/users from is done by the membership to ldap_user and
      # ldap_group. These two roles has to be defined manally before
      # pg_ldap_sync can run.
      # Connection parameters to LDAP server
      # see also: http://net-ldap.rubyforge.org/Net/LDAP.html#method-c-new
      # TODO: get SSL working on port 636
      ldap_connection:
        host: <shm-dc-ip-address>
        #port: 636
        port: 389
        auth:
          method: :simple
          username: <ldap-search-bind-dn>
          password: <ldap-search-bind-password>
        #encryption:
        #  method: :simple_tls
      # Search parameters for LDAP users which should be synchronized
      ldap_users:
        base: <ldap-users-base-dn>
        # LDAP filter defining which LDAP users should be synchronized
        filter: <ldap-user-filter>
        # this attribute is used as PG role name
        name_attribute: sAMAccountName
        # lowercase name for use as PG role name
        lowercase_name: false
      # Search parameters for LDAP groups which should be synchronized
      ldap_groups:
        base: <ldap-groups-base-dn>
        # LDAP filter defining which LDAP groups should be synchronized
        filter: <ldap-group-filter>
        # this attribute is used as PG role name
        name_attribute: cn
        # lowercase name for use as PG role name
        lowercase_name: false
        # this attribute must reference to all member DN's of the given group
        member_attribute: member
      # Connection parameters to PostgreSQL server
      # see also: http://rubydoc.info/gems/pg/PG/Connection#initialize-instance_method
      pg_connection:
        host: localhost
        dbname: guacamole
        user: guacamole
        password: <postgres-password>
      pg_users:
        # Filter for identifying LDAP generated users in the database.
        # It's the WHERE-condition to "SELECT rolname, oid FROM pg_roles"
        filter: oid IN (SELECT pam.member FROM pg_auth_members pam JOIN pg_roles pr ON pr.oid=pam.roleid WHERE pr.rolname='ldap_users')
        # Options for CREATE RULE statements
        create_options: LOGIN IN ROLE ldap_users
      pg_groups:
        # Filter for identifying LDAP generated groups in the database.
        # It's the WHERE-condition to "SELECT rolname, oid FROM pg_roles"
        filter: oid IN (SELECT pam.member FROM pg_auth_members pam JOIN pg_roles pr ON pr.oid=pam.roleid WHERE pr.rolname='ldap_groups')
        # Options for CREATE RULE statements
        create_options: NOLOGIN IN ROLE ldap_groups
        grant_options:

  # https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration
  # https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/v2.0/.well-known/openid-configuration
  - path: "/src/guacamole/guacamole.properties"
    content: |
      openid-authorization-endpoint: https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/oauth2/v2.0/authorize
      openid-jwks-endpoint: https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/discovery/v2.0/keys
      openid-issuer: https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/v2.0
      openid-client-id: f0a12d2a-88ce-47f6-b3f9-df5dcf169d02
      openid-redirect-uri: http://guacamole:8080/guacamole/

  # openid-redirect-uri: https://MYSERVER:8443/guacamole/
  # {"token_endpoint":"https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/oauth2/v2.0/token",
  #  "token_endpoint_auth_methods_supported":["client_secret_post","private_key_jwt","client_secret_basic"],
  #  "jwks_uri":"https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/discovery/v2.0/keys",
  #  "response_modes_supported":["query","fragment","form_post"],
  #  "subject_types_supported":["pairwise"],
  #  "id_token_signing_alg_values_supported":["RS256"],
  #  "response_types_supported":["code","id_token","code id_token","id_token token"],
  #  "scopes_supported":["openid","profile","email","offline_access"],
  #  "issuer":"https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/v2.0",
  #  "request_uri_parameter_supported":false,
  #  "userinfo_endpoint":"https://graph.microsoft.com/oidc/userinfo",
  #  "authorization_endpoint":"https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/oauth2/v2.0/authorize",
  #  "device_authorization_endpoint":"https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/oauth2/v2.0/devicecode",
  #  "http_logout_supported":true,
  #  "frontchannel_logout_supported":true,
  #  "end_session_endpoint":"https://login.microsoftonline.com/a87e65e6-8b21-4286-861a-2f2acea304d9/oauth2/v2.0/logout",
  #  "claims_supported":["sub","iss","cloud_instance_name","cloud_instance_host_name","cloud_graph_host_name","msgraph_host","aud","exp","iat","auth_time","acr","nonce","preferred_username","name","tid","ver","at_hash","c_hash","email"],
  #  "tenant_region_scope":"EU",
  #  "cloud_instance_name":"microsoftonline.com",
  #  "cloud_graph_host_name":"graph.windows.net",
  #  "msgraph_host":"graph.microsoft.com","rbac_url":"https://pas.windows.net"}


  # taken from boschkundendienst/guacamole-docker-compose
  - path: "/src/guacamole/docker-compose.yml"
    content: |
      version: '3.4'
      networks:
        guacnetwork_compose:
          driver: bridge
      services:
        postgres:
          container_name: postgres_guacamole_compose
          image: postgres:12.2
          networks:
            guacnetwork_compose:
          environment:
            PGDATA: /var/lib/postgresql/data/guacamole
            POSTGRES_DB: guacamole
            POSTGRES_USER: guacamole
            POSTGRES_PASSWORD: <postgres-password>
          ports:
          - 5432:5432
          volumes:
          - /src/guacamole/:/docker-entrypoint-initdb.d:ro
          - /data:/var/lib/postgresql/data:rw
          restart: always

        guacd:
          container_name: guacd_guacamole_compose
          image: guacamole/guacd:1.2.0
          networks:
            guacnetwork_compose:
          environment:
            GUACD_LOG_LEVEL: debug
          restart: always

        guacamole:
          container_name: guacamole_guacamole_compose
          image: guacamole/guacamole:1.2.0
          networks:
            guacnetwork_compose:
          depends_on:
          - guacd
          - postgres
          environment:
            GUACD_HOSTNAME: guacd
            LOGBACK_LEVEL: debug
            LDAP_HOSTNAME: <ldap-hostname>
            LDAP_PORT: <ldap-port>
            LDAP_USER_BASE_DN: <ldap-user-base-dn>
            LDAP_USERNAME_ATTRIBUTE: sAMAccountName
            LDAP_GROUP_BASE_DN: <ldap-group-base-dn>
            LDAP_SEARCH_BIND_DN: <ldap-search-bind-dn>
            LDAP_SEARCH_BIND_PASSWORD: <ldap-search-bind-password>
            POSTGRES_HOSTNAME: postgres
            POSTGRES_DATABASE: guacamole
            POSTGRES_USER: guacamole
            POSTGRES_PASSWORD: <postgres-password>
            OPENID_AUTHORIZATION_ENDPOINT: testing
            #DUO_API_HOSTNAME: <duo-api-hostname>
            #DUO_INTEGRATION_KEY: <duo-integration-key>
            #DUO_SECRET_KEY: <duo-secret-key>
            #DUO_APPLICATION_KEY: <duo-application-key>
          ports:
          - 8080/tcp
          restart: always

        nginx:
          container_name: nginx_guacamole_compose
          image: nginx
          networks:
            guacnetwork_compose:
          volumes:
          - /opt/nginx/ssl/self.cert:/etc/nginx/ssl/self.cert:ro
          - /opt/nginx/ssl/self-ssl.key:/etc/nginx/ssl/self-ssl.key:ro
          - /opt/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
          - /opt/nginx/guacamole.conf:/etc/nginx/conf.d/guacamole.conf:ro
          ports:
          - 8443:443
          links:
          - guacamole
          # run nginx
          command: /bin/bash -c "nginx -g 'daemon off;'"
          restart: always
  - path: "/opt/nginx/nginx.conf"
    content: |
      ### AAA
      user  nginx;
      worker_processes  1;

      error_log  /var/log/nginx/error.log warn;
      pid        /var/run/nginx.pid;


      events {
          worker_connections  1024;
      }


      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;

          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';

          access_log  /var/log/nginx/access.log  main;

          sendfile        on;
          #tcp_nopush     on;

          keepalive_timeout  65;

          #gzip  on;

          include /etc/nginx/conf.d/*.conf;
      }
  - path: "/opt/nginx/guacamole.conf"
    content: |
      server {
        listen       443 ssl http2;
        server_name  localhost;
        ssl_certificate /etc/nginx/ssl/self.cert;
        ssl_certificate_key /etc/nginx/ssl/self-ssl.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling off;
        ssl_stapling_verify off;
        location / {
          proxy_pass http://guacamole:8080/guacamole/;
          proxy_buffering off;
          proxy_http_version 1.1;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $http_connection;
          proxy_cookie_path /guacamole/ /;
          access_log off;
          client_max_body_size 4096m;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
      }
  - path: "/src/guacamole/custom.sql"
    content: |
      /* Add RDP connections */
      ALTER TABLE guacamole_connection ADD CONSTRAINT connection_name_constraint UNIQUE (connection_name);
      INSERT INTO guacamole_connection (connection_name, protocol)
        VALUES ('DSVM Main (Desktop)', 'rdp'),
               ('Windows (Desktop)', 'rdp')
      ON CONFLICT DO NOTHING;

      /* Add connection details */
      INSERT INTO guacamole_connection_parameter (connection_id, parameter_name, parameter_value)
      SELECT guacamole_connection.connection_id, parameter_name, parameter_value
      FROM (
          VALUES
              ('DSVM Main (Desktop)', 'hostname', '10.150.2.160'),
              ('DSVM Main (Desktop)', 'username', '${GUAC_USERNAME}'),
              ('DSVM Main (Desktop)', 'password', '${GUAC_PASSWORD}'),
              ('Windows (Desktop)', 'hostname', '10.150.1.248'),
              ('Windows (Desktop)', 'username', '${GUAC_USERNAME}'),
              ('Windows (Desktop)', 'password', '${GUAC_PASSWORD}')
      ) parameters (connection_name, parameter_name, parameter_value)
      JOIN guacamole_connection ON parameters.connection_name = guacamole_connection.connection_name ON CONFLICT DO NOTHING;

      /* Ensure that all users are Guacamole USER entities */
      INSERT INTO guacamole_entity (name, type) SELECT usename, 'USER' FROM pg_user ON CONFLICT DO NOTHING;

      /* Ensure that all user groups are Guacamole USER_GROUP entities */
      INSERT INTO guacamole_entity (name, type) SELECT groname, 'USER_GROUP' FROM pg_group WHERE (groname LIKE 'SG SANDBOX %') ON CONFLICT DO NOTHING;

      /* Ensure that all user groups are Guacamole USER_GROUP entities */
      INSERT INTO guacamole_user_group (entity_id) SELECT entity_id FROM guacamole_entity WHERE type = 'USER_GROUP' ON CONFLICT DO NOTHING;

      /* Ensure that all users are added to the correct group */
      INSERT INTO guacamole_user_group_member (user_group_id, member_entity_id)
        SELECT guacamole_user_group.user_group_id, guac_user.entity_id FROM pg_group
        JOIN pg_user ON pg_has_role(pg_user.usesysid, grosysid, 'member')
        JOIN guacamole_entity guac_group ON pg_group.groname = guac_group.name
        JOIN guacamole_entity guac_user ON pg_user.usename = guac_user.name
        JOIN guacamole_user_group ON guacamole_user_group.entity_id = guac_group.entity_id
        WHERE (groname LIKE 'SG SANDBOX %')
      ON CONFLICT DO NOTHING;

      /* Assign connection permissions to each group */
      INSERT INTO guacamole_connection_permission (entity_id, connection_id, permission)
      SELECT guacamole_entity.entity_id, guacamole_connection.connection_id, permission::guacamole_object_permission_type
      FROM (
          VALUES
              ('guacadmin', 'USER', 'DSVM Main (Desktop)', 'READ'),
              ('guacadmin', 'USER', 'DSVM Main (Desktop)', 'UPDATE'),
              ('guacadmin', 'USER', 'DSVM Main (Desktop)', 'DELETE'),
              ('guacadmin', 'USER', 'DSVM Main (Desktop)', 'ADMINISTER'),
              ('guacadmin', 'USER', 'Windows (Desktop)', 'READ'),
              ('guacadmin', 'USER', 'Windows (Desktop)', 'UPDATE'),
              ('guacadmin', 'USER', 'Windows (Desktop)', 'DELETE'),
              ('guacadmin', 'USER', 'Windows (Desktop)', 'ADMINISTER'),
              ('<ldap-group-researchers>', 'USER_GROUP', 'DSVM Main (Desktop)', 'READ'),
              ('<ldap-group-researchers>', 'USER_GROUP', 'Windows (Desktop)', 'READ')
      ) permissions (username, entity_type, connection_name, permission)
      JOIN guacamole_entity     ON permissions.username = guacamole_entity.name AND guacamole_entity.type::text = permissions.entity_type
      JOIN guacamole_connection ON permissions.connection_name = guacamole_connection.connection_name ON CONFLICT DO NOTHING;




# SELECT * FROM pg_group
# JOIN guacamole_entity ON pg_group.groname = guacamole_entity.name
# WHERE (groname LIKE 'SG SANDBOX %');


# SELECT * FROM pg_user WHERE (pg_has_role(usesysid, '<db-sysadmin-group>', 'member')


# SELECT * FROM pg_group

# SELECT guac_group.entity_id AS group_entity_id, guac_user.entity_id AS user_entity_id FROM pg_group
# JOIN pg_user ON pg_has_role(pg_user.usesysid, grosysid, 'member')
# JOIN guacamole_entity guac_group ON pg_group.groname = guac_group.name
# JOIN guacamole_entity guac_user ON pg_user.usename = guac_user.name
# WHERE (groname LIKE 'SG SANDBOX %');




# SELECT * FROM pg_group
# JOIN (
#   SELECT usename, usesysid, entity_id AS user_entity_id FROM pg_user JOIN guacamole_entity ON pg_user.usename = guacamole_entity.name
# ) ON pg_has_role(pg_user.usesysid, grosysid, 'member')


# JOIN guacamole_entity ON pg_group.groname = guacamole_entity.name
# WHERE (groname LIKE 'SG SANDBOX %');


# (SELECT usename, usesysid, entity_id AS user_entity_id FROM pg_user JOIN guacamole_entity ON pg_user.usename = guacamole_entity.name)





# SELECT * FROM guacamole_entity WHERE guacamole_entity.type = 'USER_GROUP'
      # INSERT INTO guacamole_entity (name, type) VALUES ('<ldap-group-researchers>', 'USER_GROUP');
      # INSERT INTO guacamole_user_group (entity_id)
      #   SELECT entity_id FROM guacamole_entity WHERE name = '<ldap-group-researchers>' AND guacamole_entity.type = 'USER_GROUP';


packages:
  - docker-ce
  - docker-compose
  - gcc
  - libpq-dev
  - make
  - ruby
  - ruby-dev

runcmd:
  # Suppress apt prompts and warning messages
  - DEBIAN_FRONTEND=noninteractive
  - export DEBIAN_FRONTEND

  # Create SSL certificates
  # echo "You can use your own certificates by placing the private key in nginx/ssl/self-ssl.key and the cert in nginx/ssl/self.cert"
  - echo "Creating SSL certificates"
  - mkdir -p /opt/nginx/ssl
  - openssl req -nodes -newkey rsa:2048 -new -x509 -keyout /opt/nginx/ssl/self-ssl.key -out /opt/nginx/ssl/self.cert -subj '/C=DE/ST=BY/L=Hintertupfing/O=Dorfwirt/OU=Theke/CN=www.example.com/emailAddress=docker@example.com'

  # Clean up installation - getting to this point takes approximately 30 mins
  - echo ">=== Cleaning up apt-get packages... ===<"
  - apt-get -y autoremove
  - apt-get clean

   # Setup Guacamole
  - echo ">=== Starting Guacamole... ===<"
  # Generate a random application key for Duo. This must be >=40 characters so we generate 60 and strip any that are non-alphanumeric
  - sed -i "s|<duo-application-key>|$(openssl rand -base64 60 | tr -dc A-Za-z0-9)|" /src/guacamole/docker-compose.yml
  - docker-compose -f /src/guacamole/docker-compose.yml up -d
  # Generate the necessary SQL config for the local PostgreSQL database
  - docker-compose -f /src/guacamole/docker-compose.yml exec guacamole /opt/guacamole/bin/initdb.sh --postgres > /src/guacamole/db_init.sql
  # Copy the base SQL config to the postgres container and run it
  - docker cp /src/guacamole/db_init.sql $(docker ps --filter "name=postgres" | grep "postgres" | cut -d' ' -f1):/db_init.sql
  - docker-compose -f /src/guacamole/docker-compose.yml exec postgres psql -U guacamole -f /db_init.sql

   # Download additional guacamole extensions
  - mkdir -p /src/guacamole/extensions/
  - GUACAMOLE_CONTAINER_ID=$(docker ps -q --filter "name=guacamole_guacamole_compose")
  - GUACAMOLE_VERSION="1.2.0"
  - |
    for EXTENSION in "auth-openid"; do
      cd /src/guacamole/extensions
      FILENAME="guacamole-${EXTENSION}-${GUACAMOLE_VERSION}.tar.gz"
      curl -SLO "http://apache.org/dyn/closer.cgi?action=download&filename=guacamole/${GUACAMOLE_VERSION}/binary/${FILENAME}"
      docker cp /src/guacamole/extensions/${FILENAME} ${GUACAMOLE_CONTAINER_ID}:/root/.guacamole/extensions/${FILENAME}
    done

  # Configure the OpenID extension
  - docker exec -i ${GUACAMOLE_CONTAINER_ID} sh -c "cat >> /root/.guacamole/guacamole.properties" < /src/guacamole/guacamole.properties
  # https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration


  # openid-authorization-endpoint:https://login.microsoftonline.com/TENANTID/oauth2/v2.0/authorize
  # openid-jwks-endpoint:https://login.microsoftonline.com/TENANTID/discovery/v2.0/keys
  # openid-issuer:https://login.microsoftonline.com/TENANTID
  # openid-client-id:CLIENTID
  # openid-redirect-uri:https://MYSERVER:8443/guacamole/



  # Add LDAP users with pg-ldap-sync and schedule a cronjob
  - echo ">=== Adding LDAP users with pg-ldap-sync... ===<"
  - docker-compose -f /src/guacamole/docker-compose.yml exec postgres psql -U guacamole -c "CREATE ROLE ldap_users;"
  - docker-compose -f /src/guacamole/docker-compose.yml exec postgres psql -U guacamole -c "CREATE ROLE ldap_groups;"
  - gem install pg-ldap-sync
  - pg_ldap_sync -c /src/guacamole/pg-ldap-sync.yaml -vv
  - echo ">=== Scheduling LDAP user sync every 10 minutes... ===<"
  - echo "*/10 * * * * root pg_ldap_sync -c /etc/postgresql/12/main/pg-ldap-sync.yaml -vv" >> /etc/crontab
  - tail -n 1 /etc/crontab

  # Copy the custom SQL config to the postgres container and run it
  - docker cp /src/guacamole/custom.sql $(docker ps --filter "name=postgres" | grep "postgres" | cut -d' ' -f1):/db_custom.sql
  - docker-compose -f /src/guacamole/docker-compose.yml exec postgres psql -U guacamole -f /db_custom.sql


# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: True
