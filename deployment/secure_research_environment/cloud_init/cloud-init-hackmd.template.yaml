#cloud-config
package_update: true
package_upgrade: true

# Install LDAP tools for debugging LDAP issues
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - docker-ce
  - docker-compose
  - ldap-utils
  - software-properties-common

apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Add repositories
  sources:
    gitlab.list:
      source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
      keyid: 8D81803C0EBFCD88

# We know that exactly one data disk will be attached to this VM and it will be attached as lun1
disk_setup:
  /dev/disk/azure/scsi1/lun1:
    table_type: gpt
    layout: True
    overwrite: True

fs_setup:
  - device: /dev/disk/azure/scsi1/lun1
    partition: 1
    filesystem: ext4

mounts:
  - [/dev/disk/azure/scsi1/lun1-part1, /datadrive, ext4, "defaults,nofail"]

write_files:
  - path: "/docker-compose-hackmd.yml"
    content: |
      version: '3'
      services:
        database:
          image: postgres:11.6-alpine
          environment:
            - POSTGRES_USER=hackmd
            - POSTGRES_PASSWORD=<hackmd-postgres-password>
            - POSTGRES_DB=hackmd
          volumes:
            - database:/var/lib/postgresql/data
          networks:
            backend:
          restart: always

        app:
          image: nabo.codimd.dev/hackmdio/hackmd:2.1.0
          volumes:
            - uploads:/home/hackmd/app/public/uploads
          environment:
            - CMD_DB_URL=postgres://hackmd:<hackmd-postgres-password>@database:5432/hackmd
            - CMD_ALLOW_ANONYMOUS=false
            - CMD_ALLOW_FREEURL=true
            - CMD_EMAIL=false
            - CMD_USECDN=false
            - CMD_LDAP_SEARCHFILTER=<hackmd-user-filter>
            - CMD_LDAP_SEARCHBASE=<hackmd-ldap-base>
            - CMD_LDAP_BINDCREDENTIALS=<hackmd-bind-creds>
            - CMD_LDAP_BINDDN=<hackmd-bind-dn>
            - CMD_LDAP_URL=<hackmd-ldap-url>
            - CMD_LDAP_PROVIDERNAME=<hackmd-ldap-netbios>
            - CMD_IMAGE_UPLOAD_TYPE=filesystem
          ports:
            - "3000:3000"
          networks:
            backend:
          restart: always
          depends_on:
            - database

      # Define networks to allow best isolation
      networks:
        # Internal network for communication with PostgreSQL/MySQL
        backend:

      # Define named volumes so data stays in place
      volumes:
        # Volume for PostgreSQL/MySQL database
        database:/datadrive/database
        uploads:/datadrive/hackmd
  - path: "/etc/systemd/system/hackmd-app.service"
    content: |
      [Unit]
      Description=HackMD docker compose application service
      Requires=docker.service
      After=docker.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      WorkingDirectory=/srv/docker
      ExecStart=/usr/local/bin/docker-compose -f /opt/docker-hackmd/docker-compose.yml up -d
      ExecStop=/usr/local/bin/docker-compose -f /opt/docker-hackmd/docker-compose.yml down
      TimeoutStartSec=0

      [Install]
      WantedBy=multi-user.target

# Add the SHM admin (default) and hackmddaemon users
# lock_passwd: Lock the password to disable password login
users:
  - default
  - name: hackmddaemon
    lock_passwd: True
    sudo: False

runcmd:
  # Set up the data disk
  - echo "Setting up data disk..."
  - mkdir -p /datadrive/database
  - mkdir -p /datadrive/hackmd
  # Configure server
  - echo "Configuring server"
  - echo "<hackmd-ip> <hackmd-hostname> <hackmd-fqdn>" >> /etc/hosts
  - echo "Europe/London" > /etc/timezone
  - dpkg-reconfigure -f noninteractive tzdata
  # Ensure that Docker is running
  - echo "Current Docker status"
  - systemctl status docker
  # Pulling HackMD Docker image
  - echo "Pulling HackMD Docker image"
  - git clone https://github.com/hackmdio/docker-hackmd.git /opt/docker-hackmd
  - echo "Overwriting HackMD configuration"
  - cp /docker-compose-hackmd.yml /opt/docker-hackmd/docker-compose.yml
  - echo "Starting HackMD"
  # Ensure that HackMD is running
  - echo "Current HackMD status"
  - systemctl start hackmd-app
  - systemctl enable hackmd-app
  - systemctl status hackmd-app


# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: True
