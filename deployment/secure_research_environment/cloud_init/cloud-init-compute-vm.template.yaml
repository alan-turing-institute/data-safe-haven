#cloud-config

# Upgrade installed packages on first boot (ie. run `apt-get upgrade`)
package_upgrade: false

disk_setup:
  /dev/disk/azure/scsi1/lun1:
    table_type: gpt
    layout: true
    overwrite: true

fs_setup:
  - device: /dev/disk/azure/scsi1/lun1
    filesystem: ext4
    partition: 1

# Note that we do not include the blobfuse mounts here as these are controlled by systemd
mounts:
  - ["/dev/disk/azure/scsi1/lun1-part1", /scratch, ext4, "rw,user,exec"]
  - ["{{sre.storage.userdata.account.name}}.file.core.windows.net:/{{sre.storage.userdata.account.name}}/shared", /shared, nfs, "_netdev,sec=sys"]
  - ["{{sre.storage.userdata.account.name}}.file.core.windows.net:/{{sre.storage.userdata.account.name}}/home", /home, nfs, "_netdev,sec=sys"]

write_files:
  - path: "/etc/bash.bashrc"
    permissions: "0644"
    append: true
    content: |
      # enable bash completion in interactive shells
      if [ ! $(shopt -oq posix) ]; then
          if [ -f /usr/share/bash-completion/bash_completion ]; then
              . /usr/share/bash-completion/bash_completion
          elif [ -f /etc/bash_completion ]; then
              . /etc/bash_completion
          fi
      fi

  - path: "/etc/clamav/clamd.conf"
    permissions: "0644"
    append: true
    content: |
      # Scan all local and remote mounts on access
      OnAccessIncludePath /data
      OnAccessIncludePath /home
      OnAccessIncludePath /mnt
      OnAccessIncludePath /output
      OnAccessIncludePath /scratch
      OnAccessIncludePath /shared
      # Prevent access to infected files
      OnAccessPrevention yes
      OnAccessExcludeUname clamav
      OnAccessExcludeRootUID yes

  - path: /etc/crontab
    append: true
    content: |
      @reboot root /usr/local/bin/runonce | logger -t SafeHaven

  - path: "/etc/domain-join.secret"
    permissions: "0400"
    content: |
      {{dsvm.domainJoinPassword}}

  - path: "/etc/jaas.conf"
    permissions: "0444"
    content: |
      pgjdbc {
      com.sun.security.auth.module.Krb5LoginModule required
          useTicketCache=true
          debug=true
          renewTGT=true
          doNotPrompt=true;
      };

  - path: "/etc/ldap.conf"
    permissions: "0444"
    content: |
      # The distinguished name of the search base.
      base {{shm.domain.ous.researchUsers.path}}
      # Restrict users to those in the security group of this SRE
      filter {{{dsvm.ldapUserFilter}}}
      # Specify the LDAP server by URI
      uri ldap://{{shm.dc.hostnameUpper}}.{{shm.domain.fqdnLower}}:389
      # The LDAP version to use (defaults to 3 if supported by client library)
      ldap_version 3
      # The distinguished name used to bind to the server
      rootbinddn {{dsvm.ldapSearchUserDn}}
      # Do not hash the password: rely on the server to do so (default)
      pam_password md5

  - path: "/etc/ldap.secret"
    permissions: "0400"
    content: |
      {{dsvm.ldapSearchUserPassword}}

  - path: "/etc/local/runonce.d/00-join-domain.sh"
    permissions: "0500"
    content: |
      #! /bin/bash
      echo ">=== Waiting for realm availability... ===<"
      while [ "$(realm discover {{shm.domain.fqdnLower}} 2> /dev/null | grep server-software | awk '{print $2}')" != "active-directory" ]; do sleep 1; done
      echo ">=== Joining domain '{{shm.domain.fqdnLower}}'... ===<"
      echo "/opt/configuration/join_domain.sh '{{shm.domain.fqdnLower}}' '{{shm.domain.ous.linuxServers.path}}' '{{shm.users.computerManagers.linuxServers.samAccountName}}' '{{dsvm.hostname}}'"
      /opt/configuration/join_domain.sh "{{shm.domain.fqdnLower}}" "{{shm.domain.ous.linuxServers.path}}" "{{shm.users.computerManagers.linuxServers.samAccountName}}" "{{dsvm.hostname}}"

  - path: "/etc/local/runonce.d/01-remount-nfs.sh"
    permissions: "0500"
    content: |
      #! /bin/bash
      echo ">=== Re-mounting nfs after domain join... ===<"
      systemctl start home.mount
      systemctl start shared.mount

  - path: "/etc/krb5.conf"
    permissions: "0444"
    content: |
      {{krb5.conf}}

  - path: "/etc/pip.conf"
    permissions: "0444"
    content: |
      # Add the PyPI mirror to our global settings
      [global]
      index = {{sre.repositories.pypi.index}}
      index-url = {{sre.repositories.pypi.indexUrl}}
      trusted-host = {{sre.repositories.pypi.host}}

  - path: "/etc/realmd.conf"
    permissions: "0400"
    content: |
      {{realmd.conf}}

  - path: "/etc/R/Rprofile.site"
    permissions: "0444"
    content: |
      ## Set Rprofile.site to the appropriate CRAN mirror
      local({
          r <- getOption("repos")
          r["CRAN"] <- "{{sre.repositories.cran.url}}"
          options(repos = r)
      })

  - path: "/etc/skel/Desktop/CoCalc.desktop"
    permissions: "0755"
    content: |
      [Desktop Entry]
      Version=1.0
      Type=Link
      Name=CoCalc
      Comment=
      Icon=/opt/icons/cocalc.png
      URL=https://{{sre.webapps.cocalc.fqdn}}

  - path: "/etc/skel/Desktop/CodiMD.desktop"
    permissions: "0755"
    content: |
      [Desktop Entry]
      Version=1.0
      Type=Link
      Name=CodiMD
      Comment=
      Icon=/opt/icons/codimd.png
      URL=http://{{sre.webapps.codimd.fqdn}}

  - path: "/etc/skel/Desktop/GitLab.desktop"
    permissions: "0755"
    content: |
      [Desktop Entry]
      Version=1.0
      Type=Link
      Name=GitLab
      Comment=
      Icon=/opt/icons/gitlab.png
      URL=http://{{sre.webapps.gitlab.fqdn}}

  - path: "/etc/skel/.bashrc"
    permissions: "0644"
    content: |
      # determine if terminal has color support
      case "$TERM" in
          xterm-color|*-256color) color_prompt=yes;;
      esac
      # set prompt
      if [ "$color_prompt" = yes ]; then
          PS1='\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
      else
          PS1='\u:\W\$ '
      fi
      unset color_prompt
      # enable color support for ls and grep
      if [ -x /usr/bin/dircolors ]; then
          test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
          alias ls='ls --color=auto'
          alias grep='grep --color=auto'
          alias fgrep='fgrep --color=auto'
          alias egrep='egrep --color=auto'
      fi

  - path: "/etc/skel/.config/JetBrains/PYCHARM_VERSION/options/project.default.xml"
    permissions: "0400"
    content: |
      {{project.default.xml}}

  - path: "/etc/skel/.xsession"
    permissions: "0444"
    content: |
      xfce4-session

  - path: "/etc/systemd/system/clamav-clamonacc.service"
    permissions: "0644"
    content: |
      [Unit]
      Description=ClamAV on access scanning daemon
      Requires=clamav-daemon.service
      After=clamav-daemon.service syslog.target network.target

      [Service]
      Type=simple
      User=root
      ExecStartPre=/bin/bash -c "while [ ! -S /var/run/clamav/clamd.ctl ]; do sleep 1; done"
      ExecStart=/usr/bin/clamonacc --foreground=true
      Restart=on-failure
      RestartSec=30

      [Install]
      WantedBy=multi-user.target

  - path: "/etc/systemd/system/clamav-clamdscan.service"
    permissions: "0644"
    content: |
      [Unit]
      Description=ClamAV full system scan
      Requires=clamav-daemon.service
      After=clamav-daemon.service

      [Service]
      Type=oneshot
      User=root
      ExecStart=/usr/bin/clamdscan --fdpass --multiscan /

  - path: "/etc/systemd/system/clamav-clamdscan.timer"
    permissions: "0644"
    content: |
      [Unit]
      Description=Run ClamAV scan every week

      [Timer]
      # Will run on every Monday at 00:00:00
      OnCalendar=weekly
      AccuracySec=1h
      # Will run if a job was missed (e.g. due to system being powered down)
      Persistent=true

      [Install]
      WantedBy=timers.target

  - path: "/etc/systemd/system/data.mount"
    permissions: "0644"
    content: |
      [Unit]
      Description=Mount unit for ingress volume (via blobfuse)
      Requires=network-online.target
      After=network-online.target

      [Mount]
      What=/opt/configuration/mount-ingress.sh
      Where=/data
      Type=fuse
      Options=_netdev

      [Install]
      WantedBy=network-online.target

  - path: "/etc/systemd/system/data.automount"
    permissions: "0644"
    content: |
      [Unit]
      Description=Automount blobfuse
      ConditionPathExists=/data

      [Automount]
      Where=/data
      TimeoutIdleSec=10

      [Install]
      WantedBy=multi-user.target

  - path: "/etc/systemd/system/output.mount"
    permissions: "0644"
    content: |
      [Unit]
      Description=Mount unit for egress volume (via blobfuse)
      Requires=network-online.target
      After=network-online.target

      [Mount]
      What=/opt/configuration/mount-egress.sh
      Where=/output
      Type=fuse
      Options=_netdev

      [Install]
      WantedBy=network-online.target

  - path: "/etc/systemd/system/output.automount"
    permissions: "0644"
    content: |
      [Unit]
      Description=Automount blobfuse
      ConditionPathExists=/output

      [Automount]
      Where=/output
      TimeoutIdleSec=10

      [Install]
      WantedBy=multi-user.target

  - path: "/etc/xdg/xfce4/terminal/terminalrc"
    permissions: "0644"
    content: |
      [Configuration]

  - path: "/etc/xrdp/startwm.sh"
    permissions: "0755"
    content: |
      #!/bin/sh
      if [ -r /etc/default/locale ]; then
          . /etc/default/locale
          export LANG LANGUAGE
      fi
      # Start xfce4
      startxfce4

  - path: "/opt/configuration/check_dns.sh"
    permissions: "0500"
    content: |
      {{check_dns.sh}}

  - path: "/opt/configuration/check_hostname.sh"
    permissions: "0500"
    content: |
      {{check_hostname.sh}}

  - path: "/opt/configuration/check_ntp.sh"
    permissions: "0500"
    content: |
      {{check_ntp.sh}}

  - path: "/opt/configuration/configure_pam.sh"
    permissions: "0500"
    content: |
      # Edit the PAM session configuration file
      PAM_INFORMATION="session required|pam_mkhomedir.so|skel=/etc/skel/|umask=0022"
      sed "/pam_unix/ a $PAM_INFORMATION" /etc/pam.d/common-session | tr "|" "\t" > /etc/pam.d/common-session.tmp
      mv /etc/pam.d/common-session.tmp /etc/pam.d/common-session
      grep -v -e '^[[:space:]]*$' /etc/pam.d/common-session | grep -v "^#" | sed 's|^|  /etc/pam.d/common-session  |'

  - path: "/opt/configuration/configure_pycharm.py"
    permissions: "0500"
    content: |
      {{configure_pycharm.py}}

  - path: "/opt/configuration/credentials-ingress.secret"
    permissions: "0400"
    content: |
      accountName {{sre.storage.persistentdata.account.name}}
      sasToken {{{dsvm.ingressContainerSasToken}}}
      authType SAS
      containerName ingress

  - path: "/opt/configuration/credentials-egress.secret"
    permissions: "0400"
    content: |
      accountName {{sre.storage.persistentdata.account.name}}
      sasToken {{{dsvm.egressContainerSasToken}}}
      authType SAS
      containerName egress

  - path: "/opt/configuration/jdk-template.xml"
    permissions: "0400"
    content: |
      {{jdk-template.xml}}

  - path: "/opt/configuration/join_domain.sh"
    permissions: "0500"
    content: |
      {{join_domain.sh}}

  - path: "/opt/configuration/mount-ingress.sh"
    permissions: "0500"
    content: |
      if [ ! "$(df -h | grep $1)" ]; then
        BLOBFUSE_CACHE_DIR="/tmp/blobfuse-cache-ingress"
        rm -rf $BLOBFUSE_CACHE_DIR
        mkdir -p $BLOBFUSE_CACHE_DIR
        CACHE_SPACE_MB=$(echo "$(df -BM | grep /mnt | awk '{print $2}' | sed 's/M//') / 2" | bc) # set the cache size to half the size of /mnt which scales with VM size
        /usr/bin/blobfuse $1 -o ro --tmp-path=$BLOBFUSE_CACHE_DIR --cache-size-mb=$CACHE_SPACE_MB --no-symlinks=true --config-file=/opt/configuration/credentials-ingress.secret --log-level=LOG_DEBUG -o attr_timeout=240 -o entry_timeout=240 -o negative_timeout=120 -o allow_other
      fi

  - path: "/opt/configuration/mount-egress.sh"
    permissions: "0500"
    content: |
      if [ ! "$(df -h | grep $1)" ]; then
        BLOBFUSE_CACHE_DIR="/tmp/blobfuse-cache-egress"
        rm -rf $BLOBFUSE_CACHE_DIR
        mkdir -p $BLOBFUSE_CACHE_DIR
        CACHE_SPACE_MB=$(echo "$(df -BM | grep /mnt | awk '{print $2}' | sed 's/M//') / 2" | bc) # set the cache size to half the size of /mnt which scales with VM size
        /usr/bin/blobfuse $1 -o rw --tmp-path=$BLOBFUSE_CACHE_DIR --cache-size-mb=$CACHE_SPACE_MB --no-symlinks=true --config-file=/opt/configuration/credentials-egress.secret --log-level=LOG_DEBUG -o attr_timeout=240 -o entry_timeout=240 -o negative_timeout=120 -o allow_other
      fi

  - path: "/usr/local/bin/runonce"
    permissions: "0500"
    content: |
      {{runonce.sh}}

  - path: "/usr/share/xrdp/xrdp_custom_logo.bmp"
    encoding: gz+b64
    permissions: "0644"
    content: |
      {{dsvm.xrdpCustomLogoEncoded}}

# Set locale and timezone
locale: en_GB.UTF-8
timezone: {{sre.time.timezone.linux}}

# Set the NTP server
# By default we use Google's NTP servers which are incompatible with other servers due to leap-second smearing
ntp:
  enabled: true
  ntp_client: systemd-timesyncd
  pools:
    {{#shm.time.ntp.serverAddresses}}
    - {{.}}
    {{/shm.time.ntp.serverAddresses}}

# Set hostname
# We need the FQDN in the hostname as without it we cannot set service principals when joining the Windows domain
fqdn: "{{dsvm.hostname}}.{{shm.domain.fqdnLower}}"
hostname: {{dsvm.hostname}}
manage_etc_hosts: true
prefer_fqdn_over_hostname: true

runcmd:
  - echo ">=== Beginning DSVM configuration... ===<"
  # Set permissions on scratch directory
  - chmod ugo+rwx /scratch
  # Configure services for realm joining
  - echo ">=== Configuring domain joining settings... ===<"
  - OSVERSION=$(lsb_release -a 2> /dev/null | grep "Description:" | awk '{print $3}')
  - sed -i -E "s|(os-version = ).*|\1$OSVERSION|" /etc/realmd.conf
  - echo ">=== Checking DNS... ===<"
  - /opt/configuration/check_dns.sh
  - echo ">=== Checking hostname... ===<"
  - /opt/configuration/check_hostname.sh
  - echo ">=== Updating PAM configuration... ===<"
  - /opt/configuration/configure_pam.sh
  - systemctl enable sssd
  # Check Kerberos settings
  - echo ">=== Checking LDAP config... ===<"
  - grep -v -e '^[[:space:]]*$' /etc/ldap.conf | grep -v "^#" | sed 's|^|  /etc/ldap.conf  |'
  - echo ">=== Checking Kerberos config... ===<"
  - grep -v -e '^[[:space:]]*$' /etc/krb5.conf | sed 's|^|  /etc/krb5.conf  |'
  # Check timezone and NTP server
  - echo ">=== Current time synchronisation status... ===<"
  - /opt/configuration/check_ntp.sh
  # PyCharm configuration
  - echo ">=== Configuring PyCharm... ===<"
  - PYCHARM_VERSION=$(grep "dataDirectoryName" /snap/pycharm-community/current/product-info.json | cut -d':' -f2 | xargs | sed "s/,//")
  - python3 /opt/configuration/configure_pycharm.py /etc/skel/.config/JetBrains/PYCHARM_VERSION/options/jdk.table.xml
  - mv /etc/skel/.config/JetBrains/PYCHARM_VERSION /etc/skel/.config/JetBrains/${PYCHARM_VERSION}
  # Set default keyboard to a generic 105 key en-GB
  - echo ">=== Configuring keyboard... ===<"
  - sed -i 's|XKBMODEL=.*|XKBMODEL=\"pc105\"|g' /etc/default/keyboard
  - sed -i 's|XKBLAYOUT=.*|XKBLAYOUT=\"gb\"|g' /etc/default/keyboard
  - grep -v -e '^[[:space:]]*$' /etc/default/keyboard | sed 's|^|  /etc/default/keyboard  |'
  # Set default terminal and panel for xfce
  - echo ">=== Setting xfce default panel and terminal and disabling screen lock... ===<"
  - sed -i -E 's/(TerminalEmulator=).*/\1xfce4-terminal/' /etc/xdg/xfce4/helpers.rc
  - cp /etc/xdg/xfce4/panel/default.xml /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml
  # Disable light-locker which can cause irritating error messages
  - echo "Hidden=true" >> /etc/xdg/autostart/light-locker.desktop
  # Set terminal colour scheme
  - |
    THEME="dark-pastels"
    if [ -f /usr/share/xfce4/terminal/colorschemes/${THEME}.theme ]; then
      echo "Setting terminal colour scheme to $THEME"
      grep -v -e Name -e Scheme /usr/share/xfce4/terminal/colorschemes/${THEME}.theme >> /etc/xdg/xfce4/terminal/terminalrc
    else
      echo "Could not find terminal colour scheme $THEME"
      rm -rf /etc/xdg/xfce4/terminal/terminalrc
    fi
  # Configure xrdp login window
  - echo ">=== Setting xrdp defaults... ===<"
  - sed -i "s|dark_grey=808080|dark_grey=ffffff|g" /etc/xrdp/xrdp.ini                                          # title bar colour (unselected)
  - sed -i "s|blue=009cb5|blue=ffffff|g" /etc/xrdp/xrdp.ini                                                    # title bar colour (selected)
  - sed -i "s|ls_top_window_bg_color=.*|ls_top_window_bg_color=000000|g" /etc/xrdp/xrdp.ini                    # teal background colour
  - sed -i "s|ls_bg_color=.*|ls_bg_color=ffffff|g" /etc/xrdp/xrdp.ini                                          # grey box colour
  - sed -i "s|.*ls_title=.*|ls_title=\.|g" /etc/xrdp/xrdp.ini                                                  # window title
  - sed -i "s|ls_logo_filename=.*|ls_logo_filename=/usr/share/xrdp/xrdp_custom_logo.bmp|g" /etc/xrdp/xrdp.ini  # logo
  - sed -i "s|ls_btn_ok_x_pos=.*|ls_btn_ok_x_pos=85|g" /etc/xrdp/xrdp.ini                                      # centre OK button
  - sed -i "s|ls_btn_cancel_x_pos=.*|ls_btn_cancel_x_pos=180|g" /etc/xrdp/xrdp.ini                             # centre cancel button
  # Remove all sessions except Xorg
  - sed -i '/\[X11rdp\]/,/^$/d' /etc/xrdp/xrdp.ini           # delete lines from [X11rdp] until next empty line
  - sed -i '/\[Xvnc\]/,/^$/d' /etc/xrdp/xrdp.ini             # delete lines from [Xvnc] until next empty line
  - sed -i '/\[console\]/,/^$/d' /etc/xrdp/xrdp.ini          # delete lines from [console] until next empty line
  - sed -i '/\[vnc-any\]/,/^$/d' /etc/xrdp/xrdp.ini          # delete lines from [vnc-any] until next empty line
  - sed -i '/\[sesman-any\]/,/^$/d' /etc/xrdp/xrdp.ini       # delete lines from [sesman-any] until next empty line
  - sed -i '/\[neutrinordp-any\]/,/^$/d' /etc/xrdp/xrdp.ini  # delete lines from [neutrinordp-any] until next empty line
  - grep -v -e '^[[:space:]]*$' /etc/xrdp/xrdp.ini | grep -v -e '^[;#]' | sed 's|^|  /etc/xrdp/xrdp.ini  |'
  # Ensure that xrdp is running and enabled at startup
  - echo ">=== Enabling xrdp services... ===<"
  - systemctl enable xrdp
  - systemctl enable xrdp-sesman
  # Schedule mounting of data and output volumes, allowing non-root users to specify 'allow_other'
  - echo ">=== Configure ingress and egress mounts ... ===<"
  - grep -v "user_allow_other" /etc/fuse.conf > /etc/fuse.conf.tmp
  - echo "user_allow_other" >> /etc/fuse.conf.tmp
  - mv /etc/fuse.conf.tmp /etc/fuse.conf
  - systemctl enable data.mount
  - systemctl enable output.mount
  - systemctl enable data.automount
  - systemctl enable output.automount
  # List fstab and the volume mount order. Note that blobfuse mounts are not using fstab
  - echo ">=== Checking disk mounts... ===<"
  - grep -v -e '^[[:space:]]*$' /etc/fstab | sed 's|^|  /etc/fstab  |'
  - mount -fav 2> /dev/null
  # ClamAV update using freshclam. Note that the systemd unit must not be running when we update manually
  - echo ">=== Update ClamAV... ===<"
  - systemctl stop clamav-freshclam
  - while true; do if [ "$(systemctl status clamav-freshclam | grep "Active" | cut -d ':' -f 2 | grep "inactive")" ]; then break; else sleep 1; fi; done
  - sed -i 's/^MaxDirectoryRecursion .*/MaxDirectoryRecursion 0/' /etc/clamav/clamd.conf
  - rm -f /var/lib/clamav/daily.cvd 2> /dev/null
  - freshclam
  # ClamAV: allow unlimited recursion when scanning; enable daemon, scan on access and periodic scan
  - echo ">=== Enabling clamav services... ===<"
  - systemctl enable clamav-daemon
  - systemctl enable clamav-clamonacc
  - systemctl enable clamav-clamdscan.timer
  - systemctl enable clamav-freshclam

final_message: "System setup through cloud-init is finished. Configuration took $UPTIME seconds"

# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: true
