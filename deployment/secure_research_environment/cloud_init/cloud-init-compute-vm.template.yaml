#cloud-config
package_upgrade: false

write_files:
  - path: "/etc/xrdp/startwm.sh"
    permissions: "0755"
    content: |
      #!/bin/sh
      echo "LANG=en_GB.UTF-8" > /etc/default/locale
      . /etc/default/locale
      # Start xfce4
      startxfce4
  - path: "/etc/ldap.secret"
    permissions: "0600"
    content: |
      <dsvm-ldap-password>
  - path: "/installation/.smbcredentials"
    owner: root:root
    permissions: "0600"
    content: |
      username=<datamount-username>
      password=<datamount-password>
  - path: "/etc/ldap.conf"
    content: |
      # The distinguished name of the search base.
      base <shm-ldap-base-dn>

      # Restrict users to those in the security group of this SRE
      filter <sre-ldap-user-filter>

      # Another way to specify your LDAP server is to provide a URI
      uri ldap://<shm-dc-hostname-upper>.<shm-fqdn-lower>:389

      # The LDAP version to use (defaults to 3
      # if supported by client library)
      ldap_version 3

      # The distinguished name to bind to the server with
      # if the effective user ID is root. Password is
      # stored in /etc/ldap.secret (mode 600)
      rootbinddn <sre-ldap-bind-dn>

      # Do not hash the password at all; presume
      # the directory server will do it, if
      # necessary. This is the default.
      pam_password md5
  - path: "/etc/krb5.conf"
    content: |
      [libdefaults]
        default_realm = <shm-fqdn-upper>
        rdns = false
        # The following krb5.conf variables are only for MIT Kerberos.
        krb4_config = /etc/krb.conf
        krb4_realms = /etc/krb.realms
        kdc_timesync = 1
        ccache_type = 4
        forwardable = true
        proxiable = true
        # The following libdefaults parameters are only for Heimdal Kerberos.
        v4_instance_resolve = false
        v4_name_convert = {
          host = {
            rcmd = host
            ftp = ftp
          }
          plain = {
            something = something-else
          }
        }
        fcc-mit-ticketflags = true

      [realms]
        <shm-fqdn-upper> = {
          kdc = <shm-dc-hostname-upper>.<shm-fqdn-upper>:88
          admin_server = <shm-dc-hostname-upper>.<shm-fqdn-upper>
          default_domain = <shm-fqdn-upper>
        }

      [domain_realm]
        .<shm-fqdn-lower> = <shm-fqdn-upper>
        <shm-fqdn-lower> = <shm-fqdn-upper>

      [login]
        krb4_convert = true
        krb4_get_tickets = false
  - path: "/active_directory_step01_pre"
    content: |
      #!/bin/sh
      # Set up Active Directory
      # -----------------------
      echo ">=== Setting up Active Directory... ===<"
      # Check sssd status
      echo "Check sssd status"
      systemctl status sssd
      # Add information to hosts file
      echo "Setting hostname"
      echo "<dsvm-hostname>" > /etc/hostname
      echo ">=== /etc/hostname ===<"
      cat /etc/hostname
      echo ">=== end of /etc/hostname ===<"
      echo "Adding <dsvm-hostname> [$(hostname -i)] to /etc/hosts"
      HOST_INFORMATION="$(hostname -i) <dsvm-hostname> <dsvm-hostname>.<shm-fqdn-lower>"
      sed -i "/127.0.0.1/ a $HOST_INFORMATION" /etc/hosts
      echo ">=== /etc/hosts ===<"
      cat /etc/hosts
      echo ">=== end of /etc/hosts ===<"
      # Set timezone
      echo "Setting timezone"
      timedatectl set-timezone Europe/London
      # Create a default sssd.conf file
      echo "Creating sssd config"
      cp /usr/share/doc/sssd-common/examples/sssd-example.conf /etc/sssd/sssd.conf
      echo ">=== /etc/sssd/sssd.conf ===<"
      cat /etc/sssd/sssd.conf
      echo ">=== end of /etc/sssd/sssd.conf ===<"
      chmod 0600 /etc/sssd/sssd.conf
      # Edit LDAP config
      echo "Checking LDAP config"
      # mv /ldap.conf /etc/ldap.conf
      echo ">=== /etc/ldap.conf ===<"
      cat /etc/ldap.conf
      echo ">=== end of /etc/ldap.conf ===<"
      # Edit Kerberos config
      echo "Checking Kerberos config"
      # mv /krb5.conf /etc/krb5.conf
      echo ">=== /etc/krb5.conf ===<"
      cat /etc/krb5.conf
      echo ">=== end of /etc/krb5.conf ===<"
  - path: "/active_directory_step02_realm_join"
    content: |
      # Join the VM to the domain
      echo "Joining VM to the domain"
      cat /etc/ldap.secret | realm join --verbose -U <dsvm-ldap-username> <shm-fqdn-lower> --install=/
  - path: "/active_directory_step03_update_sssd"
    content: |
      # Check the sssd.conf file
      echo "Updating sssd settings"
      sed -i -E 's/(use_fully_qualified_names = ).*/\1False/' /etc/sssd/sssd.conf
      sed -i -E 's|(fallback_homedir = ).*|\1/home/%u|' /etc/sssd/sssd.conf
      sed -i -E 's/(access_provider = ).*/\1simple/' /etc/sssd/sssd.conf
      echo ">=== /etc/sssd/sssd.conf ===<"
      cat /etc/sssd/sssd.conf
      echo ">=== end of /etc/sssd/sssd.conf ===<"
      # Restart the sssd daemon
      echo "Restarting sssd"
      systemctl restart sssd
  - path: "/active_directory_step04_update_pam"
    content: |
      # Edit the pam session configuration file
      echo "Updating PAM configuration"
      PAM_INFORMATION="session required|pam_mkhomedir.so|skel=/etc/skel/|umask=0022"
      sed "/pam_unix/ a $PAM_INFORMATION" /etc/pam.d/common-session | tr "|" "\t" > /tmp/common-session
      mv /tmp/common-session /etc/pam.d/common-session
      echo ">=== /etc/pam.d/common-session ===<"
      cat /etc/pam.d/common-session
      echo ">=== end of /etc/pam.d/common-session ===<"
  - path: "/disk_setup"
    owner: root:root
    permisions: '0500'
    content: |
      #!/bin/sh
      # Create home folder and grant appropriate access
      echo ">=== Create home folder using home disk... ===<"
      # This matches the order of disk in Add_DSVM.ps1 which is passed to a loop in Deployments.psm1
      DEVICE=$(readlink -f /dev/disk/azure/scsi1/lun1)
      PARTITION="${DEVICE}1"
      # Get the partition table format of the disk using parted, then grep and sed to get the string after "Partition Table :"
      PARTITION_TABLE=$(parted $DEVICE print | egrep '^Partition Table:' | sed -e 's/Partition Table: //')
      # If the device has no partition table, create one, partition the disk and make an ext4 file system
      if [ "$PARTITION_TABLE" = "unknown" ]; then
        parted $DEVICE mklabel gpt
        parted $DEVICE mkpart primary ext4 0% 100%
        parted $DEVICE print
        sleep 5
        mkfs -t ext4 $PARTITION
      fi
      # Create an entry for the home partition in fstab
      UUID=$(blkid | grep "$PARTITION" | cut -d'"' -f2)
      echo "UUID=${UUID}\t/home\text4\tdefaults,nofail\t0\t2" >> /etc/fstab
      tail -n 1 /etc/fstab
      # Create scratch folder and grant all users access
      echo ">=== Create local scratch folder using data disk... ===<"
      # This matches the order of disk in Add_DSVM.ps1 which is passed to a loop in Deployments.psm1
      DEVICE=$(readlink -f /dev/disk/azure/scsi1/lun2)
      PARTITION="${DEVICE}1"
      # Get the partition table format of the disk using parted, then grep and sed to get the string after "Partition Table :"
      PARTITION_TABLE=$(parted $DEVICE print | egrep '^Partition Table:' | sed -e 's/Partition Table: //')
      # If the device has no partition table, create one, partition the disk and make an ext4 file system
      if [ "$PARTITION_TABLE" = "unknown" ]; then
        parted $DEVICE mklabel gpt
        parted $DEVICE mkpart primary ext4 0% 100%
        parted $DEVICE print
        sleep 5
        mkfs -t ext4 $PARTITION
      fi
      mkdir -p /scratch
      mount $PARTITION /scratch
      chmod go+rw /scratch
      UUID=$(blkid | grep "$PARTITION" | cut -d'"' -f2)
      echo "UUID=${UUID}\t/scratch\text4\tdefaults,nofail\t0\t2" >> /etc/fstab
      echo ">=== /etc/fstab ===<"
      cat /etc/fstab
      echo ">=== end of /etc/fstab ===<"
  - path: "/etc/pip.conf"
    content: |
      # Add the PyPI mirror to our global settings
      [global]
      index = <mirror-url-pypi>
      index-url = <mirror-url-pypi>/simple
      trusted-host = <mirror-host-pypi>
  - path: "/etc/R/Rprofile.site"
    content: |
      ## Set Rprofile.site to the appropriate CRAN mirror
      local({
          r <- getOption("repos")
          r["CRAN"] <- "<mirror-url-cran>"
          options(repos = r)
      })
  - path: "/etc/skel/.xsession"
    owner: root:root
    content: xfce4-session
  - path: "/usr/share/xrdp/xrdp_custom_logo.bmp"
    owner: root:root
    encoding: gz+b64
    permissions: "0644"
    content: <xrdpCustomLogoEncoded>
  - path: "/etc/skel/.config/JetBrains/PYCHARM_VERSION/options/project.default.xml"
    permissions: "0400"
    content: |
      <project.default.xml>
  - path: "/etc/skel/.config/JetBrains/PYCHARM_VERSION/options/jdk.table.xml"
    permissions: "0400"
    content: |
      <jdk.table.xml>


runcmd:
  - echo ">=== Beginning DSVM configuration... ===<"
  # PyCharm configuration
  - PY27_VERSION=$(/opt/anaconda/envs/py27/bin/python --version 2>&1 | cut -d' ' -f2)
  - PY36_VERSION=$(/opt/anaconda/envs/py36/bin/python --version 2>&1 | cut -d' ' -f2)
  - PY37_VERSION=$(/opt/anaconda/envs/py37/bin/python --version 2>&1 | cut -d' ' -f2)
  - sed -i "s/PY27_VERSION/$PY27_VERSION/g" /etc/skel/.config/JetBrains/PYCHARM_VERSION/options/jdk.table.xml
  - sed -i "s/PY36_VERSION/$PY36_VERSION/g" /etc/skel/.config/JetBrains/PYCHARM_VERSION/options/jdk.table.xml
  - sed -i "s/PY37_VERSION/$PY37_VERSION/g" /etc/skel/.config/JetBrains/PYCHARM_VERSION/options/jdk.table.xml
  - PYCHARM_VERSION=$(grep "dataDirectoryName" /snap/pycharm-community/current/product-info.json | cut -d':' -f2 | xargs | sed "s/,//")
  - mv /etc/skel/.config/JetBrains/PYCHARM_VERSION /etc/skel/.config/JetBrains/${PYCHARM_VERSION}
  # Set default keyboard to a generic 105 key en-GB
  - sed -i 's|XKBMODEL=.*|XKBMODEL=\"pc105\"|g' /etc/default/keyboard
  - sed -i 's|XKBLAYOUT=.*|XKBLAYOUT=\"gb\"|g' /etc/default/keyboard
  - cat /etc/default/keyboard
  # Disable light-locker which can cause irritating error messages
  - echo ">=== Disabling screen lock... ===<"
  - echo "Hidden=true" >> /etc/xdg/autostart/light-locker.desktop
  - cat /etc/xdg/autostart/light-locker.desktop
  # Set default terminal for xfce
  - echo ">=== Setting default xfce terminal... ===<"
  - sed -i -E 's/(TerminalEmulator=).*/\1xfce4-terminal/' /etc/xdg/xfce4/helpers.rc
  # Remove "default config" prompt
  - cp /etc/xdg/xfce4/panel/default.xml /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml
  # Ensure that sssd is running and enabled at startup
  - echo ">=== Restarting sssd service... ===<"
  - systemctl restart sssd
  - systemctl status sssd
  - systemctl enable sssd
  # Ensure that xrdp is running and enabled at startup
  - echo ">=== Restart xrdp service... ===<"
  - systemctl restart xrdp
  - systemctl status xrdp
  - systemctl enable xrdp
  - systemctl enable xrdp-sesman
  # Override xrdp defaults
  - sed -i "s|dark_grey=808080|dark_grey=ffffff|g" /etc/xrdp/xrdp.ini                       # title bar (unselected)
  - sed -i "s|blue=009cb5|blue=ffffff|g" /etc/xrdp/xrdp.ini                                 # title bar (selected)
  - sed -i "s|ls_top_window_bg_color=.*|ls_top_window_bg_color=000000|g" /etc/xrdp/xrdp.ini # teal background
  - sed -i "s|ls_bg_color=.*|ls_bg_color=ffffff|g" /etc/xrdp/xrdp.ini                       # grey box
  - sed -i "s|.*ls_title=.*|ls_title=\.|g" /etc/xrdp/xrdp.ini                               # window title
  # Change logo
  - sed -i "s|ls_logo_filename=.*|ls_logo_filename=/usr/share/xrdp/xrdp_custom_logo.bmp|g" /etc/xrdp/xrdp.ini
  # Centre buttons
  - sed -i "s|ls_btn_ok_x_pos=.*|ls_btn_ok_x_pos=85|g" /etc/xrdp/xrdp.ini
  - sed -i "s|ls_btn_cancel_x_pos=.*|ls_btn_cancel_x_pos=180|g" /etc/xrdp/xrdp.ini
  # Remove all sessions except Xorg
  - sed -i '/\[X11rdp\]/,/^$/d' /etc/xrdp/xrdp.ini           # delete lines from [X11rdp] until next empty line
  - sed -i '/\[Xvnc\]/,/^$/d' /etc/xrdp/xrdp.ini             # delete lines from [Xvnc] until next empty line
  - sed -i '/\[console\]/,/^$/d' /etc/xrdp/xrdp.ini          # delete lines from [console] until next empty line
  - sed -i '/\[vnc-any\]/,/^$/d' /etc/xrdp/xrdp.ini          # delete lines from [vnc-any] until next empty line
  - sed -i '/\[sesman-any\]/,/^$/d' /etc/xrdp/xrdp.ini       # delete lines from [sesman-any] until next empty line
  - sed -i '/\[neutrinordp-any\]/,/^$/d' /etc/xrdp/xrdp.ini  # delete lines from [neutrinordp-any] until next empty line
  # Add execute permission to the Active Directory set up scripts
  - echo ">=== Initialise Active Directory configuration... ===<"
  - chmod +x /active_directory_step01_pre
  - chmod +x /active_directory_step02_realm_join
  - chmod +x /active_directory_step03_update_sssd
  - chmod +x /active_directory_step04_update_pam
  # Run the Active Directory set up scripts
  - echo ">=== Run Active Directory setup scripts... ===<"
  - /active_directory_step01_pre
  - /active_directory_step02_realm_join
  - /active_directory_step03_update_sssd
  - /active_directory_step04_update_pam
  # Remove the Active Directory set up scripts (as these contain secrets and are world readable
  - echo ">=== Delete Active Directory setup scripts... ===<"
  - rm /active_directory_step01_pre
  - rm /active_directory_step02_realm_join
  - rm /active_directory_step03_update_sssd
  - rm /active_directory_step04_update_pam
  # Update resolv.conf to point to the correct location
  - echo ">=== Update resolv.conf to point to the correct file... ===<"
  - rm /etc/resolv.conf
  - sed -i -e "s/^#DNS=.*/DNS=/" -e "s/^#FallbackDNS=.*/FallbackDNS=/" -e "s/^#Domains=.*/Domains=<shm-fqdn-lower>/" /etc/systemd/resolved.conf
  - ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
  - ls -alh /etc/resolv.conf
  # Mount ingress data folder with read-only local access [remote access is controlled by SMB rules]
  - echo ">=== Mount data folder using SMB... ===<"
  - mkdir -p /data
  - echo "//<dataserver-hostname>/Ingress\t/data\tcifs\tcredentials=/installation/.smbcredentials\t0\t0" >> /etc/fstab
  - tail -n 1 /etc/fstab
  # Mount shared folder with full local access [remote access is controlled by SMB rules]
  - echo ">=== Mount output folder using SMB... ===<"
  - mkdir -p /shared
  - echo "//<dataserver-hostname>/Shared\t/shared\tcifs\tcredentials=/installation/.smbcredentials,file_mode=0777,dir_mode=0777\t0\t0" >> /etc/fstab
  - tail -n 1 /etc/fstab
  # Mount egress data folder with full local access [remote access is controlled by SMB rules]
  - echo ">=== Mount output folder using SMB... ===<"
  - mkdir -p /output
  - echo "//<dataserver-hostname>/Egress\t/output\tcifs\tcredentials=/installation/.smbcredentials,file_mode=0777,dir_mode=0777\t0\t0" >> /etc/fstab
  - tail -n 1 /etc/fstab
  # Configure disks
  - echo ">=== Mount and configure disks... ===<"
  - /disk_setup
  - rm /disk_setup


# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: True
