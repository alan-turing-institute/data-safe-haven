#cloud-config
package_update: true
package_upgrade: true

# Install LDAP tools for debugging LDAP issues
packages:
  - git
  - apt-transport-https
  - ca-certificates
  - curl
  - gitlab-ce
  - gnupg
  - ldap-utils
  - openssh-server
  - postfix

apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Add repositories
  sources:
    gitlab.list:
      source: "deb https://packages.gitlab.com/gitlab/gitlab-ce/ubuntu bionic main"
      keyid: 3F01618A51312F3F

write_files:
  # Gitlab server config
  - path: /etc/gitlab/gitlab.rb
    permissions: "0600"
    content: |
      external_url 'http://<gitlab-external-ip>'
      gitlab_rails['ldap_enabled'] = true
      gitlab_rails['ldap_servers'] = YAML.load <<-'EOS'
        main: # 'main' is the GitLab 'provider ID' of this LDAP server
          label: 'LDAP'
          host: '<gitlab-external-rb-host>'
          port: 389
          uid: 'sAMAccountName'
          method: 'plain' # "tls" or "ssl" or "plain"
          bind_dn: '<gitlab-external-rb-bind-dn>'
          password: '<gitlab-external-rb-pw>'
          active_directory: true
          allow_username_or_email_login: true
          block_auto_created_users: false
          base: '<gitlab-external-rb-base>'
          user_filter: '<gitlab-external-rb-user-filter>'
      attributes:
        username: ['uid', 'userid', 'sAMAccountName']
        email:    ['mail', 'email', 'userPrincipalName']
        name:       'cn'
        first_name: 'givenName'
        last_name:  'sn'
      EOS
      git_data_dirs({ "default" => { "path" => "/datadrive/gitdata" } })
  # Secrets for Gitlab Internal and External Access
  - path: "/home/<sre-admin-username>/.secrets/gitlab-config.json"
    permissions: "0600"
    content: |
      {
        "GITLAB_INTERNAL": {
          "ip_address": "<gitlab-internal-ip>",
          "username": "<gitlab-internal-username>",
          "user_email": "<gitlab-internal-username>@<gitlab-internal-login-domain>",
          "api_token": "<gitlab-internal-api-token>"
        },
        "GITLAB_EXTERNAL": {
          "ip_address": "<gitlab-external-ip>",
          "username": "<gitlab-external-username>",
          "user_email": "<gitlab-external-username>@<gitlab-external-login-domain>",
          "api_token": "<gitlab-external-api-token>"
        }
      }
  # Script for creating projects and merge requests on gitlab-external
  - path: "/home/<sre-admin-username>/zipfile_to_gitlab_project.py"
    permissions: "0755"
    content: |
      <zipfile_to_gitlab_project.py>
  # Script for monitoring and accepting approval merge requests
  - path: "/home/<sre-admin-username>/check_merge_requests.py"
    permissions: "0755"
    content: |
      <check_merge_requests.py>
  # Populate SSH known hosts with keys from gitlab internal
  - path: "/home/<sre-admin-username>/.ssh/known_hosts"
    permissions: "0600"
    content: |
      <gitlab-internal-ssh-keys>

runcmd:
  # --------------------------------
  # SETUP GITLAB EXTERNAL SERVER
  # --------------------------------
  # Configure server
  - echo "Configuring gitlab external server"
  - echo "<gitlab-external-ip> <gitlab-external-hostname> <gitlab-external-fqdn>" >> /etc/hosts
  - echo "Europe/London" > /etc/timezone
  - dpkg-reconfigure -f noninteractive tzdata
  # Set up the data disk
  - echo "Setting up data disk..."
  - DEVICE=$(readlink -f /dev/disk/azure/scsi1/lun0)
  - parted ${DEVICE} mklabel gpt
  - parted ${DEVICE} mkpart primary ext4 0% 100%
  - parted ${DEVICE} print
  - sleep 5
  - mkfs -t ext4 ${DEVICE}1
  - mkdir -p /datadrive
  - mount ${DEVICE}1 /datadrive
  - UUID=$(blkid | grep "${DEVICE}1" | cut -d'"' -f2)
  - echo "UUID=${UUID}\t/datadrive\text4\tdefaults,nofail\t1\t2" >> /etc/fstab
  - mkdir -p /datadrive/gitdata
  # Enable custom GitLab settings and run an initial configuration
  - echo "Running initial configuration"
  - gitlab-ctl reconfigure
  # Set root password and don't prompt for it to be reset when web app first loaded
  - |
    echo "user = User.find_by(username: 'root');user.password=user.password_confirmation='<gitlab-external-root-password>';user.password_automatically_set=false;user.save!;exit;" | gitlab-rails console -e production
  # Turn off user account creation
  - |
    gitlab-rails runner "ApplicationSetting.last.update_attributes(signup_enabled: false)"
  # Restrict login to SHM domain (must be done AFTER GitLab update)
  - |
    gitlab-rails runner "ApplicationSetting.last.update_attributes(domain_whitelist: ['<gitlab-external-login-domain>'])"
  # Create user for ingressing external git repos
  - |
    echo "user = User.create(:username => '<gitlab-external-username>', :password => '<gitlab-external-password>', :password_confirmation => '<gitlab-external-password>', :email =>'<gitlab-external-username>@<gitlab-external-login-domain>', :skip_confirmation => true, :name => '<gitlab-external-username>');user.save!;exit;" | gitlab-rails console -e production
  # Create a API token for the ingress user created above
  - |
    echo "user = User.find_by(username: '<gitlab-external-username>');user.personal_access_tokens.create(name: 'apitoken', token_digest: Gitlab::CryptoHelper.sha256('$(cat '/home/<sre-admin-username>/.secrets/gitlab-external-api-token')'), impersonation: false, scopes: [:api]);exit;" | gitlab-rails console -e production
  # Reload GitLab configuration and restart GitLab
  - gitlab-ctl reconfigure
  - gitlab-ctl restart
  # --------------------------------
  # CREATE SSH KEY
  # --------------------------------
  - |
    mkdir -p /home/<sre-admin-username>/.ssh
    ssh-keygen -t ed25519 -C 'gitlab' -N '' -f /home/<sre-admin-username>/.ssh/id_ed25519
  # --------------------------------
  # REGISTER SSH KEY WITH GITLAB INTERNAL
  # --------------------------------
  - |
    chown <sre-admin-username>:<sre-admin-username> "/home/<sre-admin-username>/.secrets/gitlab-internal-api-token";
    chown <sre-admin-username>:<sre-admin-username> "/home/<sre-admin-username>/.secrets/gitlab-internal-ip-address";
    chown <sre-admin-username>:<sre-admin-username> "/home/<sre-admin-username>/.secrets/gitlab-internal-username";
    chown <sre-admin-username>:<sre-admin-username> "/home/<sre-admin-username>/.secrets/gitlab-internal-user-email";
  # Create SSH key for gitlab internal access, add gitlab internal to known hosts
  - |
    key=$(cat /home/<sre-admin-username>/.ssh/id_ed25519.pub);
    curl --header "Authorization: Bearer $(cat '/home/<sre-admin-username>/.secrets/gitlab-internal-api-token')" --header 'Content-Type:application/json' --data "{\"key\": \"$key\", \"title\": \"InternalAPIUser\"}" <gitlab-internal-ip>/api/v4/user/keys;
    ssh-keyscan -H <gitlab-internal-ip> >> /home/<sre-admin-username>/.ssh/known_hosts;
    chown <sre-admin-username>:<sre-admin-username> "/home/<sre-admin-username>/.ssh/known_hosts"

  # --------------------------------
  # WAIT FOR GITLAB EXTERNAL HEALTH CHECK
  # --------------------------------
  - |
    attempt_counter=0
    max_attempts=60
    echo
    echo "Waiting for GitLab OK health check"
    until [ "$(curl -s localhost/-/health)" = "GitLab OK" ]
    do
      if [ ${attempt_counter} -eq ${max_attempts} ];then
        echo
        echo "FAILED: Max GitLab attempts reached. Exiting."
        exit 1
      fi
      printf "."
      attempt_counter=$((attempt_counter+1))
      sleep 10
    done
    echo
  # --------------------------------
  # SETUP ACCESS TO GITLAB EXTERNAL
  # --------------------------------
  - echo "Configuring access to gitlab external"
  # Create SSH key for gitlab external access
  - |
    key=$(cat /home/<sre-admin-username>/.ssh/id_ed25519.pub);
    curl --header "Authorization: Bearer $(cat '/home/<sre-admin-username>/.secrets/gitlab-external-api-token')" --header 'Content-Type:application/json' --data "{\"key\": \"$key\", \"title\": \"ExternalAPIUser\"}" <gitlab-external-ip>/api/v4/user/keys;
  #  Get local ssh host keys, add them to known hosts under the gitlab external ip
  - |    
    echo "<gitlab-external-ip> $(cat /etc/ssh/ssh_host_rsa_key.pub | cut -d " " -f -2)" >> /home/<sre-admin-username>/.ssh/known_hosts
    echo "<gitlab-external-ip> $(cat /etc/ssh/ssh_host_ed25519_key.pub | cut -d " " -f -2)" >> /home/<sre-admin-username>/.ssh/known_hosts
    echo "<gitlab-external-ip> $(cat /etc/ssh/ssh_host_ecdsa_key.pub | cut -d " " -f -2)" >> /home/<sre-admin-username>/.ssh/known_hosts
  # Create groups for storing unapproved and approval repos
  - |
    curl --header "Authorization: Bearer $(cat '/home/<sre-admin-username>/.secrets/gitlab-external-api-token')" --data "name=approval&path=approval&visibility=internal" <gitlab-external-ip>/api/v4/groups;
    curl --header "Authorization: Bearer $(cat '/home/<sre-admin-username>/.secrets/gitlab-external-api-token')" --data "name=unapproved&path=unapproved&visibility=internal" <gitlab-external-ip>/api/v4/groups

  # --------------------------------
  # GIT SETUP
  # --------------------------------
  - |
    echo "Configuring git"
    HOME=/home/<sre-admin-username> git config --global user.name '<gitlab-internal-username>'
    HOME=/home/<sre-admin-username> git config --global user.email '<gitlab-internal-username>@<gitlab-internal-login-domain>'
  # --------------------------------
  # ADD CRONTAB ENTRIES FOR GITLAB SCRIPTS
  # --------------------------------
  - echo "*** Adding zipfile_to_gitlab_project.py to crontab ***"
  - echo "*/10 * * * * <sre-admin-username> /home/<sre-admin-username>/zipfile_to_gitlab_project.py" >> /etc/crontab
  - echo "*** Adding check_merge_requests.py to crontab ***"
  - echo "5,15,25,35,45,55 * * * * <sre-admin-username> /home/<sre-admin-username>/check_merge_requests.py" >> /etc/crontab
  # --------------------------------
  # GIVE <sre-admin-username> OWNERSHIP OF THEIR HOME DIRECTORY
  # --------------------------------
  - chown -R <sre-admin-username>:<sre-admin-username> "/home/<sre-admin-username>"

# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: true
