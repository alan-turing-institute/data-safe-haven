# LDAP-synchronized groups/users are identified through their
# membership of ldap_user and ldap_group. These two roles must
# therefore be manually defined before running pg_ldap_sync.

# Connection parameters to LDAP server
# see also: http://net-ldap.rubyforge.org/Net/LDAP.html#method-c-new
# Ideally we would use SSL (as below) but this is not currently working
# port: 636
# encryption:
#   method: :simple_tls
ldap_connection:
  host: {{shm.dc.ip}}
  port: 389
  auth:
    method: :simple
    username: {{guacamole.ldapSearchUserDn}}
    password: {{{guacamole.ldapSearchUserPassword}}}

# Search parameters for LDAP users which should be synchronized
ldap_users:
  base: {{shm.domain.ous.researchUsers.path}}
  # LDAP filter defining which LDAP users should be synchronized
  filter: {{{guacamole.ldapUserFilter}}}
  # this attribute is used as PG role name. It is 'sAMAccountName@domain'
  name_attribute: userPrincipalName
  # lowercase name for use as PG role name
  lowercase_name: false

# Search parameters for LDAP groups which should be synchronized
ldap_groups:
  base: {{shm.domain.ous.securityGroups.path}}
  # LDAP filter defining which LDAP groups should be synchronized
  filter: {{{guacamole.ldapGroupFilter}}}
  # this attribute is used as PG role name
  name_attribute: cn
  # lowercase name for use as PG role name
  lowercase_name: false
  # this attribute must reference to all member DN's of the given group
  member_attribute: member

# Connection parameters to PostgreSQL server
# see also: http://rubydoc.info/gems/pg/PG/Connection#initialize-instance_method
pg_connection:
  host: localhost
  dbname: guacamole
  user: guacamole
  password: {{{guacamole.internalDbPassword}}}

pg_users:
  # Filter for identifying LDAP generated users in the database.
  # This is the WHERE-condition to "SELECT rolname, oid FROM pg_roles"
  filter: oid IN (SELECT pam.member FROM pg_auth_members pam JOIN pg_roles pr ON pr.oid=pam.roleid WHERE pr.rolname='ldap_users')
  # Options for CREATE RULE statements
  create_options: LOGIN IN ROLE ldap_users

pg_groups:
  # Filter for identifying LDAP generated groups in the database.
  # This is the WHERE-condition to "SELECT rolname, oid FROM pg_roles"
  filter: oid IN (SELECT pam.member FROM pg_auth_members pam JOIN pg_roles pr ON pr.oid=pam.roleid WHERE pr.rolname='ldap_groups')
  # Options for CREATE RULE statements
  create_options: NOLOGIN IN ROLE ldap_groups
  grant_options:
