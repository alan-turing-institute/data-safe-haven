#cloud-config

# Create files
write_files:
  - path: "/opt/cocalc/docker-compose.yml"
    permissions: "0400"
    content: |
      {{cocalc_docker_compose.yml}}

  - path: "/opt/cocalc/pip.conf"
    permissions: "0444"
    content: |
      # Add the PyPI mirror to our global settings
      [global]
      index = {{mirror-index-pypi}}
      index-url = {{mirror-index-url-pypi}}
      trusted-host = {{mirror-host-pypi}}

  - path: "/opt/cocalc/Rprofile.site"
    permissions: "0444"
    content: |
      ## Set Rprofile.site to the appropriate CRAN mirror
      local({
          r <- getOption("repos")
          r["CRAN"] <- "{{mirror-url-cran}}"
          options(repos = r)
      })


# Set locale and timezone
locale: en_GB.UTF-8
timezone: {{timezone}}

# Set the NTP server
# By default we use Google's NTP servers which are incompatible with other servers due to leap-second smearing
ntp:
  pools:
    - {{ntp-server}}

# Configure apt repositories
apt:
  preserve_sources_list: true
  sources:
    gitlab.list:
      source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88 # Docker Release (CE deb) <docker@docker.com>

# Install necessary apt packages
packages:
  - docker-ce
  - docker-compose
package_update: true
package_upgrade: true

# We know that exactly one data disk will be attached to this VM and it will be attached as lun1
disk_setup:
  /dev/disk/azure/scsi1/lun1:
    table_type: gpt
    layout: True
    overwrite: True
fs_setup:
  - device: /dev/disk/azure/scsi1/lun1
    partition: 1
    filesystem: ext4
mounts:
  - [/dev/disk/azure/scsi1/lun1-part1, /data, ext4, "defaults,nofail"]

# Set hostname
fqdn: {{cocalc-fqdn}}
hostname: {{cocalc-fqdn}}

# Add the SRE admin (default) and cocalcdaemon users
users:
  - default
  - name: cocalcdaemon
    lock_passwd: True # Lock the password to disable password login
    sudo: False       # This user will not have sudo privileges


# Run other commands
runcmd:
  # Suppress apt prompts and warning messages
  - DEBIAN_FRONTEND=noninteractive
  - export DEBIAN_FRONTEND

  # Clean up installation
  - echo ">=== Cleaning up apt-get packages... ===<"
  - apt-get -y autoremove
  - apt-get clean

  # Check server settings
  - echo ">=== Hostname ===<"
  - hostnamectl
  - echo ">=== Date/time ===<"
  - timedatectl

  # Configuring attached disks
  - echo ">=== Configuring attached disks... ===<"
  - mkdir -p /data/cocalc
  - ls -alh /data/

  # Ensure that Docker is running
  - echo ">=== Current Docker status... ===<"
  - systemctl start docker
  - systemctl enable docker
  - systemctl status docker
  - docker --version
  - docker-compose --version

  # Set up the cocalcdaemon user
  - echo "Configuring cocalcdaemon user..."
  - groupadd docker 2> /dev/null
  - usermod -aG docker cocalcdaemon
  - newgrp docker
  - chown -R cocalcdaemon:cocalcdaemon /opt/cocalc
  - ls -alh /opt/cocalc

  # Deploy CoCalc using Docker
  - echo "Deploying CoCalc with Docker..."
  - su cocalcdaemon -c "docker-compose -f /opt/cocalc/docker-compose.yml up -d"
  # Wait for deployment to finish
  - |
    while true; do
      STATUS=$(docker-compose -f /opt/cocalc/docker-compose.yml logs cocalc | grep "API listen on /run/docker.sock")
      if [ "$STATUS" != "" ]; then
        break
      fi
      sleep 5
    done
  - docker-compose -f /opt/cocalc/docker-compose.yml logs
  # Print a final message
  - echo "Deploying CoCalc with Docker is complete:"
  - docker-compose -f /opt/cocalc/docker-compose.yml ps

# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: True
