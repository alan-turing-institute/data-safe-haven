#cloud-config


# Update package database on first boot (ie. run `apt-get update`)
package_update: true


# Upgrade installed packages on first boot (ie. run `apt-get upgrade`)
package_upgrade: true


apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Add repositories
  sources:
    atom.list:
      source: "deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main"
      keyid: 0A0FAB860D48560332EFB581B75442BBDE9E3B09

    microsoft-azure-cli.list:
      source: "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ bionic main"
      keyid: BC528686B50D79E339D3721CEB3E94ADBE1229CF

    microsoft-prod.list:
      source: "deb [arch=amd64] https://packages.microsoft.com/ubuntu/18.04/prod bionic main"
      keyid: BC528686B50D79E339D3721CEB3E94ADBE1229CF

    microsoft-vscode.list:
      source: "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
      keyid: BC528686B50D79E339D3721CEB3E94ADBE1229CF

    postgresql.list:
      source: "deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main"
      keyid: B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

    mono-project.list:
      source: "deb https://download.mono-project.com/repo/ubuntu stable-bionic main"
      keyid: 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF

    nvidia-cuda.list:
      source: "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /"
      keyid: AE09FE4BBD223A84B2CCFCE3F60F4B3D7FA2AF80

    nvidia-ml.list:
      source: "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /"
      keyid: AE09FE4BBD223A84B2CCFCE3F60F4B3D7FA2AF80

    rproject-cran35.list:
      source: "deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/"
      keyid: E298A3A825C0D65DFD57CBB651716619E084DAB9


write_files:
  - path: "/etc/jaas.conf"
    owner: root:root
    permissions: "0444"
    content: |
      pgjdbc {
      com.sun.security.auth.module.Krb5LoginModule required
          useTicketCache=true
          debug=true
          renewTGT=true
          doNotPrompt=true;
      };
  # NB. the string is the commit this release was made from
  - path: "/installation/azuredatastudio.debinfo"
    permissions: "0400"
    content: |
      hash: adac4b0e2efda32f538039d9d2e7f66e2898f3244e21da4b8dacf34d7b0e5415
      version: 1.19.0
      debfile: azuredatastudio-linux-|VERSION|.deb
      remote: https://sqlopsbuilds.azureedge.net/stable/4095037f2578c23033867e611e82c13de114ca5a/|DEBFILE|
  - path: "/installation/dbeaver.debinfo"
    permissions: "0400"
    content: |
      hash: 1689bc56b6e7fe9c4e9b725013877a0616512ffd5846ea3c8378f7da6e827939
      version: 7.1.2
      debfile: dbeaver-ce_|VERSION|_amd64.deb
      remote: https://dbeaver.io/files/|VERSION|/|DEBFILE|
  - path: "/installation/rstudio.debinfo"
    permissions: "0400"
    content: |
      hash: 411ab50019aa8a08db99b092769b4a552c39f78ce518f9cdb81bda92e98a6f79
      version: 1.3.959
      debfile: rstudio-|VERSION|-amd64.deb
      remote: https://download1.rstudio.org/desktop/bionic/amd64/|DEBFILE|
  - path: "/installation/julia.tarinfo"
    permissions: "0400"
    content: |
      hash: d77311be23260710e89700d0b1113eecf421d6cf31a9cebad3f6bdd606165c28
      version_major: 1.4
      version: |VERSION_MAJOR|.2
      tarfile: julia-|VERSION|-linux-x86_64.tar.gz
      remote: https://julialang-s3.julialang.org/bin/linux/x64/|VERSION_MAJOR|/|TARFILE|
  - path: "/installation/spark.tarinfo"
    permissions: "0400"
    content: |
      hash: 3c9bef2d002d706b5331415884d3f890ecfdd7c6a692f36ed7a981ad120b2482
      version: 3.0.0
      tarfile: spark-|VERSION|-bin-hadoop3.2.tgz
      remote: https://downloads.apache.org/spark/spark-|VERSION|/|TARFILE|
  - path: "/installation/analyse_build.py"
    permissions: "0755"
    content: |
      <analyse_build.py>
  - path: "/installation/get_package_constraint.py"
    permissions: "0500"
    content: |
      <get_package_constraint.py>
  - path: "/installation/install_python_version.sh"
    permissions: "0500"
    content: |
      <install_python_version.sh>
  - path: "/installation/dbeaver_drivers_config.xml"
    permissions: "0444"
    content: |
      <dbeaver_drivers_config.xml>
  - path: "/installation/deprovision.log"
    permissions: "0600"
    content: |
      # Deprovisioning log
  - path: "/installation/deprovision_vm.sh"
    permissions: "0500"
    content: |
      <deprovision_vm.sh>
  - path: "/installation/download_and_install_deb.sh"
    permissions: "0500"
    content: |
      <download_and_install_deb.sh>
  - path: "/installation/download_and_install_tar.sh"
    permissions: "0500"
    content: |
      <download_and_install_tar.sh>
  - path: "/installation/python-requirements-py27.txt"
    permissions: "0444"
    content: |
      <python-requirements-py27.txt>
  - path: "/installation/python-requirements-py36.txt"
    permissions: "0444"
    content: |
      <python-requirements-py36.txt>
  - path: "/installation/python-requirements-py37.txt"
    permissions: "0444"
    content: |
      <python-requirements-py37.txt>
  - path: "/installation/performance_log.csv"
    permissions: "0644"
    content: |
      # Performance log
  - path: "/installation/python-pyproject-template.toml"
    permissions: "0400"
    content: |
      [tool.poetry]
      name = "<PYTHON_ENV_NAME>"
      version = "1.0.0"
      description = "<PYTHON_ENV_NAME>"
      authors = ["ROOT <root@localhost>"]

      [tool.poetry.dependencies]
      python = "<PYTHON_VERSION>"
  - path: "/usr/share/applications/jupyter-notebook.desktop"
    owner: "root:root"
    permissions: "0644"
    content: |
      [Desktop Entry]
      Version=1.0
      Type=Application
      Name=Jupyter Notebook
      Exec=jupyter notebook
      Icon=/usr/lib/python3/dist-packages/notebook/static/base/images/favicon.ico
      Categories=Utility;TextEditor;Development;IDE;
  - path: "/usr/share/applications/pycharm.desktop"
    owner: "root:root"
    permissions: "0644"
    content: |
      [Desktop Entry]
      Version=1.0
      Type=Application
      Name=PyCharm
      Exec=/snap/bin/pycharm-community
      Icon=/snap/pycharm-community/current/meta/gui/icon.png
      Categories=Utility;TextEditor;Development;IDE;


# List of packages to install with apt-get
packages:
  - <apt packages>


# List of commands to run using `/bin/sh`
# When changing these lines try to ensure that everything is checked as close as possible to the point when it is installed/configured.
# If any of the installation/configuration checks fail then end the cloud-init process immediately by calling `exit 1`.
# This allows us to (i) not waste time completing a build once a step has failed and (ii) easily tell when and why a build failed using the analyse_build.py script.
runcmd:
  # Log system performance during the installation and record it each minute
  - nohup dstat --mem --cpu --time --output /installation/performance_log.csv 60 > /dev/null &

  # Suppress apt prompts and warning messages
  - echo "Suppressing apt prompts"
  - export DEBIAN_FRONTEND=noninteractive

  # Microsoft ODBC tools
  - echo "Installing Microsoft ODBC tools"
  - ACCEPT_EULA=Y apt-get install -y msodbcsql17 mssql-tools
  - PATH=$PATH:/opt/mssql-tools/bin
  - if [ "$(which sqlcmd)" = "" ]; then echo "Could not install Microsoft ODBC tools!"; exit 1; fi

  # NVidia setup (following https://www.tensorflow.org/install/gpu)
  - echo ">=== $(date +%s) Installing NVidia requirements for tensorflow ===<"
  - apt-get install -y --no-install-recommends nvidia-driver-450
  - apt-get install -y --no-install-recommends cuda-10-1 libcudnn7=7.6.4.38-1+cuda10.1 libcudnn7-dev=7.6.4.38-1+cuda10.1
  - apt-get install -y --no-install-recommends libnvinfer6=6.0.1-1+cuda10.1 libnvinfer-dev=6.0.1-1+cuda10.1 libnvinfer-plugin6=6.0.1-1+cuda10.1

  # Clean up unneeded apt packages
  # Remove xscreensaver (unnecessary)
  # Remove netcat (potential security issue) [Note this will remove the 'ubuntu-minimal' metapackage but does not remove any other real packages]
  # Autoremove unnecessary packages
  - echo "Cleaning up unneeded packages"
  - apt-get remove -y netcat-openbsd xscreensaver
  - apt-get autoremove -y --purge
  - apt-get clean
  - sleep 60  # prevent 'dpkg frontend is locked by another process' errors

  # Install additional deb/snap packages
  - echo ">=== $(date +%s) Installing deb/snap packages ===<"

  # Azure Data Studio
  - echo "Installing Azure Data Studio"
  - /installation/download_and_install_deb.sh azuredatastudio
  - if [ "$(which azuredatastudio)" = "" ]; then echo "Could not install Azure Data Studio!"; exit 1; fi

  # DBeaver and drivers
  - echo "Installing DBeaver"
  - /installation/download_and_install_deb.sh dbeaver
  - if [ "$(which dbeaver)" = "" ]; then echo "Could not install DBeaver!"; exit 1; fi
  # Install drivers from maven
  - DBEAVER_DRIVER_DIR="/usr/share/dbeaver/drivers/maven/maven-central"
  - MSSQL_JDBC_VERSION="8.2.2.jre8"
  - PGJDBC_VERSION="1.1.6"
  - POSTGIS_JDBC_VERSION="2.5.0"
  - POSTGRESQL_VERSION="42.2.9"
  # Note that the filenames specified here have to be kept synchronised with the names in the dbeaver_drivers_config.xml file.
  # Adding new drivers therefore involves changing both this file and the XML file.
  - mkdir -p ${DBEAVER_DRIVER_DIR}/com.microsoft.sqlserver/
  - wget -nv https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${MSSQL_JDBC_VERSION}/mssql-jdbc-${MSSQL_JDBC_VERSION}.jar -P ${DBEAVER_DRIVER_DIR}/com.microsoft.sqlserver/
  - wget -nv https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${MSSQL_JDBC_VERSION}/mssql-jdbc-${MSSQL_JDBC_VERSION}.pom -P ${DBEAVER_DRIVER_DIR}/com.microsoft.sqlserver/
  - mkdir -p ${DBEAVER_DRIVER_DIR}/org.postgresql/
  - wget -nv https://repo1.maven.org/maven2/org/postgresql/pgjdbc-core-parent/${PGJDBC_VERSION}/pgjdbc-core-parent-${PGJDBC_VERSION}.pom -P ${DBEAVER_DRIVER_DIR}/org.postgresql/
  - wget -nv https://repo1.maven.org/maven2/org/postgresql/pgjdbc-versions/${PGJDBC_VERSION}/pgjdbc-versions-${PGJDBC_VERSION}.pom -P ${DBEAVER_DRIVER_DIR}/org.postgresql/
  - wget -nv https://repo1.maven.org/maven2/org/postgresql/postgresql/${POSTGRESQL_VERSION}/postgresql-${POSTGRESQL_VERSION}.jar -P ${DBEAVER_DRIVER_DIR}/org.postgresql/
  - wget -nv https://repo1.maven.org/maven2/org/postgresql/postgresql/${POSTGRESQL_VERSION}/postgresql-${POSTGRESQL_VERSION}.pom -P ${DBEAVER_DRIVER_DIR}/org.postgresql/
  - mkdir -p ${DBEAVER_DRIVER_DIR}/net.postgis/
  - wget -nv https://repo1.maven.org/maven2/net/postgis/postgis-jdbc/${POSTGIS_JDBC_VERSION}/postgis-jdbc-${POSTGIS_JDBC_VERSION}.jar -P ${DBEAVER_DRIVER_DIR}/net.postgis/
  - wget -nv https://repo1.maven.org/maven2/net/postgis/postgis-jdbc/${POSTGIS_JDBC_VERSION}/postgis-jdbc-${POSTGIS_JDBC_VERSION}.pom -P ${DBEAVER_DRIVER_DIR}/net.postgis/
  # Expand driver configuration template
  - sed -i "s/|POSTGRESQL_VERSION|/${POSTGRESQL_VERSION}/g" /installation/dbeaver_drivers_config.xml
  - sed -i "s/|MSSQL_JDBC_VERSION|/${MSSQL_JDBC_VERSION}/g" /installation/dbeaver_drivers_config.xml
  - sed -i "s/|POSTGIS_JDBC_VERSION|/${POSTGIS_JDBC_VERSION}/g" /installation/dbeaver_drivers_config.xml
  - mv /installation/dbeaver_drivers_config.xml /usr/share/dbeaver/drivers-config.xml
  - echo "-Ddbeaver.drivers.configuration-file=/usr/share/dbeaver/drivers-config.xml" >> /usr/share/dbeaver/dbeaver.ini
  - echo "-Djava.security.auth.login.config=/etc/jaas.conf" >> /usr/share/dbeaver/dbeaver.ini
  - ls -alh ${DBEAVER_DRIVER_DIR}/*

  # Install PyCharm
  - echo "Installing PyCharm"
  - snap install pycharm-community --classic
  - PATH=$PATH:/snap/bin
  - if [ "$(which pycharm-community)" = "" ]; then echo "Could not install PyCharm!"; exit 1; fi

  # Install RStudio,
  - echo "Installing RStudio"
  - /installation/download_and_install_deb.sh rstudio
  - if [ "$(which rstudio)" = "" ]; then echo "Could not install RStudio!"; exit 1; fi

  # Install spark
  - echo "Installing spark"
  - /installation/download_and_install_tar.sh spark
  - SPARK_BASE_DIR=$(ls -d /opt/spark/spark*)
  - PATH=$PATH:${SPARK_BASE_DIR}/bin
  - if [ "$(which spark-shell)" = "" ]; then echo "Could not install Spark!"; exit 1; fi

  # Manually update clamav signature database
  - echo ">=== $(date +%s) Updating clamav database ===<"
  # The systemd unit must be disabled in order to update using freshclam
  # We re-enable it after the update has finished
  - systemctl stop clamav-freshclam
  - while true; do if [ "$(systemctl status clamav-freshclam | grep "Active" | cut -d ':' -f 2 | grep "inactive")" ]; then break; else sleep 1; fi; done
  - freshclam
  - systemctl start clamav-freshclam
  - while true; do if [ "$(systemctl status clamav-freshclam | grep "Active" | cut -d ':' -f 2 | grep "running")" ]; then break; else sleep 1; fi; done
  - systemctl status clamav-freshclam
  # As clamav-unofficial-sigs has not been updated since 2014, we need the following fixes:
  # Calls to SecuriteInfo fail with 'curl: (6) Could not resolve host: clamav.securiteinfo.com'
  # - disable this source as suggested here: https://bugs.launchpad.net/ubuntu/+source/clamav-unofficial-sigs/+bug/1643172
  - sed -i '/si_dbs=/,/^"$/d' /usr/share/clamav-unofficial-sigs/conf.d/00-clamav-unofficial-sigs.conf
  - sed -i '/si_update_hours/d' /usr/share/clamav-unofficial-sigs/conf.d/00-clamav-unofficial-sigs.conf
  # Calls to MalwarePatrol faile with 'MalwarePatrol mbl.ndb database integrity tested BAD - SKIPPING'
  # - disable this source as suggested here: https://www.mail-archive.com/pkg-clamav-devel@lists.alioth.debian.org/msg05014.html
  - sed -i '/mbl_dbs=/,/^"$/d' /usr/share/clamav-unofficial-sigs/conf.d/00-clamav-unofficial-sigs.conf
  # Update unofficial signatures (strangely this gives no output in the cloud-init logs)
  - clamav-unofficial-sigs 2>&1
  - clamav-unofficial-sigs -i

  # Install pyenv and pyenv-virtualenv globally
  - echo ">=== $(date +%s) Installing pyenv ===<"
  - export PYENV_ROOT="/opt/pyenv"
  - rm -rf $PYENV_ROOT 2> /dev/null
  - PATH="$PYENV_ROOT/bin:$PATH" # NB. pyenv needs to be at the beginning of the path so that it can override other python versions
  - curl https://pyenv.run | bash

  # Install python versions
  - /installation/install_python_version.sh py27 || exit 1
  - /installation/install_python_version.sh py36 || exit 1
  - /installation/install_python_version.sh py37 || exit 1
  - echo "Installed python versions"
  - rm -rf /root/.cache /tmp/*  # clean up cached files from the python builds
  - du --si -d 1 /opt/pyenv/versions

  # Add pyenv to global settings
  - echo "Configuring pyenv global settings"
  - echo '# Set up pyenv' >> /etc/bash.bashrc
  - echo "export PYENV_ROOT=\"$PYENV_ROOT\"" >> /etc/bash.bashrc
  - echo "PATH=\"$PYENV_ROOT/bin:$PATH\"" >> /etc/bash.bashrc
  - echo 'eval "$(pyenv init - --no-rehash)"' >> /etc/bash.bashrc
  - echo 'eval "$(pyenv virtualenv-init -)"' >> /etc/bash.bashrc
  - echo "pyenv global $(ls /opt/pyenv/versions/ | grep 3.7)" >> /etc/bash.bashrc
  # Make the global environment setting file live in each user's home directory
  - sed -i 's|PYENV_VERSION_FILE=.*|PYENV_VERSION_FILE=${HOME}/.pyenv_version|' /opt/pyenv/libexec/pyenv-global

  # Set 'other' permissions on the pyenv directory to be equal to that of the owner
  # We then remove write access so that site-packages can be used but not altered
  - echo "Updating ${PYENV_ROOT} permissions"
  - chmod -R o=u,o-w ${PYENV_ROOT}

  # Install any missing R packages - approximately 1 hr
  - echo ">=== $(date +%s) Configuring R environment ===<"
  - <R package list>
  # Install packages that are not directly installable under 3.6.3 using 'remotes'
  - Rscript -e "options('Ncpus' = parallel::detectCores()); print('Installing remotes'); install.packages('remotes', quiet = TRUE)"
  # NB. rPython cannot be installed this way as it does not compile
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='XML'; print(paste('Installing', pkg)); install_version(pkg, '3.99-0.3', quiet = TRUE)"
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='mnormt'; print(paste('Installing', pkg)); install_version(pkg, '1.5-7', quiet = TRUE)"
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='DPpackage'; print(paste('Installing', pkg)); install_version(pkg, '1.1-7', quiet = TRUE)"
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='mlr'; print(paste('Installing', pkg)); install_version(pkg, '2.17.0', quiet = TRUE)"
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='pomp'; print(paste('Installing', pkg)); install_version(pkg, '2.8', quiet = TRUE)"
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='Scale'; print(paste('Installing', pkg)); install_version(pkg, '1.0.4', quiet = TRUE)"
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='tmap'; print(paste('Installing', pkg)); install_version(pkg, '3.0', quiet = TRUE)"
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='topicmodels'; print(paste('Installing', pkg)); install_version(pkg, '0.2-9', quiet = TRUE)"
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='traj'; print(paste('Installing', pkg)); install_version(pkg, '1.1', quiet = TRUE)"
  # Install R packages from custom repos
  - Rscript -e "pkg='INLA'; print(paste('Installing', pkg)); install.packages(pkg, repos='https://inla.r-inla-download.org/R/testing', dep=TRUE, quiet = TRUE)"
  # BiocManager 3.10 (1.30.9) is required for compatibility with R 3.6
  - Rscript -e "options('Ncpus' = parallel::detectCores()); library(remotes); pkg='BiocManager'; print(paste('Installing', pkg)); install_version(pkg, '1.30.9', quiet = TRUE)"
  # CRAN
  - echo "Already installed CRAN packages:"
  - Rscript -e "requested_packages <- c($CRAN_PACKAGES); existing_packages <- requested_packages[(requested_packages %in% installed.packages()[,'Package'])]; print(paste(existing_packages, collapse=', '));"
  - echo "Installing remaining CRAN packages..."
  - Rscript -e "options('Ncpus' = parallel::detectCores()); requested_packages <- c($CRAN_PACKAGES); remaining_packages <- requested_packages[!(requested_packages %in% installed.packages()[,'Package'])]; if(length(remaining_packages)) { print(paste('Installing', paste(remaining_packages, collapse=', '))); install.packages(remaining_packages, quiet = TRUE) } else { print('No packages left to install') }"
  # Bioconductor
  - echo "Already installed BioConductor packages:"
  - Rscript -e "requested_packages <- c($BIOCONDUCTOR_PACKAGES); existing_packages <- requested_packages[(requested_packages %in% installed.packages()[,'Package'])]; print(paste(existing_packages, collapse=', '));"
  - echo "Installing remaining BioConductor packages..."
  - Rscript -e "options('Ncpus' = parallel::detectCores()); requested_packages <- c($BIOCONDUCTOR_PACKAGES); remaining_packages <- requested_packages[!(requested_packages %in% installed.packages()[,'Package'])]; if(length(remaining_packages)) { print(paste('Installing', paste(remaining_packages, collapse=', '))); BiocManager::install(remaining_packages, quiet = TRUE) } else { print('No packages left to install') }"
  # Ensure that all users will pick up system R when running RStudio
  - echo "export RSTUDIO_WHICH_R=/usr/bin/R" >> /etc/bash.bashrc
  # Check for missing packages
  - MISSING_CRAN_PACKAGES=$(Rscript -e "requested_packages <- c($CRAN_PACKAGES); missing_packages <- requested_packages[!(requested_packages %in% installed.packages()[,'Package'])]; print(missing_packages)" | sed "s/character(0)//")
  - if [ "$MISSING_CRAN_PACKAGES" ]; then echo "Could not install CRAN packages\n$MISSING_CRAN_PACKAGES"; exit 1; fi
  - MISSING_BIOCONDUCTOR_PACKAGES=$(Rscript -e "requested_packages <- c($BIOCONDUCTOR_PACKAGES); missing_packages <- requested_packages[!(requested_packages %in% installed.packages()[,'Package'])]; print(missing_packages)" | sed "s/character(0)//")
  - if [ "$MISSING_BIOCONDUCTOR_PACKAGES" ]; then echo "Could not install Bioconductor packages\n$MISSING_BIOCONDUCTOR_PACKAGES"; exit 1; fi

  # Install Julia and packages - approximately 20 minutes
  - echo ">=== $(date +%s) Installing Julia and packages ===<"
  - /installation/download_and_install_tar.sh julia
  - JULIA_BASE_DIR=$(ls -d /opt/julia/julia*)
  - PATH=$PATH:${JULIA_BASE_DIR}/bin
  - if [ "$(which julia)" = "" ]; then echo "Could not install Julia!"; exit 1; fi
  - <Julia package list>
  - export JULIA_DEPOT_PATH="${JULIA_BASE_DIR}/depot/"
  - mkdir -p ${JULIA_DEPOT_PATH}
  - sed -i "/DEPOT_PATH/d" ${JULIA_BASE_DIR}/etc/julia/startup.jl
  - echo "push!(DEPOT_PATH, \"${JULIA_DEPOT_PATH}\")" >> ${JULIA_BASE_DIR}/etc/julia/startup.jl
  # Set some Julia environment variables before installing/building the packages
  # Julia Tensorflow currently works best with python 2.7 or 3.6
  - export JULIA_COPY_STACKS=1
  - export PYTHON="$(ls /opt/pyenv/versions/3.6*/bin/python)"
  - export TF_USE_GPU=1
  - julia -e "using Pkg; Pkg.add($JULIA_PACKAGES); for package in $JULIA_PACKAGES; Pkg.build(package); @eval using \$(Symbol(package)); end"
  # Allow users to read the global Julia depot
  - chmod -R o=u,o-w ${JULIA_BASE_DIR}/depot/
  - echo "export JULIA_COPY_STACKS=${JULIA_COPY_STACKS}" >> /etc/bash.bashrc
  - echo "export PYTHON="${PYTHON}"" >> /etc/bash.bashrc
  - echo "export TF_USE_GPU=${TF_USE_GPU}" >> /etc/bash.bashrc
  # Ensure that the first thing on each user's DEPOT_PATH will be the usual default (~/.julia) followed by the global depot
  - echo "export JULIA_DEPOT_PATH=~/.julia:${JULIA_DEPOT_PATH}" >> /etc/bash.bashrc
  # Check for missing packages
  - MISSING_JULIA_PACKAGES=$(julia -e "for package in $JULIA_PACKAGES; try; abspath(joinpath(dirname(Base.find_package(package)))); catch e; println(package); end; end;")
  - if [ "$MISSING_JULIA_PACKAGES" ]; then echo "Could not install Julia packages - $MISSING_JULIA_PACKAGES"; exit 1; fi

  # Configure jupyter kernels
  - echo ">=== $(date +%s) Configuring Jupyter with Julia, Python and R kernels ===<"
  # Mark the system kernel as not to be used
  - |
    sed -i "s|\"display_name\":.*Python.*|\"display_name\": \"System Python - do not use\",|" /usr/share/jupyter/kernels/python3/kernel.json
  # Add the Julia kernel
  - mv /root/.local/share/jupyter/kernels/julia-1.4 /usr/share/jupyter/kernels/
  # Add the python kernels
  - jupyter kernelspec install /opt/pyenv/versions/*/share/jupyter/kernels/py27 || exit 1
  - jupyter kernelspec install /opt/pyenv/versions/*/share/jupyter/kernels/py36 || exit 1
  - jupyter kernelspec install /opt/pyenv/versions/*/share/jupyter/kernels/py37 || exit 1
  # Add the R kernel
  - R_VERSION=$(R --version | head -n 1 | cut -d ' ' -f3)
  - ln -s /usr/local/lib/R/site-library/IRkernel/kernelspec /usr/local/lib/R/site-library/IRkernel/R${R_VERSION}
  - |
    sed -i "s|\"display_name\":.*\R.*|\"display_name\": \"R ${R_VERSION}\",|" /usr/local/lib/R/site-library/IRkernel/kernelspec/kernel.json
  - jupyter kernelspec install /usr/local/lib/R/site-library/IRkernel/R${R_VERSION} || exit 1
  # Log the output kernels
  - echo "Checking installed Jupyter kernels"
  - jupyter kernelspec list

  # Clean up any build artifacts
  - rm -rf /root/* /tmp/*

  # Check for successful installations
  - echo ">=== $(date +%s) Checking environment configuration ===<"
  # Set PATH to the current working version which contains all installed packages
  # Also add ~/.local/bin and ~/bin so that any executables that are installed there (eg. by pip) can be used
  # We do this at the end of the script so that
  # - we know this is the PATH that worked when we checked for each package
  # - we only get one entry in /etc/bash.bashrc rather than several with "last-one-wins"
  - PATH="$PATH:\$HOME/.local/bin:\$HOME/bin"
  - echo "Setting PATH to '${PATH}'"
  - if [ ! "$(grep ^PATH= /etc/bash.bashrc)" ]; then echo "PATH=" >> /etc/bash.bashrc; fi
  - sed -i "s|^PATH=.*|export PATH=${PATH}|" /etc/bash.bashrc
  # Programming languages
  - echo "\n... Programming languages:\n"
  - if [ "$(which dotnet)" ]; then echo "\n\n*dotnet*\n\n$(which dotnet)\n$(dotnet --version)"; else echo "ERROR dotnet not found!"; exit 1; fi
  - if [ "$(which g++)" ]; then echo "\n\n*g++*\n\n$(which g++)\n$(g++ --version)"; else echo "ERRO g++ not found!"; exit 1; fi
  - if [ "$(which gcc)" ]; then echo "\n\n*gcc*\n\n$(which gcc)\n$(gcc --version)"; else echo "ERROR gcc not found!"; exit 1; fi
  - if [ "$(which gfortran)" ]; then echo "\n\n*gfortran*\n\n$(which gfortran)\n$(gfortran --version)"; else echo "ERROR gfortran not found!"; exit 1; fi
  - if [ "$(which java)" ]; then echo "\n\n*java*\n\n$(which java)\n$(java -version)"; else echo "ERROR java not found!"; exit 1; fi
  - if [ "$(which julia)" ]; then echo "\n\n*julia*\n\n$(which julia)\n$(julia --version)"; else echo "ERROR Julia not found!"; exit 1; fi
  - if [ "$(which R)" ]; then echo "\n\n*R*\n\n$(which R)\n$(R --version)"; else echo "ERROR R not found!"; exit 1; fi
  - if [ "$(which scala)" ]; then echo "\n\n*scala*\n\n$(which scala)\n$(scalac -version)"; else echo "ERROR scala not found!"; exit 1; fi
  - if [ "$(which spark-shell)" ]; then echo "\n\n*R*\n\n$(which spark-shell)\n$(spark-shell --version)"; else echo "ERROR spark-shell not found!"; exit 1; fi
  # Editors
  - echo "\n... Editors/IDEs:\n"
  - if [ "$(which atom)" ]; then echo "\n\n*atom*\n\n$(which atom)\n$(dpkg -s atom | grep '^Version:')"; else echo "ERROR atom not found!"; exit 1; fi
  - if [ "$(which code)" ]; then echo "\n\n*code*\n\n$(which code)\n$(code --version)"; else echo "ERROR code not found!"; exit 1; fi
  - if [ "$(which emacs)" ]; then echo "\n\n*emacs*\n\n$(which emacs)\n$(emacs --version)"; else echo "ERROR emacs not found!"; exit 1; fi
  - if [ "$(which nano)" ]; then echo "\n\n*nano*\n\n$(which nano)\n$(nano --version)"; else echo "ERROR nano not found!"; exit 1; fi
  - if [ "$(which pycharm-community)" ]; then echo "\n\n*pycharm*\n\n$(which pycharm-community)\n$(snap list pycharm-community)"; else echo "ERROR PyCharm not found!"; exit 1; fi
  - if [ "$(which rstudio)" ]; then echo "\n\n*RStudio*\n\n$(which rstudio)\n$(dpkg -s rstudio | grep '^Version:')"; else echo "ERROR RStudio not found!"; fi
  - if [ "$(which vim)" ]; then echo "\n\n*vim*\n\n$(which vim)\n$(vim --version | grep '^VIM')"; else echo "ERROR vim not found!"; exit 1; fi
  # Presentation tools
  - echo "\n... Presentation tools:\n"
  - if [ "$(which latex)" ]; then echo "\n\n*latex*\n\n$(which latex)\n$(latex --version | grep 'TeX Live')"; else echo "ERROR latex not found!"; exit 1; fi
  - if [ "$(which libreoffice)" ]; then echo "\n\n*libreoffice*\n\n$(which libreoffice)\n$(libreoffice --version)"; else echo "ERROR libreoffice not found!"; exit 1; fi
  - if [ "$(which pdflatex)" ]; then echo "\n\n*pdflatex*\n\n$(which pdflatex)\n$(pdflatex --version | grep 'TeX Live')"; else echo "ERROR pdflatex not found!"; exit 1; fi
  - if [ "$(which xelatex)" ]; then echo "\n\n*xelatex*\n\n$(which xelatex)\n$(xelatex --version | grep 'TeX Live')"; else echo "ERROR xelatex not found!"; exit 1; fi
  # Development tools
  - echo "\n... Development tools:\n"
  - if [ "$(which azuredatastudio)" ]; then echo "\n\n*azuredatastudio*\n\n$(which azuredatastudio)"; else echo "ERROR azuredatastudio not found!"; exit 1; fi
  - if [ "$(which bash)" ]; then echo "\n\n*bash*\n\n$(which bash)\n$(bash --version | grep 'version')"; else echo "ERROR bash not found!"; exit 1; fi
  - if [ "$(which dbeaver)" ]; then echo "\n\n*DBeaver*\n\n$(which dbeaver)\n$(dpkg -s dbeaver-ce | grep '^Version:')"; else echo "ERROR DBeaver not found!"; exit 1; fi
  - if [ "$(which docker)" ]; then echo "\n\n*Docker*\n\n$(which docker)\n$(docker --version)\n$(docker image ls)"; else echo "ERROR Docker not found!"; exit 1; fi
  - if [ "$(which firefox)" ]; then echo "\n\n*Firefox*\n\n$(which firefox)\n$(firefox --version)"; else echo "ERROR Firefox not found!"; exit 1; fi
  - if [ "$(which git)" ]; then echo "\n\n*git*\n\n$(which git)\n$(git --version)"; else echo "ERROR git not found!"; exit 1; fi
  - if [ "$(which htop)" ]; then echo "\n\n*htop*\n\n$(which htop)\n$(htop --version)"; else echo "ERROR htop not found!"; exit 1; fi
  - if [ "$(which nvidia-smi)" ]; then echo "\n\n*nvidia-smi*\n\n$(which nvidia-smi)\n$(modinfo nvidia | grep '^version:')"; else echo "nvidia-ERROR smi not found!"; exit 1; fi
  - if [ "$(which psql)" ]; then echo "\n\n*psql*\n\n$(which psql)\n$(psql --version)"; else echo "ERROR psql not found!"; exit 1; fi
  - if [ "$(which sqlcmd)" ]; then echo "\n\n*sqlcmd*\n\n$(which sqlcmd)\n$(sqlcmd -? | grep Version)"; else echo "ERROR sqlcmd not found!"; exit 1; fi
  # Data Science tools
  - if [ "$(which weka)" ]; then echo "\n\n*weka*\n\n$(which weka)\n$(weka -c weka.core.Version | head -n 1)"; else echo "ERROR weka not found!"; exit 1; fi


final_message:
  "System setup through cloud-init is finished. Configuration took $UPTIME seconds"


# Shutdown at the end of the job to save on running costs
power_state:
  mode: poweroff
  message: "Shutting down after cloud-init is finished"
  timeout: 30
  condition: True
