#cloud-config

apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Update apt database on first boot (ie run apt-get update)
  update: true

# We know that exactly one data disk will be attached to this VM and it will therefore use lun1 as lun0 is the OS disk
disk_setup:
  /dev/disk/azure/scsi1/lun1:
    table_type: gpt
    layout: True
    overwrite: True

fs_setup:
  - device: /dev/disk/azure/scsi1/lun1
    partition: 1
    filesystem: ext4

mounts:
  - [/dev/disk/azure/scsi1/lun1-part1, /datadrive, ext4, "defaults,nofail"]

# List of packages to install with apt-get
packages:
  - openssh-server
  - rsync

# Initialise an empty file `internal_mirror_ip_addresses.txt`
# When internal mirrors are deployed, they add their IP address to this file
# Whenever `push_to_internal_mirrors.sh` is run, it will try to rsync to all of the IP addresses in the file
# NB. Since write_files runs before user creation, only pre-existing users can be assigned as file owners
write_files:
  - path: "/home/mirrordaemon/internal_mirror_ip_addresses.txt"
    owner: root:root
    permissions: "0600"
  - path: "/home/mirrordaemon/package_whitelist.txt"
    owner: root:root
    permissions: "0600"
    content: |
      # PACKAGE_WHITELIST
  - path: "/home/mirrordaemon/push_to_internal_mirrors.sh"
    owner: root:root
    permissions: "0700"
    content: |
      #! /bin/bash
      # rsync: make the destination look like the source
      #   -p          preserve permissions
      #   -r          recursive
      #   -t          preserve times
      #   -l          follow symlinks
      #   -v          verbose
      #   --delete    delete files present in destination but not source
      #   --progress  show progress
      echo "$(date +'%Y-%m-%d %H:%M:%S'): Found $(cat /home/mirrordaemon/internal_mirror_ip_addresses.txt | wc -l | xargs) internal mirrors"  | tee -a /datadrive/mirrordaemon/mirrorserver.log
      for IP_ADDRESS in $(cat /home/mirrordaemon/internal_mirror_ip_addresses.txt); do
          echo "$(date +'%Y-%m-%d %H:%M:%S'): Started pushing to the internal mirror at ${IP_ADDRESS}..." | tee -a /datadrive/mirrordaemon/mirrorserver.log
          START_TIME=$(date +%s)
          rsync -prtlv --delete --progress /datadrive/mirrordaemon/www/cran/* mirrordaemon@${IP_ADDRESS}:/datadrive/mirrordaemon/www/cran 2>&1 | tee /datadrive/mirrordaemon/push_to_internal_mirrors.log
          ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
          echo "$(date +'%Y-%m-%d %H:%M:%S'): Finished pushing to the internal mirror at $IP_ADDRESS after $ELAPSED" | tee -a /datadrive/mirrordaemon/mirrorserver.log
      done
  - path: "/home/mirrordaemon/pull_from_internet.sh"
    owner: root:root
    permissions: "0700"
    content: |
      #! /bin/bash
      TIER=<tier>
      echo "$(date +'%Y-%m-%d %H:%M:%S'): Started pulling from the internet..." | tee -a /datadrive/mirrordaemon/mirrorserver.log
      START_TIME=$(date +%s)
      if [ "$TIER" == "2" ]; then
          # Download all files
          rsync -rtlvz --delete --delete-excluded --exclude=bin/windows/* --exclude=bin/macos*/* --progress cran.r-project.org::CRAN /datadrive/mirrordaemon/www/cran 2>&1 | tee /datadrive/mirrordaemon/pull_from_internet.log
      else
          # Download all whitelisted packages (which might be none)
          WHITELISTED_PACKAGES=$(grep -v "^#" /home/mirrordaemon/package_whitelist.txt)
          echo "" > /datadrive/mirrordaemon/pull_from_internet.log
          # Note that there is a server-side timeout (30s) which causes problems for complicated commands
          # By splitting into subdirectories we reduce the complexity of each rsync command
          # Additionally, using an initial '/' anchors the search path at the directory root, speeding up calculation time
          # Directory: /bin
          INCLUDE_DIRS=""
          for RPACKAGE in $WHITELISTED_PACKAGES; do
              INCLUDE_DIRS="${INCLUDE_DIRS} --include=/linux/ubuntu/*/${RPACKAGE}_*"
          done
          mkdir -p /datadrive/mirrordaemon/www/cran/bin
          rsync -rtlvz --delete --delete-excluded --prune-empty-dirs --progress --include='*/' --include='/*' $INCLUDE_DIRS --exclude='*' cran.r-project.org::CRAN/bin/ /datadrive/mirrordaemon/www/cran/bin 2>&1 | tee -a /datadrive/mirrordaemon/pull_from_internet.log
          # Directory: /src
          INCLUDE_DIRS="--include=/contrib/PACKAGES"
          for RPACKAGE in $WHITELISTED_PACKAGES; do
              INCLUDE_DIRS="${INCLUDE_DIRS} --include=/contrib/${RPACKAGE}_* --include=/contrib/Archive/${RPACKAGE}/*"
          done
          mkdir -p /datadrive/mirrordaemon/www/cran/src
          rsync -rtlvz --delete --delete-excluded --prune-empty-dirs --progress --include='*/' --include='/*' $INCLUDE_DIRS --exclude='*' cran.r-project.org::CRAN/src/ /datadrive/mirrordaemon/www/cran/src 2>&1 | tee -a /datadrive/mirrordaemon/pull_from_internet.log
          # Directory: /web
          INCLUDE_DIRS="--include=/packages/index.html"
          for RPACKAGE in $WHITELISTED_PACKAGES; do
              INCLUDE_DIRS="${INCLUDE_DIRS} --include=/checks/check_results_${RPACKAGE}.html --include=/dcmeta/${RPACKAGE}.xml --include=/packages/${RPACKAGE}/***"
          done
          mkdir -p /datadrive/mirrordaemon/www/cran/web
          rsync -rtlvz --delete --delete-excluded --prune-empty-dirs --progress --include='*/' --include='/*' $INCLUDE_DIRS --exclude='*' cran.r-project.org::CRAN/web/ /datadrive/mirrordaemon/www/cran/web 2>&1 | tee -a /datadrive/mirrordaemon/pull_from_internet.log
          # Top-level directory. Note that delete must *NOT* be enabled here.
          rsync -rtlvz --prune-empty-dirs --progress --exclude '*/*' cran.r-project.org::CRAN /datadrive/mirrordaemon/www/cran 2>&1 | tee -a /datadrive/mirrordaemon/pull_from_internet.log
      fi
      ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
      echo "$(date +'%Y-%m-%d %H:%M:%S'): Finished pulling from the internet after $ELAPSED" | tee -a /datadrive/mirrordaemon/mirrorserver.log
  - path: "/home/mirrordaemon/pull_then_push.sh"
    owner: root:root
    permissions: "0700"
    content: |
      #! /bin/bash
      source ~mirrordaemon/pull_from_internet.sh
      source ~mirrordaemon/push_to_internal_mirrors.sh

# Add the SHM admin (default) and mirrordaemon users
# lock_passwd: Lock the password to disable password login
users:
  - default
  - name: mirrordaemon
    lock_passwd: True
    sudo: False

# Set locale and timezone
locale: en_GB.UTF-8
timezone: <timezone>

# Use Google's NTP servers
# Note that these are incompatible with other servers due to leap-second smearing
ntp:
  pool:
    - time.google.com

runcmd:
  # Suppress apt prompts and warning messages
  - export DEBIAN_FRONTEND=noninteractive

  # Upgrade installation then clean up
  - echo "*** Upgrade and clean up apt-get packages... ***"
  - apt-get -y upgrade
  - apt-get clean

  # Set up and partition data disk
  - echo "*** Setting up local disk... ***"
  - mkdir -p /datadrive/mirrordaemon/www/cran
  - ls -alh /datadrive

  # Schedule regular mirroring jobs
  - echo "*** Adding internal update (rsync) job to crontab (2am each day)... ***"
  - echo "0 2 * * * mirrordaemon ~mirrordaemon/push_to_internal_mirrors.sh" >> /etc/crontab
  - tail -n 1 /etc/crontab
  - echo "*** Adding external update (rsync from CRAN) job to crontab (every 6 hours)... ***"
  - echo "0 */6 * * * mirrordaemon ~mirrordaemon/pull_from_internet.sh" >> /etc/crontab
  - tail -n 1 /etc/crontab

  # Schedule update job on each boot
  - echo "*** Schedule both mirror update jobs for each boot... ***"
  - echo "@reboot mirrordaemon ~mirrordaemon/pull_then_push.sh" >> /etc/crontab
  - tail -n 1 /etc/crontab

  # Fix permissions so that mirrordaemon owns its files
  - mkdir -p /home/mirrordaemon/.ssh
  - chown -R mirrordaemon:mirrordaemon /datadrive/mirrordaemon
  - chown -R mirrordaemon:mirrordaemon ~mirrordaemon
  - ls -alh ~mirrordaemon

  # Generate SSH keys for connecting to the internal mirror
  - echo "*** Generating SSH keys for connecting to the internal mirror"
  - cd /home/mirrordaemon/.ssh
  - sudo -u mirrordaemon ssh-keygen -t rsa -b 2048 -N '' -f id_rsa
  - ls -alh ~mirrordaemon/.ssh

  # Print out some diagnostic information
  - echo "*** This server is currently aware of internal mirrors at the following locations ***"
  - cat /home/mirrordaemon/internal_mirror_ip_addresses.txt


# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: True
