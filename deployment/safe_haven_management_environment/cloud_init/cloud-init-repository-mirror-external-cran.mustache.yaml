#cloud-config

# We know that exactly one data disk will be attached to this VM and we currently start numbering from lun1
disk_setup:
  /dev/disk/azure/scsi1/lun1:
    table_type: gpt
    layout: true
    overwrite: true

fs_setup:
  - device: /dev/disk/azure/scsi1/lun1
    partition: 1
    filesystem: ext4

mounts:
  - [/dev/disk/azure/scsi1/lun1-part1, /datadrive, ext4, "defaults,nofail"]

# Configure apt repositories
apt:
  preserve_sources_list: true

# List of packages to install with apt-get
packages:
  - auditd
  - clamav
  - clamav-base
  - clamav-daemon
  - clamav-freshclam
  - clamav-unofficial-sigs
  - openssh-server
  - rsync
package_update: true
package_upgrade: true

# Initialise an empty file `internal_mirror_ip_addresses.txt`
# When internal mirrors are deployed, they add their IP address to this file
# Whenever `push_to_internal_mirrors.sh` is run, it will try to rsync to all of the IP addresses in the file
# NB. Since write_files runs before user creation, only pre-existing users can be assigned as file owners
write_files:
  - path: "/etc/apt/apt.conf.d/00proxy"
    permissions: "0444"
    content: |
      Acquire::http::Proxy "http://{{monitoring.updateServers.linux.ip}}:8000";

  - path: "/etc/audit/rules.d/audit.rules"
    permissions: "0400"
    content: |
      {{audit.rules}}

  - path: "/etc/clamav/clamd.conf"
    permissions: "0644"
    append: true
    content: |
      {{clamd.conf}}

  - path: "/etc/cron.d/clamav-update"
    permissions: "0644"
    content: |
      # Run every day at a fixed time
      {{monitoring.schedule.daily_definition_updates.minute}} {{monitoring.schedule.daily_definition_updates.hour}} * * * freshclam

  - path: "/etc/cron.d/push-to-internal-mirrors"
    permissions: "0644"
    content: |
      # Internal update (rsync) every day at 2am
      0 2 * * * mirrordaemon ~mirrordaemon/push_to_internal_mirrors.sh

  - path: "/etc/cron.d/pull-from-internet"
    permissions: "0644"
    content: |
      # External update (rsync from CRAN) every 6 hours
      0 */6 * * * mirrordaemon ~mirrordaemon/pull_from_internet.sh

  - path: "/etc/cron.d/pull-then-push"
    permissions: "0644"
    content: |
      # Run both jobs on every reboot
      @reboot mirrordaemon ~mirrordaemon/pull_then_push.sh

  - path: "/etc/systemd/system/clamav-clamonacc.service"
    permissions: "0644"
    content: |
      {{clamav-clamonacc.service}}

  - path: "/etc/systemd/system/clamav-clamdscan.service"
    permissions: "0644"
    content: |
      {{clamav-clamdscan.service}}

  - path: "/etc/systemd/system/clamav-clamdscan.timer"
    permissions: "0644"
    content: |
      {{clamav-clamdscan.timer}}

  - path: "/home/mirrordaemon/internal_mirror_ip_addresses.txt"
    permissions: "0600"

  - path: "/home/mirrordaemon/package_allowlist.txt"
    permissions: "0600"
    content: |
      {{allowlist-full-r-cran-tier3.list}}

  - path: "/home/mirrordaemon/push_to_internal_mirrors.sh"
    permissions: "0700"
    content: |
      #! /bin/bash
      # rsync: make the destination look like the source
      #   -p          preserve permissions
      #   -r          recursive
      #   -t          preserve times
      #   -l          follow symlinks
      #   -v          verbose
      #   --delete    delete files present in destination but not source
      #   --progress  show progress
      echo "[PushToInternal] Found $(cat /home/mirrordaemon/internal_mirror_ip_addresses.txt | wc -l | xargs) internal mirrors" | tee >(logger -t SafeHaven)
      for IP_ADDRESS in $(cat /home/mirrordaemon/internal_mirror_ip_addresses.txt); do
          echo "[PushToInternal] Started pushing to the internal mirror at ${IP_ADDRESS}..." | tee >(logger -t SafeHaven)
          START_TIME=$(date +%s)
          rsync -prtlv --delete --progress /datadrive/mirrordaemon/www/cran/* mirrordaemon@${IP_ADDRESS}:/datadrive/mirrordaemon/www/cran 2>&1 | awk '{print "[PushToInternal] " $0}' | tee >(logger -t SafeHaven)
          ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
          echo "[PushToInternal] Finished pushing to the internal mirror at $IP_ADDRESS after $ELAPSED" | tee >(logger -t SafeHaven)
      done

  - path: "/home/mirrordaemon/pull_from_internet.sh"
    permissions: "0700"
    content: |
      #! /bin/bash
      TIER="{{perInstance.tier}}"
      echo "[PullFromInternet] Started pulling from the internet..." | tee >(logger -t SafeHaven)
      START_TIME=$(date +%s)
      if [ "$TIER" == "tier2" ]; then
          # Download all files
          rsync -rtlvz --delete --delete-excluded --exclude=bin/windows/* --exclude=bin/macos*/* --progress cran.r-project.org::CRAN /datadrive/mirrordaemon/www/cran 2>&1 | awk '{print "[PullFromInternet] " $0}' | tee >(logger -t SafeHaven)
      else
          # Download all allowed packages (which might be none)
          ALLOWED_PACKAGES=$(grep -v "^#" /home/mirrordaemon/package_allowlist.txt)
          # Note that there is a server-side timeout (30s) which causes problems for complicated commands
          # By splitting into subdirectories we reduce the complexity of each rsync command
          # Additionally, using an initial '/' anchors the search path at the directory root, speeding up calculation time
          # Directory: /bin
          INCLUDE_DIRS=""
          for RPACKAGE in $ALLOWED_PACKAGES; do
              INCLUDE_DIRS="${INCLUDE_DIRS} --include=/linux/ubuntu/*/${RPACKAGE}_*"
          done
          mkdir -p /datadrive/mirrordaemon/www/cran/bin
          rsync -rtlvz --delete --delete-excluded --prune-empty-dirs --progress --include='*/' --include='/*' $INCLUDE_DIRS --exclude='*' cran.r-project.org::CRAN/bin/ /datadrive/mirrordaemon/www/cran/bin 2>&1 | awk '{print "[PullFromInternet] " $0}' | tee >(logger -t SafeHaven)
          # Directory: /src
          INCLUDE_DIRS="--include=/contrib/PACKAGES"
          for RPACKAGE in $ALLOWED_PACKAGES; do
              INCLUDE_DIRS="${INCLUDE_DIRS} --include=/contrib/${RPACKAGE}_* --include=/contrib/Archive/${RPACKAGE}/*"
          done
          mkdir -p /datadrive/mirrordaemon/www/cran/src
          rsync -rtlvz --delete --delete-excluded --prune-empty-dirs --progress --include='*/' --include='/*' $INCLUDE_DIRS --exclude='*' cran.r-project.org::CRAN/src/ /datadrive/mirrordaemon/www/cran/src 2>&1 | awk '{print "[PullFromInternet] " $0}' | tee >(logger -t SafeHaven)
          # Directory: /web
          INCLUDE_DIRS="--include=/packages/index.html"
          for RPACKAGE in $ALLOWED_PACKAGES; do
              INCLUDE_DIRS="${INCLUDE_DIRS} --include=/checks/check_results_${RPACKAGE}.html --include=/dcmeta/${RPACKAGE}.xml --include=/packages/${RPACKAGE}/***"
          done
          mkdir -p /datadrive/mirrordaemon/www/cran/web
          rsync -rtlvz --delete --delete-excluded --prune-empty-dirs --progress --include='*/' --include='/*' $INCLUDE_DIRS --exclude='*' cran.r-project.org::CRAN/web/ /datadrive/mirrordaemon/www/cran/web 2>&1 | awk '{print "[PullFromInternet] " $0}' | tee >(logger -t SafeHaven)
          # Top-level directory. Note that delete must *NOT* be enabled here.
          rsync -rtlvz --prune-empty-dirs --progress --exclude '*/*' cran.r-project.org::CRAN /datadrive/mirrordaemon/www/cran 2>&1 | awk '{print "[PullFromInternet] " $0}' | tee >(logger -t SafeHaven)
      fi
      ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
      echo "[PullFromInternet] Finished pulling from the internet after $ELAPSED" | tee >(logger -t SafeHaven)

  - path: "/home/mirrordaemon/pull_then_push.sh"
    permissions: "0700"
    content: |
      #! /bin/bash
      source ~mirrordaemon/pull_from_internet.sh
      source ~mirrordaemon/push_to_internal_mirrors.sh

  - path: "/home/mirrordaemon/update_known_internal_mirrors.sh"
    permissions: "0700"
    content: |
      {{update_known_internal_mirrors.sh}}

# Add the SHM admin (default) and mirrordaemon users
# lock_passwd: Lock the password to disable password login
users:
  - default
  - name: mirrordaemon
    lock_passwd: true
    sudo: false

# Set locale and timezone
locale: en_GB.UTF-8
timezone: {{time.timezone.linux}}

# Set the NTP server
# By default we use Google's NTP servers which are incompatible with other servers due to leap-second smearing
ntp:
  enabled: true
  pools:
    {{#time.ntp.serverAddresses}}
    - {{.}}
    {{/time.ntp.serverAddresses}}

runcmd:
  # Suppress apt prompts and warning messages
  - DEBIAN_FRONTEND=noninteractive
  - export DEBIAN_FRONTEND

  # Clean up installation
  - echo ">=== Cleaning up apt-get packages... ===<"
  - apt update
  - apt-get -y autoremove
  - apt-get clean
  - apt --fix-broken install

  # Ensure that auditd is running and enabled at startup
  - echo ">=== Enabling auditd services... ===<"
  - systemctl start auditd
  - systemctl enable auditd
  - sleep 20
  - systemctl status auditd

  # Configure ClamAV
  - echo ">=== Configure ClamAV... ===<"
  # Allow unlimited recursion when scanning
  - sed -i 's/^MaxDirectoryRecursion .*/MaxDirectoryRecursion 0/' /etc/clamav/clamd.conf
  # Enable ClamAV daemon
  - systemctl enable clamav-daemon
  # Enable ClamAV scan on access
  - systemctl enable clamav-clamonacc
  # Enable ClamAV daily scan
  - systemctl enable clamav-clamdscan.timer
  # Disable ClamAV scan on boot which conflicts with the cronjob
  - systemctl stop clamav-freshclam
  - systemctl disable clamav-freshclam

  # Set up and partition data disk
  - echo ">=== Setting up local disk... ===<"
  - mkdir -p /datadrive/mirrordaemon/www/cran
  - ls -alh /datadrive

  # Fix permissions so that mirrordaemon owns its files
  - mkdir -p /home/mirrordaemon/.ssh
  - chown -R mirrordaemon:mirrordaemon /datadrive/mirrordaemon
  - chown -R mirrordaemon:mirrordaemon ~mirrordaemon
  - ls -alh ~mirrordaemon

  # Generate SSH keys for connecting to the internal mirror
  - echo ">=== Generating SSH keys for connecting to the internal mirror... ===<"
  - cd /home/mirrordaemon/.ssh
  - sudo -u mirrordaemon ssh-keygen -t rsa -b 2048 -N '' -f id_rsa
  - ls -alh ~mirrordaemon/.ssh

  # Print out some diagnostic information
  - echo ">=== This server is currently aware of internal mirrors at the following locations... ===<"
  - cat /home/mirrordaemon/internal_mirror_ip_addresses.txt


# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: true
