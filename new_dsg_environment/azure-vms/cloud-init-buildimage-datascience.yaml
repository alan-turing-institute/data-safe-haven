#cloud-config

apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Update apt database on first boot (ie run apt-get update)
  update: true

  # Add repositories
  sources:
    marutter-c2d4u35.list:
      source: "ppa:marutter/c2d4u3.5"

    rproject-cran35.list:
      source: "deb https://cloud.r-project.org/bin/linux/ubuntu xenial-cran35/"
      keyserver: hkp://keyserver.ubuntu.com:80
      keyid: 51716619E084DAB9

# List of packages to install with apt-get
packages:
  - adcli
  - attr
  - krb5-kdc
  - ldap-utils
  - libmariadb-client-lgpl-dev
  - libnss-ldap
  - libnss-sss
  - libpam-ldap
  - libpam-sss
  - libpq-dev
  - octave
  - oddjob
  - oddjob-mkhomedir
  - postgresql
  - postgresql-contrib
  - r-base
  - r-base-core
  - r-base-dev
  - r-bioc-limma
  - r-bioc-phyloseq
  - r-bioc-rbgl
  - r-cran-ada
  - r-cran-bbmisc
  - r-cran-bitops
  - r-cran-car
  - r-cran-caret
  - r-cran-checkmate
  - r-cran-chron
  - r-cran-coda
  - r-cran-colorramps
  - r-cran-coxboost
  - r-cran-cvst
  - r-cran-deepnet
  - r-cran-devtools
  - r-cran-diagrammer
  - r-cran-dichromat
  - r-cran-doparallel
  - r-cran-dt
  - r-cran-dygraphs
  - r-cran-e1071
  - r-cran-factominer
  - r-cran-foreach
  - r-cran-gbm
  - r-cran-gdata
  - r-cran-ggmap
  - r-cran-ggvis
  - r-cran-glmnet
  - r-cran-googlevis
  - r-cran-hmisc
  - r-cran-irace
  - r-cran-iterators
  - r-cran-kernlab
  - r-cran-kknn
  - r-cran-leaflet
  - r-cran-lme4
  - r-cran-maps
  - r-cran-maptools
  - r-cran-matrixstats
  - r-cran-mboost
  - r-cran-mclust
  - r-cran-mcmcpack
  - r-cran-mlr
  - r-cran-multcomp
  - r-cran-neuralnet
  - r-cran-parallelmap
  - r-cran-paramhelpers
  - r-cran-party
  - r-cran-pls
  - r-cran-quantmod
  - r-cran-randomforest
  - r-cran-randomforestsrc
  - r-cran-ranger
  - r-cran-rcpparmadillo
  - r-cran-rcurl
  - r-cran-repr
  - r-cran-reshape
  - r-cran-rgl
  - r-cran-rjava
  - r-cran-rmysql
  - r-cran-rocr
  - r-cran-roxygen2
  - r-cran-rpostgresql
  - r-cran-rsqlite
  - r-cran-rstan
  - r-cran-rweka
  - r-cran-sqldf
  - r-cran-tcltk2
  - r-cran-testthat
  - r-cran-tgp
  - r-cran-threejs
  - r-cran-tidyverse
  - r-cran-uuid
  - r-cran-vcd
  - r-cran-xgboost
  - r-cran-xlsx
  - r-cran-xts
  - r-recommended
  - realmd
  - ristretto
  - sssd
  - sssd-tools
  - xfce4
  - xfce4-terminal
  - xrdp

bootcmd:
  # Update NVidia repository before installing any packages
  - curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | apt-key add -

runcmd:
  # NB. Do not add /anaconda/bin to the PATH since conda must be used through a shell function, not directly as the executable
  - . /anaconda/etc/profile.d/conda.sh
  - echo ". /anaconda/etc/profile.d/conda.sh" >> /etc/bash.bashrc
  # Update conda
  - echo "*** Updating conda installation... ***"
  - conda update -n base -c defaults conda
  # Add channels
  - conda config --add channels conda-forge
  - conda config --add channels pytorch # for pytorch, torchvision
  - conda config --add channels ostrokach-forge # for graph-tool which cannot be installed with pip
  # Do not privilege some channels over others
  - conda config --set channel_priority false
  # Increase timeouts and retries for downloading packages (we had some connection issues in testing)
  - conda config --set remote_connect_timeout_secs 30
  - conda config --set remote_max_retries 10
  - conda config --set remote_read_timeout_secs 120
  # List initial environments
  - echo "*** Initial conda environments... ***"
  - conda env list

  # === AUTOGENERATED ANACONDA PACKAGES START HERE ===

  # Create or install conda environments
  # Python 2.7
  - echo "*** Working on py27 environment. Will take approximately 45 minutes... ***"
  - START_TIME=$(date +%s)
  - echo "Starting at $(date +'%Y-%m-%d %H:%M:%S')"
  - echo "Installing $(echo $PYTHON27_CONDA_PACKAGES | wc -w) packages with conda..."
  - echo "$(echo $PYTHON27_CONDA_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - if [ "$(conda env list | grep py27)" = "" ]; then conda create -y --verbose --name py27 python=2.7 $PYTHON27_CONDA_PACKAGES; else conda install -y --verbose --name py27 $PYTHON27_CONDA_PACKAGES; fi
  - if [ "$(conda env list | grep py27)" = "" ]; then echo "Could not build python 2.7 environment"; exit 1; fi
  - echo "Installing $(echo $PYTHON27_PIP_PACKAGES | wc -w) additional packages with pip..."
  - echo "$(echo $PYTHON27_PIP_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - /anaconda/envs/py27/bin/pip install $PYTHON27_PIP_PACKAGES
  - export JUPYTER_LOCATION=$(echo "source /anaconda/bin/activate py27; which jupyter" | bash)
  - export JUPYTER_VERSION=$(echo "source /anaconda/bin/activate py27; jupyter --version" | bash)
  - if [ "$JUPYTER_LOCATION" != "" ]; then echo "py27 environment has jupyter (version $JUPYTER_VERSION) at $JUPYTER_LOCATION"; else echo "jupyter not found in python 2.7 environment!"; exit 1; fi
  - END_TIME=$(date +%s)
  - echo "Finished at $(date +'%Y-%m-%d %H:%M:%S')"
  - ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
  - echo "*** Building py27 environment took $ELAPSED"
  # Python 3.6
  - echo "*** Working on py36 environment. Will take approximately 45 minutes... ***"
  - START_TIME=$(date +%s)
  - echo "Starting at $(date +'%Y-%m-%d %H:%M:%S')"
  - echo "Installing $(echo $PYTHON36_CONDA_PACKAGES | wc -w) packages with conda..."
  - echo "$(echo $PYTHON36_CONDA_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - if [ "$(conda env list | grep py36)" = "" ]; then conda create -y --verbose --name py36 python=3.6 $PYTHON36_CONDA_PACKAGES; else conda install -y --verbose --name py36 $PYTHON36_CONDA_PACKAGES; fi
  - if [ "$(conda env list | grep py36)" = "" ]; then echo "Could not build python 3.6 environment"; exit 1; fi
  - echo "Installing $(echo $PYTHON36_PIP_PACKAGES | wc -w) additional packages with pip..."
  - echo "$(echo $PYTHON36_PIP_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - /anaconda/envs/py36/bin/pip install $PYTHON36_PIP_PACKAGES
  - export JUPYTER_LOCATION=$(echo "source /anaconda/bin/activate py36; which jupyter" | bash)
  - export JUPYTER_VERSION=$(echo "source /anaconda/bin/activate py36; jupyter --version" | bash)
  - if [ "$JUPYTER_LOCATION" != "" ]; then echo "py36 environment has jupyter (version $JUPYTER_VERSION) at $JUPYTER_LOCATION"; else echo "jupyter not found in python 3.6 environment!"; exit 1; fi
  - ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
  - echo "*** Building py36 environment took $ELAPSED"
  # Python 3.7
  - echo "*** Working on py37 environment. Will take approximately 15 minutes... ***"
  - START_TIME=$(date +%s)
  - echo "Starting at $(date +'%Y-%m-%d %H:%M:%S')"
  - echo "Installing $(echo $PYTHON37_CONDA_PACKAGES | wc -w) packages with conda..."
  - echo "$(echo $PYTHON37_CONDA_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - if [ "$(conda env list | grep py37)" = "" ]; then conda create -y --verbose --name py37 python=3.7 $PYTHON37_CONDA_PACKAGES; else conda install -y --verbose --name py37 $PYTHON37_CONDA_PACKAGES; fi
  - if [ "$(conda env list | grep py37)" = "" ]; then echo "Could not build python 3.7 environment"; exit 1; fi
  - echo "Installing $(echo $PYTHON37_PIP_PACKAGES | wc -w) additional packages with pip..."
  - echo "$(echo $PYTHON37_PIP_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - /anaconda/envs/py37/bin/pip install $PYTHON37_PIP_PACKAGES
  - export JUPYTER_LOCATION=$(echo "source /anaconda/bin/activate py37; which jupyter" | bash)
  - export JUPYTER_VERSION=$(echo "source /anaconda/bin/activate py37; jupyter --version" | bash)
  - if [ "$JUPYTER_LOCATION" != "" ]; then echo "py37 environment has jupyter (version $JUPYTER_VERSION) at $JUPYTER_LOCATION"; else echo "jupyter not found in python 3.7 environment!"; exit 1; fi
  - ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
  - echo "*** Building py37 environment took $ELAPSED"
  # List environments
  - echo "*** Final conda environments... ***"
  - conda env list

  # === AUTOGENERATED R PACKAGES START HERE ===

  # Ensure that R packages are installed
  # Use the full number of available cores for installation (R builds a lot of packages from source so we can get a decent speedup here)
  - Rscript -e "nCores = parallel::detectCores(); options('Ncpus' = nCores); getOption('Ncpus', 1L)"
  # CRAN
  - echo "*** Installing additional R packages. Will take approximately 60 minutes... ***"
  - START_TIME=$(date +%s)
  - echo "Starting at $(date +'%Y-%m-%d %H:%M:%S')"
  - echo "Previously installed CRAN packages:"
  - Rscript -e "installed.packages()[,'Package']"
  - echo "CRAN packages remaining to be installed:"
  - Rscript -e "list.of.packages <- c($CRANPACKAGES); new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,'Package'])]; print(new.packages); if(length(new.packages)) install.packages(new.packages, repos='https://cran.rstudio.com/')"
  # Bioconductor
  - echo "Previously installed BioConductor packages:"
  - Rscript -e "list.of.packages <- c($BIOCPACKAGES); old.packages <- list.of.packages[(list.of.packages %in% installed.packages()[,'Package'])]; print(old.packages);"
  - echo "BioConductor packages remaining to be installed:"
  - Rscript -e "list.of.packages <- c($BIOCPACKAGES); new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,'Package'])]; print(new.packages); if(length(new.packages)) BiocManager::install(new.packages)"
  # Install R packages from custom repos
  - Rscript -e "install.packages('INLA', repos='https://inla.r-inla-download.org/R/testing', dep=TRUE)"
  - Rscript -e "devtools::install_github('dgrtwo/gganimate')"
  # Install RStudio
  - echo "*** Installing RStudio... ***"
  # Ensure RStudio picks up system R rather than Conda R for all users
  - export RSTUDIO_DEB="rstudio-xenial-1.1.463-amd64.deb"
  - echo "export RSTUDIO_WHICH_R=/usr/bin/R" >> /etc/bash.bashrc
  - cd /tmp
  - wget https://download1.rstudio.org/${RSTUDIO_DEB}
  - gdebi --non-interactive ${RSTUDIO_DEB}
  - rm -f ${RSTUDIO_DEB}
  - if [ ! -e "/usr/bin/rstudio" ]; then echo "Could not install RStudio"; exit 1; fi
  - ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
  - echo "*** Installing R packages and RStudio took $ELAPSED"

  # Install latest julia version
  - echo "*** Installing Julia... ***"
  - echo "Removing old installation and preparing directory..."
  - sudo rm /usr/bin/julia
  - mkdir -p /opt/julia
  - cd /opt/julia
  - echo "Downloading package..."
  - curl -O https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0.1-linux-x86_64.tar.gz
  - echo "Installing and cleaning up..."
  - tar -zxf julia-1.0.1-linux-x86_64.tar.gz
  - rm -rf julia-1.0.1-linux-x86_64.tar.gz
  - sed -i 's|\(.*\)"|\1:/opt/julia/julia-1.0.1/bin"|' /etc/environment
  - export PATH=$PATH:/opt/julia/julia-1.0.1/bin
  - echo "export PATH=$PATH:/opt/julia/julia-1.0.1/bin" >> /etc/bash.bashrc
  - if [ "$(which julia)" = "" ]; then echo "Could not install Julia"; exit 1; fi

  # Install spark
  - echo "*** Installing spark... ***"
  - mkdir -p /opt/spark
  - cd /opt/spark
  - curl -O http://apache.mirror.anlx.net/spark/spark-2.4.0/spark-2.4.0-bin-hadoop2.7.tgz
  - tar -zxf spark-2.4.0-bin-hadoop2.7.tgz
  - rm -rf spark-2.4.0-bin-hadoop2.7.tgz
  - sed -i 's|\(.*\)"|\1:/opt/spark/spark-2.4.0-bin-hadoop2.7/bin"|' /etc/environment
  - export PATH=$PATH:/opt/spark/spark-2.4.0-bin-hadoop2.7/bin
  - echo "export PATH=$PATH:/opt/spark/spark-2.4.0-bin-hadoop2.7/bin" >> /etc/bash.bashrc
  - if [ "$(which spark-shell)" = "" ]; then echo "Could not install spark"; exit 1; fi

  # Add torch to the path
  - export PATH=$PATH:/dsvm/tools/torch/bin
  - echo "export PATH=$PATH:/dsvm/tools/torch/bin" >> /etc/bash.bashrc

  # Check for successful installations
  - echo "*** Checking for successful installation... ***"
  # - programming languages
  - if [ "$(which python)" != "" ]; then echo "python $(which python)"; echo "$(python --version)"; else echo "python not found!"; exit 1; fi
  - if [ "$(which R)" != "" ]; then echo "R $(which R)"; echo "$(R --version)"; else echo "R not found!"; exit 1; fi
  - if [ "$(which psql)" != "" ]; then echo "psql $(which psql)\n $(psql --version)"; else echo "psql not found!"; exit 1; fi
  - if [ "$(which julia)" != "" ]; then echo "julia $(which julia)"; echo "$(julia --version)"; else echo "julia not found!"; exit 1; fi
  - if [ "$(which java)" != "" ]; then echo "java $(which java)"; echo "$(java -version)"; else echo "java not found!"; exit 1; fi
  - if [ "$(which dotnet)" != "" ]; then echo "dotnet $(which dotnet)"; echo "$(dotnet --info)"; else echo "dotnet not found!"; exit 1; fi
  - if [ "$(which gcc)" != "" ]; then echo "gcc $(which gcc)"; echo "$(gcc --version)"; else echo "gcc not found!"; exit 1; fi
  - if [ "$(which g++)" != "" ]; then echo "g++ $(which g++)"; echo "$(g++ --version)"; else echo "g++ not found!"; exit 1; fi
  - if [ "$(which gfortran)" != "" ]; then echo "gfortran $(which gfortran)"; echo "$(gfortran --version)"; else echo "gfortran not found!"; exit 1; fi
  # - development tools
  - if [ "$(which bash)" != "" ]; then echo "bash $(which bash)"; echo "$(bash --version)"; else echo "bash not found!"; exit 1; fi
  - if [ "$(which git)" != "" ]; then echo "git $(which git)"; echo "$(git --version)"; else echo "git not found!"; exit 1; fi
  - if [ "$(which htop)" != "" ]; then echo "htop $(which htop)"; echo "$(htop --version)"; else echo "htop not found!"; exit 1; fi
  - if [ "$(which firefox)" != "" ]; then echo "firefox $(which firefox)"; echo "$(firefox --version)"; else echo "firefox not found!"; exit 1; fi
  - if [ "$(which vim)" != "" ]; then echo "vim $(which vim)"; echo "$(vim --version)"; else echo "vim not found!"; exit 1; fi
  - if [ "$(which emacs)" != "" ]; then echo "emacs $(which emacs)"; echo "$(emacs --version)"; else echo "emacs not found!"; exit 1; fi
  - if [ "$(which nano)" != "" ]; then echo "nano $(which nano)"; echo "$(nano --version)"; else echo "nano not found!"; exit 1; fi
  - if [ "$(which code)" != "" ]; then echo "code $(which code)"; echo "$(code --version)"; else echo "code not found!"; exit 1; fi
  - if [ "$(which atom)" != "" ]; then echo "atom $(which atom)"; echo "$(dpkg -s atom)"; else echo "atom not found!"; exit 1; fi
  - if [ "$(which jupyter)" != "" ]; then echo "jupyter $(which jupyter)"; echo "$(jupyter --version)"; else echo "jupyter not found!"; exit 1; fi
  - if [ "$(which docker)" != "" ]; then echo "docker $(which docker)"; echo "$(docker --version)"; else echo "docker not found!"; exit 1; fi
  - if [ "$(which az)" != "" ]; then echo "az $(which az)"; echo "$(az --version)"; else echo "az not found!"; exit 1; fi
  - if [ "$(which azcopy)" != "" ]; then echo "azcopy $(which azcopy)"; echo "$(azcopy --version)"; else echo "azcopy not found!"; exit 1; fi
  - if [ "$(which scala)" != "" ]; then echo "scala $(which scala)"; else echo "scala not found!"; exit 1; fi
  - if [ "$(which th)" != "" ]; then echo "th $(which th)"; else echo "torch not found!"; exit 1; fi
  - if [ "$(which nvidia-smi)" != "" ]; then echo "nvidia-smi $(which nvidia-smi)"; echo "$(nvidia-smi --help)"; else echo "nvidia-smi not found!"; exit 1; fi
  - if [ "$(which rstudio)" != "" ]; then echo "rstudio $(which rstudio)"; echo "$(dpkg -s rstudio)"; else echo "rstudio not found!"; fi
  # Check for missing packages
  - echo "R packages that could not be installed:"
  - Rscript -e "list.of.packages <- c($RPACKAGES); missing.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,'Package'])]; print(missing.packages)"
  - echo "Bioconductor packages that could not be installed:"
  - Rscript -e "list.of.packages <- c($BIOCPACKAGES); missing.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,'Package'])]; print(missing.packages)"

  # Deprovision
  - waagent -deprovision+user -force
  # Fix internet connectivity that is broken by waagent deprovisioning
  - ln -s /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

final_message:
  "The system is setup and deprovisioned. Configuration took $UPTIME seconds"
