#cloud-config

apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Update apt database on first boot (ie run apt-get update)
  update: true

  # Add repositories
  sources:
    chronitis-jupyter.list:
      source: "ppa:chronitis/jupyter"

    marutter-c2d4u35.list:
      source: "ppa:marutter/c2d4u3.5"

    microsoft-prod.list:
      source: "deb [arch=amd64] https://packages.microsoft.com/ubuntu/18.04/prod bionic main"
      keyid: EB3E94ADBE1229CF

    microsoft-azure-cli.list:
      source: "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ bionic main"
      keyid: EB3E94ADBE1229CF

    microsoft-vscode.list:
      source: "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
      keyid: EB3E94ADBE1229CF

    mono-project.list:
      source: "deb https://download.mono-project.com/repo/ubuntu stable-bionic main"
      keyserver: hkp://keyserver.ubuntu.com:80
      keyid: 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF

    nvidia.list:
      source: "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /"
      key: |
        -----BEGIN PGP PUBLIC KEY BLOCK-----
        Version: GnuPG v1

        mQINBFdtt4UBEAC8FDSWMR07GJZ265giLn7kLF+EsJCWESUq6Cd13QN0JQ/tLibi
        QlW4ZjeOnEH9VPlqh/mKqNMG4SwRt8S+GHpePMQrr0aOkiRGfCclnAWIZURSAP+t
        PLelCt43fkw1BBTopd/0oOzO8kHu8j8WU4A8GHxqghfFWPv54FQs2iaZ2eWR7a6d
        79IJrbDKaVCCiQrkhCM8m648pNKHhuoJ9cQXFV+uvwkpfmKWGQ4ultxlOyjLHJLF
        vuML2RuAO9IxbdZjzeYNN+T+wjFIBVcPnwEO+WrYgvGkT4r9aqVqTeg3EPb7QclV
        sKBVJdxk4jZl0y22HAWqScVi6SJ15uK9pXxywDZkbpuRBWx4ThWiGe/FiUa2igi9
        /SIvqN2TBY0g18sRTrylVr1wE1UGa/y7nDx6PoGCP1frBt8YUYt3pkM8Xvb2CRxx
        CyWwmuFEQHC6jCEWf7FnoBHBYQwTVGNrU0vkuIeDrm+ZAcv8wx+ie1hlFhqCCJnf
        jqeQ0/zA9RPmCPOkLyTdSsNZtlxxk7bzCdTdFFKzBjGTR7Gz3SMSp23d11eIyRiF
        HQsp2v0SvnPJ6OcgB95Hmo544vi3RuoVfovtDOdfSBCRxP+GhhxkKSrTleQjD0/r
        CGkdG2Kox3m9YllAsvZchLXlS7bZV9mGRF61mVMjF3HJRUQfBBm89VPQ+QARAQAB
        tCBjdWRhdG9vbHMgPGN1ZGF0b29sc0BudmlkaWEuY29tPokCNwQTAQgAIQUCV223
        hQIbAwULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRD2D0s9f6KvgNArEAChnfcW
        rYItgt7xXXubT6E+KpJyJ0RPrXf51S2mhciFbjDl+3EXRMRjOutVmgWYPWUUZaKR
        8Iez3Lz4BRmwYOWBLtdnOLbKoSsQUX95rnPFjfly/DFLfjKxz4NRBmh4r4/rCYWm
        2hmnXmOAi8kV7fqx3g5XMpJ//N6+T8ctEol2iZ82GrXjadcRWE4rAe7UyuEzJ74y
        6ZKIzk5ijdgEKtcaBhzEWvoV5Pr9nkn7ByGsdehKR/gNnjPMYXrklSHGfphJIsS2
        S32lMk/kuRjihBcWcYBXIPEQ7CV+PNW2TlkZj/YqTg637sZHwkhcjcNzxeqKvRYG
        8V7Ju5hTDxL1UQBmgDS3cRx1lw7tYRG5bS67tbC2dc/CpPkG5agiZ/WyoHQDnn4r
        1fRuOFx694QR6+0rAP6171xEEoNAPaH7gdJdhWKiYiJD0T2EEbW7wBUi/EupeKRv
        kR12R1jUa1mlpxNtWQxJ7qp98T9+DmkxI1XDmWx0/g4ryuicwLDSqoPgNcRNdSQb
        b8YfTqrkqaDdYzwLr/n0YKW3cYIvIeisV0WxRjb6OP7oAlAtaAhImlIc//51qNO7
        /WAud6qMtnhFoZayR/BzLKqnCioN5GYr9BAKskpPHe9cDKVS3fg+Qvc1sNJID+jf
        k52PqyW24Qsr0A9+5zQyE4tH9dfv120gj9avmg==
        =0nKc
        -----END PGP PUBLIC KEY BLOCK-----

    nvidia-ml.list:
      source: "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /"

    rproject-cran35.list:
      source: "deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/"
      keyserver: hkp://keyserver.ubuntu.com:80
      keyid: 51716619E084DAB9

    webupd8team-atom.list:
      source: "ppa:webupd8team/atom"

# List of packages to install with apt-get
# NB. as of 11/03/2019 `nvidia-cuda-toolkit` is broken so we do not install it
packages:
  - adcli
  - apt-transport-https
  - atom
  - attr
  - azure-cli
  - code
  - default-jdk
  - docker.io
  - dotnet-sdk-2.1
  - emacs
  - firefox
  - g++-6
  - gcc-6
  - gdebi-core
  - git-core
  - krb5-kdc
  - ldap-utils
  - libasound2
  - libcanberra-gtk0
  - libgconf-2-4
  - libgit2-dev
  - libgl1-mesa-glx
  - libglu1-mesa
  - libgmp-dev
  - libgnome-keyring0
  - libgsl-dev
  - libgtk-3-0
  - libhdf5-serial-dev
  - liblmdb-dev
  - libmariadb-client-lgpl-dev
  - libmpfr-dev
  - libnss-ldap
  - libnss-sss
  - libnss3
  - libpam-ldap
  - libpam-sss
  - libpoppler-cpp-dev
  - libpq-dev
  - librsvg2-dev
  - libssl-dev
  - libudunits2-dev
  - libxss1
  - mono-complete
  - mono-devel
  - octave
  - oddjob
  - oddjob-mkhomedir
  - postgresql
  - postgresql-contrib
  - r-base
  - r-base-core
  - r-base-dev
  - r-bioc-biobase
  - r-bioc-cummerbund
  - r-bioc-deseq2
  - r-bioc-ebseq
  - r-bioc-graph
  - r-bioc-gviz
  - r-bioc-interactivedisplaybase
  - r-bioc-limma
  - r-bioc-metagenomeseq
  - r-bioc-phyloseq
  - r-bioc-rbgl
  - r-cran-abind
  - r-cran-ada
  - r-cran-akima
  - r-cran-ape
  - r-cran-assertthat
  - r-cran-backports
  - r-cran-bbmisc
  - r-cran-biocmanager
  - r-cran-bitops
  - r-cran-boot
  - r-cran-brms
  - r-cran-car
  - r-cran-care
  - r-cran-caret
  - r-cran-checkmate
  - r-cran-chron
  - r-cran-class
  - r-cran-cluster
  - r-cran-coda
  - r-cran-codetools
  - r-cran-colorramps
  - r-cran-colorspace
  - r-cran-corrplot
  - r-cran-cowplot
  - r-cran-coxboost
  - r-cran-crayon
  - r-cran-cvst
  - r-cran-cvtools
  - r-cran-data.table
  - r-cran-dbi
  - r-cran-deepnet
  - r-cran-devtools
  - r-cran-diagrammer
  - r-cran-dichromat
  - r-cran-digest
  - r-cran-directlabels
  - r-cran-dlm
  - r-cran-doby
  - r-cran-doparallel
  - r-cran-dplyr
  - r-cran-dppackage
  - r-cran-dt
  - r-cran-dtw
  - r-cran-dummies
  - r-cran-dygraphs
  - r-cran-e1071
  - r-cran-emulator
  - r-cran-evaluate
  - r-cran-factominer
  - r-cran-fda
  - r-cran-fields
  - r-cran-foreach
  - r-cran-forecast
  - r-cran-foreign
  - r-cran-formula
  - r-cran-gamlss
  - r-cran-gamlss.dist
  - r-cran-gamlss.mx
  - r-cran-gbm
  - r-cran-gdata
  - r-cran-ggally
  - r-cran-ggforce
  - r-cran-ggmap
  - r-cran-ggplot2
  - r-cran-ggridges
  - r-cran-ggvis
  - r-cran-glmnet
  - r-cran-googlevis
  - r-cran-gplots
  - r-cran-gridextra
  - r-cran-gtable
  - r-cran-highr
  - r-cran-hmisc
  - r-cran-htmltools
  - r-cran-httpuv
  - r-cran-httr
  - r-cran-igraph
  - r-cran-irace
  - r-cran-iterators
  - r-cran-jsonlite
  - r-cran-kernlab
  - r-cran-kernsmooth
  - r-cran-kknn
  - r-cran-kml
  - r-cran-knitr
  - r-cran-labeling
  - r-cran-lattice
  - r-cran-lazyeval
  - r-cran-leaflet
  - r-cran-lme4
  - r-cran-loo
  - r-cran-lubridate
  - r-cran-magrittr
  - r-cran-maps
  - r-cran-maptools
  - r-cran-markdown
  - r-cran-mass
  - r-cran-matrix
  - r-cran-matrixstats
  - r-cran-mboost
  - r-cran-mclust
  - r-cran-mcmcpack
  - r-cran-mcspatial
  - r-cran-mgcv
  - r-cran-mime
  - r-cran-mlbench
  - r-cran-mlr
  - r-cran-multcomp
  - r-cran-munsell
  - r-cran-ndtv
  - r-cran-network
  - r-cran-neuralnet
  - r-cran-nlme
  - r-cran-nnet
  - r-cran-parallelmap
  - r-cran-paramhelpers
  - r-cran-party
  - r-cran-pbdzmq
  - r-cran-pls
  - r-cran-plyr
  - r-cran-polycor
  - r-cran-pomp
  - r-cran-premium
  - r-cran-pscl
  - r-cran-purrr
  - r-cran-pvclust
  - r-cran-quanteda
  - r-cran-quantmod
  - r-cran-r6
  - r-cran-randomforest
  - r-cran-randomforestsrc
  - r-cran-ranger
  - r-cran-rcolorbrewer
  - r-cran-rcpp
  - r-cran-rcpparmadillo
  - r-cran-rcppeigen
  - r-cran-rcurl
  - r-cran-readr
  - r-cran-readxl
  - r-cran-repr
  - r-cran-reshape
  - r-cran-reshape2
  - r-cran-rgdal
  - r-cran-rgeos
  - r-cran-rgl
  - r-cran-rjava
  - r-cran-rmarkdown
  - r-cran-rmysql
  - r-cran-rocr
  - r-cran-roxygen2
  - r-cran-rpart
  - r-cran-rpostgresql
  - r-cran-rpython
  - r-cran-rsqlite
  - r-cran-rstan
  - r-cran-runjags
  - r-cran-rweka
  - r-cran-scales
  - r-cran-shiny
  - r-cran-slam
  - r-cran-sna
  - r-cran-snowballc
  - r-cran-sourcetools
  - r-cran-sp
  - r-cran-spacyr
  - r-cran-spatial
  - r-cran-sqldf
  - r-cran-stargazer
  - r-cran-stm
  - r-cran-stringi
  - r-cran-stringr
  - r-cran-surveillance
  - r-cran-survival
  - r-cran-synthpop
  - r-cran-tcltk2
  - r-cran-testthat
  - r-cran-text2vec
  - r-cran-tgp
  - r-cran-threejs
  - r-cran-tibble
  - r-cran-tidyr
  - r-cran-tidytext
  - r-cran-tidyverse
  - r-cran-tmap
  - r-cran-topicmodels
  - r-cran-urca
  - r-cran-uuid
  - r-cran-vars
  - r-cran-vcd
  - r-cran-vioplot
  - r-cran-viridis
  - r-cran-visnetwork
  - r-cran-wavethresh
  - r-cran-wordcloud
  - r-cran-xgboost
  - r-cran-xlsx
  - r-cran-xml
  - r-cran-xtable
  - r-cran-xts
  - r-cran-yaml
  - r-cran-zoo
  - r-recommended
  - realmd
  - ristretto
  - scala
  - sssd
  - sssd-tools
  - xfce4
  - xfce4-terminal
  - xrdp

runcmd:
  # Clean up installation
  - export DEBIAN_FRONTEND=noninteractive
  - echo "*** Cleaning up apt-get packages... ***"
  - apt-get clean

  # Ensure that ~/.local/bin and ~/bin will be included in PATH so that any executables that are installed there (eg. by pip) can be used
  - EXTRA_PATHS="\$HOME/.local/bin:\$HOME/bin"

  # NVidia setup (following https://www.tensorflow.org/install/gpu)
  - echo "*** Installing NVidia requirements for tensorflow ***"
  - apt-get install -y --no-install-recommends nvidia-driver-410
  - apt-get install -y --no-install-recommends cuda-10-0 libcudnn7=7.4.1.5-1+cuda10.0 libcudnn7-dev=7.4.1.5-1+cuda10.0
  - apt-get install -y nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0

  #IF_TORCH_ENABLED # Install torch
  #IF_TORCH_ENABLED - echo "*** Installing torch... ***"
  #IF_TORCH_ENABLED - mkdir -p /opt/torch
  #IF_TORCH_ENABLED - cd /opt/torch
  #IF_TORCH_ENABLED - git clone https://github.com/torch/distro.git /opt/torch --recursive
  #IF_TORCH_ENABLED - sed -i '/python-software-properties/s/^/#/g' install-deps
  #IF_TORCH_ENABLED - bash install-deps
  #IF_TORCH_ENABLED # Switch compilers to gcc-6 and g++-6 or compilation will fail
  #IF_TORCH_ENABLED - ln -s /usr/bin/gcc-6 /usr/local/cuda/bin/gcc
  #IF_TORCH_ENABLED - ln -s /usr/bin/g++-6 /usr/local/cuda/bin/g++
  #IF_TORCH_ENABLED - rm /usr/bin/gcc; ln -s /usr/bin/gcc-6 /usr/bin/gcc
  #IF_TORCH_ENABLED - rm /usr/bin/g++; ln -s /usr/bin/g++-6 /usr/bin/g++
  #IF_TORCH_ENABLED # Build with half-operators disabled as these are included in CUDA 9
  #IF_TORCH_ENABLED - sed -i 's|/usr/bin/env bash|/usr/bin/env bash\nexport TORCH_NVCC_FLAGS="-D__CUDA_NO_HALF_OPERATORS__"|' install.sh
  #IF_TORCH_ENABLED - bash install.sh -b
  #IF_TORCH_ENABLED # ... and now switch them back
  #IF_TORCH_ENABLED - rm /usr/bin/gcc; ln -s /usr/bin/gcc-7 /usr/bin/gcc
  #IF_TORCH_ENABLED - rm /usr/bin/g++; ln -s /usr/bin/g++-7 /usr/bin/g++
  #IF_TORCH_ENABLED - sed -i 's|\(.*\)"|\1:/opt/torch/install/bin"|' /etc/environment
  #IF_TORCH_ENABLED - export PATH=$PATH:/opt/torch/install/bin
  #IF_TORCH_ENABLED - if [ "$(which th)" = "" ]; then echo "Could not build Torch"; exit 1; fi

  # Install latest anaconda version (download is ~640MB)
  - echo "*** Installing conda... ***"
  - export ANACONDA_INSTALL_SCRIPT="Miniconda3-latest-Linux-x86_64.sh"
  - export ANACONDA_INSTALLER_URL="https://repo.anaconda.com/miniconda/${ANACONDA_INSTALL_SCRIPT}"
  - echo "*** Installing Anaconda ***"
  - echo "Using installer from $ANACONDA_INSTALLER_URL"
  - cd /tmp
  - curl -O $ANACONDA_INSTALLER_URL
  - bash $ANACONDA_INSTALL_SCRIPT -b -p /anaconda
  - rm $ANACONDA_INSTALL_SCRIPT
  # NB. Do not add /anaconda/bin to the PATH since conda must be used through a shell function, not directly as the executable
  - . /anaconda/etc/profile.d/conda.sh
  - echo ". /anaconda/etc/profile.d/conda.sh" >> /etc/bash.bashrc
  # Update conda
  - echo "*** Updating conda installation... ***"
  - conda update -n base -c defaults conda
  # Add channels
  - conda config --add channels conda-forge
  - conda config --add channels pytorch # for pytorch, torchvision
  - conda config --add channels ostrokach-forge # for graph-tool which cannot be installed with pip
  # Do not privilege some channels over others
  - conda config --set channel_priority false
  # Increase timeouts and retries for downloading packages (we had some connection issues in testing)
  - conda config --set remote_connect_timeout_secs 60
  - conda config --set remote_max_retries 20
  - conda config --set remote_read_timeout_secs 180
  # List initial environments
  - echo "*** Initial conda environments... ***"
  - conda env list

  # === AUTOGENERATED ANACONDA PACKAGES START HERE ===

  # Create or install conda environments
  # Python 2.7
  - echo "*** Working on py27 environment. Will take approximately 40 minutes... ***"
  - START_TIME=$(date +%s)
  - echo "Starting at $(date +'%Y-%m-%d %H:%M:%S')"
  - echo "Installing $(echo $PYTHON27_CONDA_PACKAGES | wc -w) packages with conda..."
  - echo "$(echo $PYTHON27_CONDA_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - if [ "$(conda env list | grep py27)" = "" ]; then conda create -y --verbose --name py27 python=2.7 $PYTHON27_CONDA_PACKAGES; else conda install -y --verbose --name py27 $PYTHON27_CONDA_PACKAGES; fi
  - if [ "$(conda env list | grep py27)" = "" ]; then echo "Could not build python 2.7 environment"; exit 1; fi
  - echo "Installing $(echo $PYTHON27_PIP_PACKAGES | wc -w) additional packages with pip..."
  - echo "$(echo $PYTHON27_PIP_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - /anaconda/envs/py27/bin/pip install $PYTHON27_PIP_PACKAGES
  - export JUPYTER_LOCATION=$(echo "source /anaconda/bin/activate py27; which jupyter" | bash)
  - export JUPYTER_VERSION=$(echo "source /anaconda/bin/activate py27; jupyter --version" | bash)
  - if [ "$JUPYTER_LOCATION" != "" ]; then echo "py27 environment has jupyter (version $JUPYTER_VERSION) at $JUPYTER_LOCATION"; else echo "jupyter not found in python 2.7 environment!"; exit 1; fi
  - END_TIME=$(date +%s)
  - echo "Finished at $(date +'%Y-%m-%d %H:%M:%S')"
  - ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
  - echo "*** Building py27 environment took $ELAPSED"
  # Python 3.6
  - echo "*** Working on py36 environment. Will take approximately 30 minutes... ***"
  - START_TIME=$(date +%s)
  - echo "Starting at $(date +'%Y-%m-%d %H:%M:%S')"
  - echo "Installing $(echo $PYTHON36_CONDA_PACKAGES | wc -w) packages with conda..."
  - echo "$(echo $PYTHON36_CONDA_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - if [ "$(conda env list | grep py36)" = "" ]; then conda create -y --verbose --name py36 python=3.6 $PYTHON36_CONDA_PACKAGES; else conda install -y --verbose --name py36 $PYTHON36_CONDA_PACKAGES; fi
  - if [ "$(conda env list | grep py36)" = "" ]; then echo "Could not build python 3.6 environment"; exit 1; fi
  - echo "Installing $(echo $PYTHON36_PIP_PACKAGES | wc -w) additional packages with pip..."
  - echo "$(echo $PYTHON36_PIP_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - /anaconda/envs/py36/bin/pip install $PYTHON36_PIP_PACKAGES
  - export JUPYTER_LOCATION=$(echo "source /anaconda/bin/activate py36; which jupyter" | bash)
  - export JUPYTER_VERSION=$(echo "source /anaconda/bin/activate py36; jupyter --version" | bash)
  - if [ "$JUPYTER_LOCATION" != "" ]; then echo "py36 environment has jupyter (version $JUPYTER_VERSION) at $JUPYTER_LOCATION"; else echo "jupyter not found in python 3.6 environment!"; exit 1; fi
  - ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
  - echo "*** Building py36 environment took $ELAPSED"
  # Python 3.7
  - echo "*** Working on py37 environment. Will take approximately 15 minutes... ***"
  - START_TIME=$(date +%s)
  - echo "Starting at $(date +'%Y-%m-%d %H:%M:%S')"
  - echo "Installing $(echo $PYTHON37_CONDA_PACKAGES | wc -w) packages with conda..."
  - echo "$(echo $PYTHON37_CONDA_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - if [ "$(conda env list | grep py37)" = "" ]; then conda create -y --verbose --name py37 python=3.7 $PYTHON37_CONDA_PACKAGES; else conda install -y --verbose --name py37 $PYTHON37_CONDA_PACKAGES; fi
  - if [ "$(conda env list | grep py37)" = "" ]; then echo "Could not build python 3.7 environment"; exit 1; fi
  - echo "Installing $(echo $PYTHON37_PIP_PACKAGES | wc -w) additional packages with pip..."
  - echo "$(echo $PYTHON37_PIP_PACKAGES | tr ' ' '\n' | sort | tr '\n' ' ')"
  - /anaconda/envs/py37/bin/pip install $PYTHON37_PIP_PACKAGES
  - export JUPYTER_LOCATION=$(echo "source /anaconda/bin/activate py37; which jupyter" | bash)
  - export JUPYTER_VERSION=$(echo "source /anaconda/bin/activate py37; jupyter --version" | bash)
  - if [ "$JUPYTER_LOCATION" != "" ]; then echo "py37 environment has jupyter (version $JUPYTER_VERSION) at $JUPYTER_LOCATION"; else echo "jupyter not found in python 3.7 environment!"; exit 1; fi
  - ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
  - echo "*** Building py37 environment took $ELAPSED"
  # List environments
  - echo "*** Final conda environments... ***"
  - conda env list
  # Set 'other' permissions on the anaconda directory to be equal to that of the owner
  # We then remove write access so that site-packages can be used but not altered
  - echo "Updating /anaconda/ permissions"
  - chmod -R o=u,o-w /anaconda/

  # === AUTOGENERATED R PACKAGES START HERE ===

  # Ensure that R packages are installed
  # Use the full number of available cores for installation (R builds a lot of packages from source so we can get a decent speedup here)
  - Rscript -e "nCores = parallel::detectCores(); options('Ncpus' = nCores); getOption('Ncpus', 1L)"
  # CRAN
  - echo "*** Installing additional R packages. Will take approximately 60 minutes... ***"
  - START_TIME=$(date +%s)
  - echo "Starting at $(date +'%Y-%m-%d %H:%M:%S')"
  - echo "Previously installed CRAN packages:"
  - Rscript -e "installed.packages()[,'Package']"
  - echo "CRAN packages remaining to be installed:"
  - Rscript -e "list.of.packages <- c($CRANPACKAGES); new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,'Package'])]; print(new.packages); if(length(new.packages)) install.packages(new.packages, repos='https://cran.rstudio.com/')"
  # Bioconductor
  - echo "Previously installed BioConductor packages:"
  - Rscript -e "list.of.packages <- c($BIOCPACKAGES); old.packages <- list.of.packages[(list.of.packages %in% installed.packages()[,'Package'])]; print(old.packages);"
  - echo "BioConductor packages remaining to be installed:"
  - Rscript -e "list.of.packages <- c($BIOCPACKAGES); new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,'Package'])]; print(new.packages); if(length(new.packages)) BiocManager::install(new.packages)"
  # Install R packages from custom repos
  - Rscript -e "install.packages('INLA', repos='https://inla.r-inla-download.org/R/testing', dep=TRUE)"
  - Rscript -e "devtools::install_github('dgrtwo/gganimate')"
  # Install RStudio
  - echo "*** Installing RStudio... ***"
  # Ensure RStudio picks up system R rather than Conda R for all users
  - export RSTUDIO_DEB="rstudio-xenial-1.1.463-amd64.deb"
  - echo "export RSTUDIO_WHICH_R=/usr/bin/R" >> /etc/bash.bashrc
  - cd /tmp
  - wget https://download1.rstudio.org/${RSTUDIO_DEB}
  - gdebi --non-interactive ${RSTUDIO_DEB}
  - rm -f ${RSTUDIO_DEB}
  - if [ ! -e "/usr/bin/rstudio" ]; then echo "Could not install RStudio"; exit 1; fi
  - ELAPSED=$(date -u -d "0 $(date +%s) seconds - $START_TIME seconds" +"%H:%M:%S")
  - echo "*** Installing R packages and RStudio took $ELAPSED"

  # Install latest julia version
  - echo "*** Installing Julia... ***"
  - echo "Preparing directory..."
  - mkdir -p /opt/julia
  - cd /opt/julia
  - echo "Downloading package..."
  - curl -O https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0.1-linux-x86_64.tar.gz
  - echo "Installing and cleaning up..."
  - tar -zxf julia-1.0.1-linux-x86_64.tar.gz
  - rm -rf julia-1.0.1-linux-x86_64.tar.gz
  - sed -i 's|\(.*\)"|\1:/opt/julia/julia-1.0.1/bin"|' /etc/environment
  - export PATH=$PATH:/opt/julia/julia-1.0.1/bin
  - export EXTRA_PATHS="${EXTRA_PATHS}:/opt/julia/julia-1.0.1/bin"
  - if [ "$(which julia)" = "" ]; then echo "Could not install Julia"; exit 1; fi

  # Install jupyter kernels
  - echo "*** Setting up R and Julia kernels for jupyter... ***"
  - Rscript -e "devtools::install_github('IRkernel/IRkernel')"
  # - Rscript -e "IRkernel::installspec(user = FALSE)"
  #
  # The command above would install the kernel from system R for jupyter but fails
  # (since we're not in an environment with jupyter at this point) with the following error:
  #
  #   Error in IRkernel::installspec(user = FALSE) :
  #     jupyter-client has to be installed but "jupyter kernelspec --version" exited with code 127.
  #   In addition: Warning message:
  #   In system2("jupyter", c("kernelspec", "--version"), FALSE, FALSE) :
  #     error in running command
  #   Execution halted
  - julia -e 'using Pkg; Pkg.add("IJulia"); Pkg.build("IJulia")'

  # Install spark
  - echo "*** Installing spark... ***"
  - mkdir -p /opt/spark
  - cd /opt/spark
  - curl -O http://apache.mirror.anlx.net/spark/spark-2.4.0/spark-2.4.0-bin-hadoop2.7.tgz
  - tar -zxf spark-2.4.0-bin-hadoop2.7.tgz
  - rm -rf spark-2.4.0-bin-hadoop2.7.tgz
  - sed -i 's|\(.*\)"|\1:/opt/spark/spark-2.4.0-bin-hadoop2.7/bin"|' /etc/environment
  - export PATH=$PATH:/opt/spark/spark-2.4.0-bin-hadoop2.7/bin
  - export EXTRA_PATHS="${EXTRA_PATHS}:/opt/spark/spark-2.4.0-bin-hadoop2.7/bin"
  - if [ "$(which spark-shell)" = "" ]; then echo "Could not install spark"; exit 1; fi

  # Install azcopy
  - echo "*** Installing azcopy... ***"
  - cd /tmp
  - wget -O azcopy.tar.gz https://aka.ms/downloadazcopylinux64
  - tar -xf azcopy.tar.gz
  - bash install.sh
  - rm -rf azcopy.tar.gz azcopy install.sh
  - if [ "$(which azcopy)" = "" ]; then echo "Could not install azcopy"; exit 1; fi

  # Azure Storage Explorer
  - mkdir -p /opt/azurestorage
  - cd /opt/azurestorage
  - wget http://download.microsoft.com/download/A/E/3/AE32C485-B62B-4437-92F7-8B6B2C48CB40/previous-StorageExplorer-linux-x64.tar.gz
  - tar -zxf previous-StorageExplorer-linux-x64.tar.gz
  - rm -f previous-StorageExplorer-linux-x64.tar.gz
  - sed -i 's|\(.*\)"|\1:/opt/azurestorage/"|' /etc/environment
  - export PATH=$PATH:/opt/azurestorage/
  - export EXTRA_PATHS="${EXTRA_PATHS}:/opt/azurestorage/"
  - if [ "$(which StorageExplorer)" = "" ]; then echo "Could not install StorageExplorer"; exit 1; fi

  # Check for successful installations
  - echo "*** Checking for successful installation... ***"
  # - programming languages
  - if [ "$(which python)" != "" ]; then echo "python $(which python)"; echo "$(python --version)"; else echo "python not found!"; exit 1; fi
  - if [ "$(which R)" != "" ]; then echo "R $(which R)"; echo "$(R --version)"; else echo "R not found!"; exit 1; fi
  - if [ "$(which psql)" != "" ]; then echo "psql $(which psql)\n $(psql --version)"; else echo "psql not found!"; exit 1; fi
  - if [ "$(which julia)" != "" ]; then echo "julia $(which julia)"; echo "$(julia --version)"; else echo "julia not found!"; exit 1; fi
  - if [ "$(which java)" != "" ]; then echo "java $(which java)"; echo "$(java -version)"; else echo "java not found!"; exit 1; fi
  - if [ "$(which dotnet)" != "" ]; then echo "dotnet $(which dotnet)"; echo "$(dotnet --info)"; else echo "dotnet not found!"; exit 1; fi
  - if [ "$(which gcc)" != "" ]; then echo "gcc $(which gcc)"; echo "$(gcc --version)"; else echo "gcc not found!"; exit 1; fi
  - if [ "$(which g++)" != "" ]; then echo "g++ $(which g++)"; echo "$(g++ --version)"; else echo "g++ not found!"; exit 1; fi
  - if [ "$(which gfortran)" != "" ]; then echo "gfortran $(which gfortran)"; echo "$(gfortran --version)"; else echo "gfortran not found!"; exit 1; fi
  # - development tools
  - if [ "$(which bash)" != "" ]; then echo "bash $(which bash)"; echo "$(bash --version)"; else echo "bash not found!"; exit 1; fi
  - if [ "$(which git)" != "" ]; then echo "git $(which git)"; echo "$(git --version)"; else echo "git not found!"; exit 1; fi
  - if [ "$(which htop)" != "" ]; then echo "htop $(which htop)"; echo "$(htop --version)"; else echo "htop not found!"; exit 1; fi
  - if [ "$(which firefox)" != "" ]; then echo "firefox $(which firefox)"; echo "$(firefox --version)"; else echo "firefox not found!"; exit 1; fi
  - if [ "$(which vim)" != "" ]; then echo "vim $(which vim)"; echo "$(vim --version)"; else echo "vim not found!"; exit 1; fi
  - if [ "$(which emacs)" != "" ]; then echo "emacs $(which emacs)"; echo "$(emacs --version)"; else echo "emacs not found!"; exit 1; fi
  - if [ "$(which nano)" != "" ]; then echo "nano $(which nano)"; echo "$(nano --version)"; else echo "nano not found!"; exit 1; fi
  - if [ "$(which code)" != "" ]; then echo "code $(which code)"; echo "$(code --version)"; else echo "code not found!"; exit 1; fi
  - if [ "$(which atom)" != "" ]; then echo "atom $(which atom)"; echo "$(dpkg -s atom)"; else echo "atom not found!"; exit 1; fi
  - if [ "$(which docker)" != "" ]; then echo "docker $(which docker)"; echo "$(docker --version)"; else echo "docker not found!"; exit 1; fi
  - if [ "$(which az)" != "" ]; then echo "az $(which az)"; echo "$(az --version)"; else echo "az not found!"; exit 1; fi
  - if [ "$(which azcopy)" != "" ]; then echo "azcopy $(which azcopy)"; echo "$(azcopy --version)"; else echo "azcopy not found!"; exit 1; fi
  - if [ "$(which scala)" != "" ]; then echo "scala $(which scala)"; else echo "scala not found!"; exit 1; fi
  #IF_TORCH_ENABLED - if [ "$(which th)" != "" ]; then echo "th $(which th)"; else echo "torch not found!"; exit 1; fi
  - if [ "$(which nvidia-smi)" != "" ]; then echo "nvidia-smi $(which nvidia-smi)"; echo "$(nvidia-smi --help)"; else echo "nvidia-smi not found!"; exit 1; fi
  - if [ "$(which rstudio)" != "" ]; then echo "rstudio $(which rstudio)"; echo "$(dpkg -s rstudio)"; else echo "rstudio not found!"; fi
  # Check for missing packages
  - echo "CRAN packages that could not be installed:"
  - Rscript -e "list.of.packages <- c($CRANPACKAGES); missing.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,'Package'])]; print(missing.packages)"
  - echo "Bioconductor packages that could not be installed:"
  - Rscript -e "list.of.packages <- c($BIOCPACKAGES); missing.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,'Package'])]; print(missing.packages)"

  # Set PATH appropriately
  - echo "Setting PATH to '${PATH}:${EXTRA_PATHS}'"
  - echo "export PATH=${PATH}:${EXTRA_PATHS}" >> /etc/bash.bashrc

  # Deprovision
  - echo "Deprovisioning this VM to allow an image to be made from it"
  - waagent -deprovision+user -force
  # Fix internet connectivity that is broken by waagent deprovisioning
  - ln -s /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

final_message:
  "The system is setup and deprovisioned. Configuration took $UPTIME seconds"
