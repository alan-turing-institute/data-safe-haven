#cloud-config

apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Update apt database on first boot (ie run apt-get update)
  update: true

# List of packages to install with apt-get
packages:
  - openssh-server
  - python3-pip
  - python3-venv

# Add the atiadmin (default) and mirrordaemon users
# lock_passwd: Lock the password to disable password login
users:
  - default
  - name: mirrordaemon
    lock_passwd: True
    sudo: False
    ssh_authorized_keys:
      - EXTERNAL_PUBLIC_SSH_KEY

write_files:
  - path: "/etc/systemd/system/pypiserver.service"
    content: |
      [Unit]
      Description=A minimal PyPI server for use with pip/easy_install.
      After=network.target

      [Service]
      Type=simple
      PIDFile=/var/run/pypiserver.pid
      User=mirrordaemon
      Group=mirrordaemon

      ExecStart=/pypiserver/bin/pypi-server -p 3128 -P . -a . -v --log-file /datadrive/mirrordaemon/pypiserver.log /datadrive/mirrordaemon/pypi/web/packages
      ExecStop=/bin/kill -TERM $MAINPID
      ExecReload=/bin/kill -HUP $MAINPID
      Restart=always

      WorkingDirectory=/datadrive/mirrordaemon/pypi/

      TimeoutStartSec=3
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
  - path: "/pypiserver.app.py.patch"
    content: |
      --- _app.py 2019-04-03 19:51:21.000000000 +0100
      +++ _app.py 2019-04-03 20:27:05.000000000 +0100
      @@ -84,7 +84,2 @@

      -    try:
      -        numpkgs = len(list(packages()))
      -    except:
      -        numpkgs = 0
      -
           # Ensure template() does not consider `msg` as filename!
      @@ -94,3 +89,3 @@
                           VERSION=__version__,
      -                    NUMPKGS=numpkgs,
      +                    NUMPKGS="mirrored",
                           PACKAGES=urljoin(fp, "packages/"),
      @@ -108,2 +103,3 @@
       def doc_upload():
      +    raise HTTPError(405, "documentation upload not allowed")
           try:
      @@ -121,2 +117,3 @@
       def remove_pkg():
      +    raise HTTPError(405, "package removal not allowed")
           name = request.forms.get("name")
      @@ -140,2 +137,3 @@
       def file_upload():
      +    raise HTTPError(405, "file upload not allowed")
           ufiles = Upload._make(
      @@ -215,2 +213,23 @@
               ordering = 0
      +        # Override package search (which times out) with a lookup from the simple static package index
      +        with open("/datadrive/mirrordaemon/pypi/web/simple/index.html", "r") as f_package_index:
      +            for line in f_package_index.readlines():
      +                if "<a href" in line:
      +                    package_name = line.split(">")[1].split("<")[0]
      +                    if value in package_name:
      +                        versions = ["exists"]
      +                        with open("/datadrive/mirrordaemon/pypi/web/simple/{}/index.html".format(package_name), "r") as f_package_details:
      +                            for line in f_package_details.readlines():
      +                                if ".tar.gz" in line:
      +                                    try:
      +                                        versions.append(line.split(">")[1].split("-")[-1].split(".tar.gz")[0])
      +                                    except IndexError:
      +                                        pass
      +                        d = {"_pypi_ordering": 0, "version": versions[-1],
      +                             "name": package_name, "summary": "{} is available".format(package_name)}
      +                        response.append(d)
      +                ordering += 1
      +        call_string = xmlrpclib.dumps((response,), 'search', methodresponse=True)
      +        return call_string
      +        # End of patch
               for p in packages():
      @@ -231,2 +250,6 @@
       def simpleindex():
      +    # Overriding simple index pages with static content
      +    with open("/datadrive/mirrordaemon/pypi/web/simple/index.html", "r") as f_index:
      +        return f_index.read()
      +    # End of patch
           links = sorted(core.get_prefixes(packages()))
      @@ -255,3 +278,6 @@
               return redirect('/simple/{0}/'.format(normalized), 301)
      -
      +    # Overriding simple index pages with static content
      +    with open("/datadrive/mirrordaemon/pypi/web/simple/{}/index.html".format(prefix), "r") as f_index:
      +        return f_index.read()
      +    # End of patch
           files = sorted(core.find_packages(packages(), prefix=prefix),
      @@ -286,2 +312,5 @@
       def list_packages():
      +    # Redirecting to the simple endpoint
      +    return redirect(request.fullpath.replace("packages", "simple"), 302)
      +    # End of patch
           fp = request.fullpath
      @@ -312,2 +341,10 @@
       def server_static(filename):
      +    # Overriding package root check since all packages are in one directory
      +    root = "/datadrive/mirrordaemon/pypi/web/packages"
      +    response = static_file(filename, root=root, mimetype=mimetypes.guess_type(filename)[0])
      +    if config.cache_control:
      +        response.set_header(
      +            "Cache-Control", "public, max-age=%s" % config.cache_control)
      +    return response
      +    # End of patch
           entries = core.find_packages(packages())


runcmd:
  # Set up disk
  - echo "*** Setting up local disk... ***"
  - parted /dev/sdc mklabel gpt
  - parted /dev/sdc mkpart primary ext4 0% 100%
  - parted /dev/sdc print
  - sleep 5
  - mkfs -t ext4 /dev/sdc1
  - mkdir -p /datadrive
  - mount /dev/sdc1 /datadrive
  - UUID=$(blkid | grep "/dev/sdc1" | cut -d'"' -f2)
  - sed "s|UUID|UUID=$UUID\t/datadrive\text4\tdefaults,nofail\t1\t2\nUUID|" /etc/fstab > fstab.tmp
  - mv fstab.tmp /etc/fstab
  - mkdir -p /datadrive/mirrordaemon/pypi/web/packages

  # Fix permissions so that mirrordaemon owns its files
  - chown -R mirrordaemon:mirrordaemon /datadrive/mirrordaemon
  - chown -R mirrordaemon:mirrordaemon ~mirrordaemon

  # Install pypiserver with pip
  - echo "*** Installing pypiserver... ***"
  - python3 -m venv pypiserver
  - pypiserver/bin/pip install pypiserver==1.2.7
  # Patch pypiserver so that it uses the static simple index files
  - echo "*** Patching pypiserver to use static index files ***"
  - cd /pypiserver/lib/python3*/site-packages/pypiserver
  - patch < /pypiserver.app.py.patch
  - cd /

  # Set up pypiserver: 'start' runs it now; 'enable' adds it to the list of services run on boot
  - echo "*** Setting up pypiserver pointing to local disk... ***"
  - systemctl enable pypiserver.service
  - systemctl start pypiserver.service
  - systemctl status pypiserver.service


# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: True
