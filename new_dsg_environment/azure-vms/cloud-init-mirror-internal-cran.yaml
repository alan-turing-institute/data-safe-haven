#cloud-config

apt:
  # Preserves the existing /etc/apt/sources.list
  preserve_sources_list: true

  # Update apt database on first boot (ie run apt-get update)
  update: true

# List of packages to install with apt-get
packages:
  - openssh-server
  - rsync
  - apache2

# Add the atiadmin (default) and mirrordaemon users
# lock_passwd: Lock the password to disable password login
users:
  - default
  - name: mirrordaemon
    lock_passwd: True
    sudo: False
    ssh_authorized_keys:
      - EXTERNAL_PUBLIC_SSH_KEY

write_files:
  - path: /000-default.conf
    content: |
      <VirtualHost *:80>
        DocumentRoot "/datadrive/www/cran"
        <Directory "/datadrive/www/cran">
            Options Indexes FollowSymLinks Includes
            AllowOverride All
            Order allow,deny
            Allow from all
            Require all granted
        </Directory>
      </VirtualHost>

runcmd:
  # Upgrade installation, clean up, then install nginx
  - echo "*** Upgrade and clean up apt-get packages... ***"
  - apt-get -y upgrade
  - apt-get clean

  # Set up disk
  - echo "*** Setting up local disk... ***"
  - parted /dev/sdc mklabel gpt
  - parted /dev/sdc mkpart primary ext4 0% 100%
  - parted /dev/sdc print
  - sleep 5
  - mkfs -t ext4 /dev/sdc1
  - mkdir -p /datadrive
  - mount /dev/sdc1 /datadrive
  - UUID=$(blkid | grep "/dev/sdc1" | cut -d'"' -f2)
  - sed "s|UUID|UUID=$UUID\t/datadrive\text4\tdefaults,nofail\t1\t2\nUUID|" /etc/fstab > fstab.tmp
  - mv fstab.tmp /etc/fstab
  - mkdir -p /datadrive/www/cran

  # Fix permissions so that mirrordaemon owns its files
  - chown -R mirrordaemon:mirrordaemon /datadrive
  - chown -R mirrordaemon:mirrordaemon ~mirrordaemon

  # Set up apache
  - echo "*** Setting up apache server pointing to local disk... ***"
  - mv /000-default.conf /etc/apache2/sites-enabled/000-default.conf
  - a2enmod rewrite
  - systemctl enable apache2.service
  - systemctl restart apache2.service
  - systemctl status apache2.service


# Shutdown so that we can tell when the job has finished by polling the VM state
power_state:
  mode: poweroff
  message: "Shutting down as a signal that setup is finished"
  timeout: 30
  condition: True
